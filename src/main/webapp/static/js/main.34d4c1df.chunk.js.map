{"version":3,"sources":["redux/reducers/teachers.js","redux/actions/actionsType.js","redux/utility.js","redux/reducers/lesson.js","redux/reducers/temporarySchedule.js","redux/reducers/snackbar.js","helper/axios.js","constants/tokenBegin.js","redux/reducers/auth.js","redux/reducers/loadingIndicator.js","redux/reducers/schedule.js","redux/reducers/class.js","redux/reducers/subjects.js","redux/reducers/groups.js","redux/reducers/rooms.js","constants/actionTypes.js","redux/reducers/roomTypes.js","redux/reducers/busyRooms.js","redux/reducers/semesters.js","redux/reducers/users.js","redux/reducers/freeRooms.js","redux/reducers/departments.js","redux/reducers/students.js","redux/reducers/index.js","services/authService.js","constants/axios.js","helper/i18n.js","sagas/authSaga.js","sagas/logoutSaga.js","sagas/checkAuthTimeoutSaga.js","sagas/checkAuthStateSaga.js","sagas/registrationSaga.js","sagas/activateUserSaga.js","sagas/resetUserPasswordSaga.js","sagas/watchers.js","sagas/index.js","validation/validateFields.js","constants/links.js","components/LanguageSelector/LanguageSelector.js","constants/schedule/colors.js","redux/actions/temporarySchedule.js","redux/actions/snackbar.js","redux/actions/users.js","redux/actions/loadingIndicator.js","redux/actions/schedule.js","redux/actions/teachers.js","redux/actions/class.js","redux/actions/groups.js","redux/actions/semesters.js","services/snackbarService.js","constants/snackbarTypes.js","helper/handlerAxios.js","services/loadingService.js","helper/formHelper.js","services/groupService.js","constants/reduxForms.js","services/scheduleService.js","services/busyRooms.js","redux/actions/busyRooms.js","constants/schedule/cssClasses.js","share/Card/Card.js","validation/storeValidation.js","constants/validation.js","share/renderedFields/select.js","share/renderedFields/error.js","services/semesterService.js","constants/schedule/days.js","components/FreeRoomForm/freeRoomForm.js","services/classService.js","containers/FreeRooms/freeRooms.js","services/freeRoomsService.js","redux/actions/freeRooms.js","components/Header/Header.js","constants/userRoles.js","helper/prepareSchedule.js","constants/disabledCard.js","share/modals/modal/linkToMeetingDialog.js","components/LinkToMeeting/LinkToMeeting.js","constants/places.js","helper/renderTeacher.js","helper/renderScheduleTable.js","components/GroupSchedulePageTop/GroupSchedulePageTop.js","components/GroupSchedulePage/GroupSchedulePage.js","containers/Home/Home.js","share/renderedFields/timeSemester.js","components/TeacherScheduleForm/TeacherScheduleForm.js","components/TeacherSchedule/TeacherSchedule.js","helper/ObjectRevision.js","services/teacherService.js","services/lessonService.js","redux/actions/lesson.js","services/roomService.js","redux/actions/rooms.js","components/Board/Board.js","components/ScheduleItem/ScheduleItem.js","helper/strings.js","components/ScheduleLessonsList/ScheduleLessonsList.js","components/ScheduleDialog/ScheduleDialog.js","components/Schedule/Schedule.js","containers/SchedulePage/SchedulePage.js","share/renderedFields/input.js","redux/actions/departments.js","services/departmentService.js","helper/disableComponent.js","components/AddTeacherForm/AddTeacherForm.js","share/modals/dialog.js","constants/cardType.js","helper/search.js","share/SearchPanel/SearchPanel.js","share/NotFound/NotFound.js","components/AddGroupForm/AddGroupForm.js","share/Snackbar/SnackbarComponent.js","services/subjectService.js","redux/actions/subjects.js","services/studentService.js","redux/actions/students.js","helper/pageRedirection.js","share/modals/modal/AddStudentDialog.js","helper/renderStudentTable.js","services/uploadFile.js","components/UploadFile/UploadFile.js","share/modals/modal/showStudentsDialog.js","helper/shortTitle.js","containers/GroupList/GroupList.js","components/AddRoomForm/AddRoomForm.js","services/roomTypesService.js","redux/actions/roomTypes.js","components/AddNewRoomType/AddNewRoomType.js","containers/RoomList/RoomList.js","components/AddSubjectForm/AddSubjectForm.js","containers/SubjectPage/SubjectPage.js","share/modals/modal/modal.js","share/renderedFields/checkbox.js","helper/MultiselectForGroups.js","components/SemesterForm/SemesterForm.js","components/SemesterCopyForm/SemesterCopyForm.js","share/modals/modal/setDefaultDialog.js","containers/SemesterPage/SemesterPage.js","services/userService.js","containers/MergeRolePage/MergeRolePage.js","components/ChangePasswordForm/ChangePasswordForm.js","containers/BusyRooms/BusyRooms.js","constants/navigation.js","helper/multiselect.js","containers/TeachersList/TeachersList.js","helper/reduxFormHelper.js","share/renderedFields/renderMultiselect.js","components/LessonForm/LessonForm.js","share/renderedFields/time.js","components/ClassForm/ClassForm.js","constants/common.js","containers/ClassSchedule/ClassSchedule.js","components/AddDepartmentForm/AddDepartmentForm.js","helper/renderTeacherTable.js","share/modals/modal/showDataDialog.js","containers/DepartmentPage/DepartmentPage.js","constants/navigationComponents.js","components/Navigation/NavigationPage.js","share/modals/chooseGroupDialog/CopyLessonDialog.js","components/LessonsList/LessonsList.js","components/CopyLessonsFromSemesterForm/CopyLessonsFromSemesterForm.js","containers/LessonPage/LessonPage.js","containers/AdminPage/AdminPage.js","containers/Auth/Logout/Logout.js","redux/actions/auth.js","containers/ActivationPage/ActivationPage.js","containers/ProfilePage/ProfilePage.js","constants/auth.js","components/LoginForm/LoginForm.js","components/RegistrationForm/RegistrationForm.js","components/ResetPasswordForm/ResetPasswordForm.js","containers/Auth/Auth.js","components/Register/Register.js","components/ResetPassword/ResetPassword.js","components/Login/Login.js","services/temporaryScheduleService.js","components/TemporarySchedule/TemporaryScheduleForm/TemporaryScheduleForm.js","components/TemporarySchedule/TemporaryScheduleCard/TemporaryScheduleCard.js","components/TemporarySchedule/TemporaryScheduleCardButtons/TemporaryScheduleCardButtons.js","components/TemporarySchedule/ScheduleAndTemporaryScheduleList/ScheduleAndTemporaryScheduleList.js","constants/temporaryScheduleRadioTypes.js","components/TemporarySchedule/TemporaryScheduleTitle/TemporaryScheduleTitle.js","components/TemporarySchedule/TemporaryScheduleList/TemporaryScheduleList.js","components/TemporarySchedule/TemporaryScheduleVacationForm/TemporaryScheduleVacationForm.js","containers/TemporarySchedule/TemporarySchedule.js","router/Routers.js","components/SuccessSnackbar/SuccessSnackbar.js","redux/actions/snackBarReducer.js","App.js","serviceWorker.js","index.js"],"names":["compare","a","b","comparison","surname","teachers","state","teacher","disabledTeachers","action","type","result","sort","filter","id","updatedTeacher","forEach","push","updateObject","oldObject","updatedValues","initialState","lessons","lessonTypes","lesson","groupId","uniqueError","reducer","concat","updatedLessons","temporarySchedules","temporarySchedule","vacation","schedulesAndTemporarySchedules","teacherId","changedScheduleId","isSnackbarOpen","snackbarType","message","isOpen","REACT_APP_API_BASE_URL","undefined","process","trim","instance","axios","create","baseURL","token","localStorage","getItem","includes","defaults","headers","common","Authorization","role","error","activationError","response","login","removeItem","registration","reg","resetPasswordResponse","loading","scheduleLoading","semesterLoading","items","availability","itemsIds","fullSchedule","groupSchedule","scheduleType","scheduleGroupId","currentSemester","defaultSemester","viewTeacherScheduleResults","itemArr","index","findIndex","item","splice","newType","itemGroupId","scheduleTeacherId","newArr","teacherSchedule","semesters","scheduleSemesterId","semesterId","teacherRangeSchedule","classActions","classScheduler","classScheduleOne","classSchedulOne","one","classScheduleItem","classSchedulerstate","classItem","subjects","subject","disabledSubjects","updatedSubjects","groups","group","disabledGroups","Number","updatedGroups","name","rooms","oneRoom","disabledRooms","roomItem","roomState","actionType","roomTypes","oneType","updateTypeState","typeItem","roomTypeItem","busyRooms","semester","disabledSemesters","archivedSemesters","updatedSemesters","archivedSemester","find","users","user","freeRooms","freeRoom","departments","department","disabledDepartments","disable","updatedDepartments","updatedDefaultDepartments","students","student","updatedStudents","rootReducer","combineReducers","auth","snackbar","schedule","loadingIndicator","form","formReducer","authUserService","request","hasOwnProperty","authType","data","email","post","then","registerUserService","resetUserPasswordService","put","activateUserService","logoutUserService","userLang","navigator","language","userLanguage","slice","lang","i","i18n","use","LanguageDetector","initReactI18next","Backend","init","lng","backend","loadPath","fallbackLng","debug","ns","defaultNS","keySeparator","useDataAttrOptions","interpolation","escapeValue","formatSeparator","react","wait","authSaga","payload","call","jwtDecode","require","decodedJWT","expirationDate","Date","exp","setItem","roles","sub","expirationTime","getTime","t","logoutSaga","checkAuthTimeoutSaga","delay","checkAuthStateSaga","registrationSaga","activateUserSaga","resetUserPasswordSaga","watchUserAuthentication","takeLatest","takeEvery","startForman","fork","min","max","links","HOME_PAGE","ADMIN_PAGE","SCHEDULE_PAGE","LOGIN","ACTIVATION_PAGE","LOGOUT","TEACHER_SCHEDULE","MY_PROFILE","LessonPage","TeacherList","GroupList","Group","Student","Edit","Delete","AddStudent","SetDisable","ShowStudents","IdParam","IdStudentParam","ClassScheduleTitle","RoomList","SubjectPage","BusyRooms","SemesterPage","MergeRolePage","Changes","ScheduleFor","Registration","RESET_PASSWORD","Departments","LanguageSelector","props","useTranslation","radioLangClasses","languages","changeLanguage","event","target","value","RadioGroup","row","aria-label","className","img","title","map","langItem","FormControlLabel","key","control","Radio","color","onChange","src","alt","renderLangControls","colors","setTemporarySchedules","res","setSchedulesAndTemporarySchedules","selectTemporarySchedule","selectVacation","selectTeacherId","setOpenSnackbar","setUser","setLoading","setCurrentSemester","setDefaultSemester","checkAvailabilitySchedule","setFullSchedule","setScheduleType","setTeacher","deleteTeacher","showAllTeachers","setClassScheduleList","showAllGroups","updateSemester","handleSnackbarOpenService","store","dispatch","handleSnackbarCloseService","snackbarStore","getState","snackbarTypes","errorHandler","successHandler","setLoadingService","isLoading","setScheduleLoadingService","setSemesterLoadingService","resetFormHandler","formName","reset","sortGroup","substr","indexOf","selectGroupService","showAllGroupsService","get","catch","createGroupService","cardType","updateGroupService","getDisabledGroupsService","setDisabledGroups","getCurrentSemesterService","err","getDefaultSemesterService","getScheduleItemsService","getScheduleItemsServiceBySemester","BUSY_ROOMS","deleteItemFromScheduleService","itemId","delete","setScheduleGroupIdService","setScheduleGroupId","setScheduleTypeService","getFullSchedule","getGroupSchedule","getTeacherSchedule","setScheduleTeacherIdService","setScheduleTeacherId","showAllPublicSemestersService","setScheduleSemesterIdService","setScheduleSemesterId","showAllPublicGroupsService","length","setTeacherServiceViewType","setTeacherViewType","cssClasses","Card","class","card","children","dragItemNode","useRef","dragItem","draggable","handleDragEnd","e","JSON","parse","childNodes","groupTitleEl","document","getElementById","allBoards","getElementsByClassName","groupTitles","boards","style","backgroundColor","board","background","display","current","removeEventListener","onDragStart","groupTitle","setTimeout","classList","contains","setItemGroupIdService","addEventListener","dataTransfer","setData","checkUniqSemester","storeSemester","year","description","toUpperCase","validation","EMAIL","PASSWORD","required","lessThanZero","minLengthValue","maxLengthValue","lessThanTime","previousValue","allValues","values","moment","toDate","field","greaterThanTime","uniqueClassName","classId","some","_arr","class_name","checkUniqClassName","uniqueGroup","checkUniqueGroup","uniqueSubject","subjectTitle","checkUniqueSubject","uniqueDepartment","departmentTitle","checkUniqueDepartment","timeIntersect","startTime","endTime","extendMoment","Moment","incomeRange","range","intersect","timeIntersectService","uniqueRoomName","roomName","roomdId","checkUniqueRoomName","test","password","minYearValue","minYear","getFullYear","lessThanDate","greaterThanDate","renderSelectField","input","label","meta","touched","custom","FormControl","InputLabel","htmlFor","Select","native","FormHelperText","renderFromHelper","selectSemesterService","showAllSemestersService","reverse","switchSaveActions","putSemester","postSemester","handleSemesterService","isUniqueError","semester_days","semester_classes","prop","Object","prototype","substring","startDay","endDay","semester_groups","cardSemester","checkSemesterYears","currentScheduleOld","findCurrentSemester","dateEndYear","dateStartYear","conf","window","confirm","getDisabledSemestersService","getArchivedSemestersService","semesterItem","setDisabledSemesters","daysUppercase","day","FreeRoomForm","useEffect","handleSubmit","pristine","submitting","onReset","class_names","classSchedulerOne","onSubmit","Field","component","validate","week","toLowerCase","classNum","Button","variant","disabled","onClick","reduxForm","connect","getClassScheduleListService","bufferArray","results","getPublicClassScheduleListService","putAddClassScheduleOneService","postAddClassScheduleOneService","useState","open","setOpen","Dialog","onClose","maxWidth","aria-labelledby","elem","FREE_ROOMS_URL","dayOfWeek","evenOdd","StyledMenu","withStyles","paper","border","Menu","elevation","getContentAnchorEl","anchorOrigin","vertical","horizontal","transformOrigin","StyledMenuItem","theme","root","palette","primary","main","white","MenuItem","React","anchorEl","setAnchorEl","handleClick","currentTarget","handleClose","anchorElUser","setAnchorElUser","handleClickUserMenu","handleCloseUserMenu","userRole","MANAGER","leftLinks","menu","userMenu","to","aria-controls","aria-haspopup","ListItemIcon","fontSize","keepMounted","Boolean","textDecoration","TEACHER","getUserMenu","CircularProgress","size","userRoles","USER","makeFullSchedule","groupsCount","groupList","groupListId","Map","daysPrepArrayFull","done","set","prep_schedule_array","oddArray","evenArray","groupItem","groupIndex","classFull","groupFullIterate","days","dayFullIterate","classes","dayFullIterable","weeks","odd","even","cards","resultArray","disabledCard","LinkToMeetingDialog","cardId","isHide","linkToMeeting","disableBackdropClick","DialogTitle","href","LinkToMeeting","openDialog","setOpenDialog","focus","places","TOGETHER","AUDITORY","ONLINE","parseShortPosition","position","teacherPosition","getFirstLetter","word","charAt","getTeacherName","patronymic","getTeacherFullName","getTeacherForSite","handleTeacherInfo","shortid","currentDay","now","getDay","matchDayNumberSysytemToDayName","setLink","place","getHref","printWeekNumber","startScheduleDate","date","parsed","Array","from","numberOfDays","Math","floor","ceil","getWeekNumber","isOddFunction","num","currentWeekType","renderClassCell","prepareLessonCardCell","inner","getTeacherWithShortPosition","subjectForSite","prepareLessonSubCardCell","room","i18next","lessonType","link","prepareLessonTemporaryCardCell","temporary_schedule","prepareTeacherCardRegularCell","buildLessonWithRoom","prepareTeacherCardCell","renderScheduleGroupHeader","TableHead","TableRow","TableCell","generate","renderGroupTable","isOdd","TableContainer","Table","TableBody","classDay","classIndex","isOddWeek","semesterDays","entries","renderGroupDayClass","renderGroupCells","isCurrentDay","day_name","colspan","rowspan","classname","skip_render","weekly_render","colSpan","rowSpan","renderDay","dayName","dayItem","semesterClassesCount","cardIndex","prepareForRender","classesCount","dayClassName","oddWeekClass","evenWeekClass","Fragment","renderFirstDayFirstClassFirstCardLine","renderFirstDayOtherClassFirstCardLine","renderFullSchedule","fullResultSchedule","scheduleTitle","renderScheduleDays","renderTeacherClassCell","teacherLessonAddCellClass","buildGroupNumber","prepareTeacherTemporaryCardCell","renderWeekTable","scheduleRow","clas","renderClassRow","renderTeacherRangeSchedule","dayIndex","renderTeacherRangeDay","renderFirstLineTable","lessonItem","subject_for_site","group_name","lessonClassName","lessonIndex","renderLessonsRestLines","useStyles","makeStyles","margin","spacing","initialValues","groupDisabled","setGroupDisabled","setSemesterId","loadingContainer","initialize","renderSemesterList","change","labelId","setPlace","history","useHistory","location","useLocation","emptySchedule","renderDownloadLink","entity","entityId","languageToRequest","PUBLIC_DOWNLOAD_GROUP_SCHEDULE_URL","PUBLIC_DOWNLOAD_TEACHER_SCHEDULE_URL","rel","download","renderSchedule","resultArrays","evenDaysPrepArray","oddDaysPrepArray","evenDayPrep","oddDayPrep","oddDay","oddClas","clasIndex","dayArr","evenDay","evenClas","makeGroupSchedule","renderGroupScheduleTitle","oddDays","evenDays","oddClasses","evenClasses","dayTeacher","oddClass","evenClass","makeTeacherSchedule","getTeacherWithPosition","renderTeacherScheduleTitle","archive","groupPath","teacherPath","submitSearchSchedule","changePlace","pathname","params","URLSearchParams","search","getSchedule","renderMounthPicker","inputProps","invalid","utils","MomentUtils","DatePicker","minDate","clearable","format","helperText","add","renderMonthPicker","FOR_TEACHER_SCHEDULE_URL","replace","getTeacherScheduleService","isObjectEmpty","object","toString","stringify","showAllTeachersService","getTeachersWithoutAccount","updateTeacherService","updateTeacherCard","getDisabledTeachersService","selectTeacherCardService","handleTeacherService","cardTeacher","createTeacherService","teacherCardId","getLessonsByGroupService","getLessonTypesService","handleLessonCardService","cardObj","groupData","lessonCardId","hours","grouped","cardObjectHandler","storeLesson","checkUniqLesson","setUniqueErrorService","isCopy","updateLessonCard","selectLessonCardService","updateLessonHandler","selectGroupIdService","showListOfRoomsService","getDisabledRoomsService","createRoomService","newValue","typeDescription","Board","onDrop","preventDefault","card_id","getData","arr","split","obj","lessonId","periodId","SCHEDULE_CHECK_AVAILABILITY_URL","checkAvailabilityScheduleService","setModalData","onDragOver","onDragLeave","parent","parentNode","onMouseOver","dayClassWeek","addClassDayBoard","onMouseLeave","remove","removeClassDayBoard","ScheduleItem","translation","fStrLetterCapital","addition","itemNodeId","deleteNodeId","isGroupped","console","log","inBoard","deleteItem","editItem","firstStringLetterCapital","str","c","GroupField","styled","TextField","width","ScheduleLessonsList","defaultProps","options","getOptionLabel","option","firstStringLetterCapitalHandle","Autocomplete","clearOnEscape","openOnFocus","groupFinderHandle","renderInput","els","hoursInSchedule","lessonItems","roomField","ScheduleDialog","itemData","setRoom","sure","setSure","x","y","available","classSuitsToTeacher","teacherAvailable","Schedule","setItemData","prevGroupId","ref","usePrevious","el","scrollIntoView","block","inline","setNewItemHandle","addItemToScheduleService","roomId","setEditItemHandle","SCHEDULE_ITEM_ROOM_CHANGE","handleClickOpen","dayContainerHeight","elClasses","dayContainer","height","maxHeight","deleteItemFromScheduleHandler","editItemOnScheduleHandler","period","ROOMS_AVAILABILITY","checkAvailabilityChangeRoomScheduleService","conditionFunc","classNumber","addDeleteBtnToItem","itemNode","deleteNode","allLessons","getDayColour","itemInBoard","scheduleItems","handleClearSchedule","CLEAR_SCHEDULE_URL","renderTextField","placeholder","setEnabledDepartment","getAllDepartmentsService","setDisabledDepartmentService","clearDepartment","getDepartmentByIdService","setDisableButton","getClearOrCancelTitle","AddTeacher","initializeFormHandler","onSetSelectedCard","ConfirmDialog","whatDelete","LESSON","CLASS","GROUP","ROOM","TYPE","TEMPORARY_SCHEDULE","SUBJECT","SEMESTER","term","String","SearchPanel","SearchChange","showDisabled","showArchived","forLessons","setTerm","checkedB","checkedArchived","setState","handleChange","checked","Switch","NotFound","match","url","Alert","SnackbarComponent","handleSnackbarClose","Snackbar","autoHideDuration","severity","selectSubjectService","subjectId","showAllSubjectsService","createSubjectService","updateSubjectService","getDisabledSubjectsService","setDisabledSubjects","getAllStudentsByGroupId","updateStudentService","selectStudentService","prevGroup","studentId","goToGroupPage","AddStudentDialog","useStyles1","flexShrink","marginLeft","RenderStudentTableActions","useTheme","count","page","rowsPerPage","onPageChange","IconButton","direction","useStyles2","table","minWidth","StyledTableCell","head","black","body","StyledTableRow","hover","RenderStudentTable","onDeleteStudent","checkBoxStudents","handleCheckElement","handleAllChecked","handleAllClear","handleChangeCheckedAllBtn","handleClearCheckedAllBtn","checkedAllBtn","handleAllCheckedBtn","setPage","setRowsPerPage","openDeleteDialog","setOpenDeleteDialog","openEditDialog","setOpenEditDialog","path","handleEdit","emptyRows","deleteStudent","handleCloseEditDialog","sendObject","getCorrectRowCount","pageItemsCount","resRows","detectCheckingCheckAllBtn","rowsCount","handleCheckElem","Paper","scope","align","mailto","sendMail","selectedValue","TableFooter","TablePagination","labelRowsPerPage","rowsPerPageOptions","SelectProps","newPage","onRowsPerPageChange","parseInt","ActionsComponent","UploadFile","selectedFile","setSelectedFile","fileInputRef","handleCloseDialogFile","accept","files","file","formData","FormData","append","alert","uploadStudentsToGroupFile","ShowStudentsDialog","setCheckBoxStudents","checkedAll","setCheckedAll","openUploadFile","setOpenUploadFile","showStudentList","setShowStudentList","groupOption","setGroupOption","defaultGroup","setDefaultGroup","parseStudentToCheckBox","groupsOption","changeStudentItem","resData","getExistingGroupStudent","clearSelection","studentsTmp","prevState","start","finish","resChecked","setSelectDisabled","defaultValue","currentStudents","resItem","getShortTitle","MAX_LENGTH","snackbarMessage","setGroupId","hideDialog","setHideDialog","addStudentDialog","setAddStudentDialog","setDisabled","showStudents","setShowStudents","handleAddUser","handleSetDisable","onShowStudentByGroup","idStudent","visibleGroups","studentSubmit","sendData","createStudentService","navigationNames","GROUP_LIST","val","navigation","GROUPS","setEnabledGroupService","setDisabledGroupService","removeGroupCardService","deleteStudentService","handleGroupService","reason","AddRoom","roomType","putNewType","postNewType","NewRoomType","typeId","setTypeId","getOneNewTypeService","roomTypeId","setRoomId","editHandler","selectOneRoomService","visibleItems","ROOM_LIST","ROOMS","setEnabledRoomsService","setDisabledRoomsService","deleteRoom","addNewTypeService","textAlign","setSubjectId","visibleSubjects","SUBJECT_PAGE","SUBJECTS","setDisabledSubjectsService","removeSubjectCardService","handleSubjectService","ModalWindow","windowTitle","isOkButton","isNoButton","okButtonLabel","renderOkButton","noButtonLabel","renderNoButton","renderModalButtons","renderCheckboxField","labelPlacement","Checkbox","MultiselectForGroups","valueRef","onCancel","selectAllOption","isSelectAllSelected","isOptionSelected","actionMeta","removedValue","hideSelectedOptions","closeMenuOnSelect","isMulti","clearCheckboxes","setCurrent","setByDefault","setCheckedDates","MONDAY","TUESDAY","WEDNESDAY","THURSDAY","FRIDAY","SATURDAY","SUNDAY","selected","setSelected","selectedGroups","setSelectedGroups","openGroupDialog","setOpenGroupDialog","getGroupOptions","groupOptions","semesterOptions","closeDialogForGroup","prepSetCheckedClasses","useForm","setValue","setCheckedClasses","getToday","byDefault","tomorrow","setDate","getDate","getTomorrow","finishTime","setFinishTime","startValue","setStartValue","finishValue","setFinishValue","disabledFinishDate","setDisabledFinishDate","checkedDates","checkedClasses","setMinFinishDate","time","new_date","setCheckedDaysHandler","useCallback","changedDay","setCheckedClassesHandler","classid","changedClass","newDays","reduce","classFullItem","newClasses","isChosenGroup","beginGroups","getChosenSet","resGroup","getChosenSetRemove","isSameOrBefore","setEndTime","keys","semesterDay","scheduleItem","available_semesters_for_copy","submitButtonLabel","SetChangeDialog","openDefault","setOpenDefault","openModal","setOpenModal","openGroupsDialog","setOpenGroupsDialog","setSemesterOptions","edit","setEdit","hideDialogModal","setHideDialogModal","archived","setArchived","handleCreateArchive","CREATE_ARCHIVE_SEMESTER","createArchiveSemesterService","searchArr","setDelete","setDefault","dataId","setEnabledSemestersService","setDisabledSemestersService","removeSemesterCardService","handleSemesterArchivedPreview","viewArchivedSemester","setClassNameForDefaultSemester","SEMESTER_PAGE","SEMESTERS","SEMESTER_COPY_URL","fromSemesterId","toSemesterId","semesterCopy","sem_days","handleClickOpenModal","handleClickOpenDefault","join","arr1","arr2","isEqualsArrObjects","groupIds","setGroupsToSemester","getUsersService","autoCompleteField","defaultPropsTeachers","defaultPropsUsers","mergeUserAndTeacherHandle","mergeObj","userId","USERS","ExpandMoreIcon","Accordion","AccordionSummary","expandIcon","Typography","AccordionDetails","busyRoomsLength","renderWeekRoomInfo","scheduleClass","in_arrayIndex","class_id","classOne","intersectClass","grouppedLessonClass","lessonOne","hoverInfo","teacher_for_site","busyRoom","room_id","room_name","room_type","schedules","renderRoomDay","TEACHER_LIST","CLASS_SCHEDULE_TITLE","DEPARTMENTS","LESSON_PAGE","MERGE_ROLE_PAGE","CHANGES","GENERAL","MultiSelect","onChangeSemesterValue","onSentTeachers","isEnabledSentBtn","setTeacherId","openSelect","setOpenSelect","teacherLength","selectedSemester","setSelectedSemester","departmentOptions","selectTeacherCard","removeTeacherCard","removeTeacherCardService","closeSelectionDialog","TEACHERS","setEnabledTeachersService","setDisabledTeachersService","teachersId","sendTeachersScheduleService","setValueToSubjectForSiteHandler","RenderMultiselect","hidePlaceholder","displayValue","selectedValues","alwaysDisplayedItem","onBlur","onSelect","onRemove","preSelectedValues","disablePreSelectedValues","notSelected","LessonForm","setChecked","rowsMax","multiline","renderTimePicker","TimePicker","ampm","rootInput","ClassScheduleOne","setClassId","getClassScheduleOneService","PERIOD","deleteClassScheduleOneService","addClassScheduleOneService","clear","editDepartment","RenderTeacherTableActions","RenderTeacherTable","isDisabled","setIsDisabled","deleteDialog","setDeleteDialog","departmentId","setDepartmentId","setDepartment","teacherDialog","setTeacherDialog","setEditDepartment","clearDepartmentForm","visibleDepartments","deleteDepartment","setDepartmentIntoForm","deleteDepartmentsService","prev","createDepartmentService","updateDepartmentService","showAllPublicTeachersByDepartmentService","general","tabs_components","a11yProps","flexGrow","header","info","dark","nav","select","btn","gen","setGen","document_title","AppBar","Tabs","indicatorColor","scrollButtons","tab_one","Tab","groupField","CopyLessonDialog","setGroup","setError","multiple","LessonsList","getUkWordHours","number","getHour","getEnHour","lastChar","getUkHour","onCopyLesson","onSelectLesson","onClickOpen","getTitle","openCopyLessonDialog","setOpenCopyLessonDialog","setLessonId","copiedLesson","setCopiedLesson","isIncludeValue","termTmp","getSearchTeachers","selectLessonCardHandler","submitCopy","LESSONS_FROM_SEMESTER_COPY_URL","CopyLessonsFromSemesterService","cardsContainer","groupHandle","groupTitleHandle","lessonGroupObj","copyLessonCardService","deleteLessonCard","constructor","renderCopyLessonsForm","LESSONS","onLogout","onActivate","redirect","AUTH","submitTeacherChange","teacher_name","teacher_surname","teacher_patronymic","teacher_position","updateUserTeacher","handlePasswordFormReset","handleTeacherFormReset","new_password","confirm_password","current_password","updateUserPassword","passwords","renderTeacherdataForm","authTypes","LoginForm","loginError","RegistrationForm","registrationError","emailValidate","emailErrorCondition","emailAdvancedValidate","passwordValidate","passwordsCondition","passwordValidateAdvanced","retypePasswordValidate","retypePasswordValidateAdvanced","switchAuthMode","ResetPasswordForm","resetPasswordError","onAuth","onRegister","onResetPassword","setAuthType","parser","URL","social","isToken","param","splitedParam","replaceState","isSuccess","loginHandler","loginData","commonCondition","authRedirect","authPage","switchAuthModeHandler","registrationData","retypePassword","resetPasswordData","Register","ResetPassword","Login","getTemporarySchedulesService","getTeacherTemporarySchedulesService","deleteTemporaryScheduleService","temporaryScheduleId","handleSuccessMessage","formatObj","formValues","scheduleId","handleSuccess","isVacation","addTemporaryScheduleService","editTemporaryScheduleService","tId","selectTemporaryScheduleService","selectVacationService","selectTeacherIdService","TemporaryScheduleForm","setIsVacation","notify","setNotify","periods","teacherForSite","setValueToTeacherForSiteHandler","Hidden","smUp","smDown","xsDown","xsUp","TemporaryScheduleCard","TemporaryScheduleCardButtons","isTemporary","onOpenDialog","handleScheduleSelect","ScheduleAndTemporaryScheduleList","expandedProp","shortId","setTemporaryScheduleId","expanded","scheduleAndTemporarySchedule","ExpansionPanel","ExpansionPanelSummary","ExpansionPanelDetails","Divider","orientation","flexItem","temporary_schedule_vacation","temporaryScheduleRadioTypes","teacherField","dateGroup","justifyContent","dateField","button","panel","legendBlock","legend","TemporaryScheduleTitle","setDay","radio","setRadio","setToDate","fromDate","setFromDate","handleTeacherSelect","heading","handleFindTeacher","fDate","tDate","TemporaryScheduleList","TemporaryScheduleVacationForm","isFewDays","setIsFewDays","forAll","setForAll","vacationId","addTemporaryScheduleForRangeService","routes","exact","HomePage","GroupSchedulePage","ActivationPage","ProfilePage","SchedulePage","DepartmentPage","AdminPage","ClassSchedule","TemporarySchedule","Logout","TeacherSchedule","SuccessSnackbar","useDispatch","useSelector","successSnackbarMessage","successSnackbarOpen","aria-describedby","Icon","onTryAutoLogin","authCheckState","fallback","hostname","sagaMiddleware","createSagaMiddleware","composeEnhancers","compose","createStore","applyMiddleware","run","rootSaga","ReactDOM","render","serviceWorker","ready","unregister"],"mappings":"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","file":"static/js/main.34d4c1df.chunk.js","sourcesContent":["import * as actionTypes from '../actions/actionsType';\nfunction compare(a, b) {\n    let comparison = 0;\n    if (a.surname > b.surname) {\n        comparison = 1;\n    } else if (a.surname < b.surname) {\n        comparison = -1;\n    }\n    return comparison;\n}\n\nconst teachers = (\n    state = {\n        teachers: [],\n        teacher: {},\n        disabledTeachers: []\n    },\n    action\n) => {\n    switch (action.type) {\n        case actionTypes.ADD_TEACHER:\n            return {\n                ...state,\n                teachers: [...state.teachers, action.result].sort(compare)\n            };\n\n        case actionTypes.DELETE_TEACHER:\n            return {\n                ...state,\n                teachers: [\n                    ...state.teachers.filter(\n                        teachers => teachers.id !== action.result\n                    )\n                ]\n            };\n\n        case actionTypes.SET_TEACHER:\n            return {\n                ...state,\n                teacher: action.result\n            };\n        case actionTypes.SELECT_TEACHER:\n            let teacher = state.teachers.filter(\n                teacher => teacher.id === action.result\n            )[0];\n            if (!teacher) {\n                teacher = { id: null };\n            }\n            return {\n                ...state,\n                teacher: teacher\n            };\n\n        case actionTypes.UPDATE_TEACHER:\n            const updatedTeacher = [];\n            state.teachers.forEach(teacher => {\n                if (teacher.id === action.result.id) {\n                    teacher = { ...teacher, ...action.result };\n                }\n                updatedTeacher.push(teacher);\n            });\n            return {\n                ...state,\n                teacher: {},\n                teachers: updatedTeacher\n            };\n\n        case actionTypes.SHOW_ALL:\n            return {\n                ...state,\n                teachers: [...action.result]\n            };\n        case actionTypes.SET_DISABLED_TEACHERS:\n            return {\n                ...state,\n                disabledTeachers: [...action.result]\n            };\n        case actionTypes.GET_TEACHERS_BY_DEPARTMENT:\n            return {\n            ...state,\n            teachers: [...action.result]\n        };\n\n        default:\n            return state;\n    }\n};\n\nexport default teachers;\n","export const ADD_LESSON_CARD = 'ADD_LESSON_CARD';\nexport const SET_LESSONS_CARDS = 'SET_LESSONS_CARDS';\nexport const SET_LESSON_TYPES = 'SET_LESSON_TYPES';\nexport const DELETE_LESSON_CARD = 'DELETE_LESSON_CARD';\nexport const SELECT_LESSON_CARD = 'SELECT_LESSON_CARD';\nexport const UPDATE_LESSON_CARD = 'UPDATE_LESSON_CARD';\nexport const SELECT_GROUP_ID = 'SELECT_GROUP_ID';\nexport const SET_UNIQUE_ERROR = 'SET_UNIQUE_ERROR';\n\nexport const SET_TEMPORARY_SCHEDULES = 'SET_TEMPORARY_SCHEDULES';\nexport const SET_SCHEDULES_AND_TEMPORARY_SCHEDULES = 'SET_SCHEDULES_AND_TEMPORARY_SCHEDULES';\nexport const SELECT_TEMPORARY_SCHEDULE = 'SELECT_TEMPORARY_SCHEDULE';\nexport const SELECT_VACATION = 'SELECT_VACATION';\nexport const SELECT_TEACHER_ID = 'SELECT_TEACHER_ID';\n\nexport const SET_OPEN_SNACKBAR = 'SET_OPEN_SNACKBAR';\n\nexport const SET_USERS = 'SET_USERS';\nexport const SET_USER = 'SET_USER';\n\nexport const AUTH_USER = 'AUTH_USER';\nexport const AUTH_USER_SUCCESS = 'AUTH_USER_SUCCESS';\nexport const AUTH_USER_ERROR = 'AUTH_USER_ERROR';\nexport const AUTH_USER_INITIATE_LOGOUT = 'AUTH_USER_INITIATE_LOGOUT';\nexport const AUTH_USER_LOGOUT = 'AUTH_USER_LOGOUT';\nexport const AUTH_USER_AUTO_LOGOUT = 'AUTH_USER_AUTO_LOGOUT';\nexport const AUTH_USER_CHECK_STATE = 'AUTH_USER_CHECK_STATE';\nexport const SET_AUTH_ERROR = 'SET_AUTH_ERROR';\n\nexport const REGISTER_USER = 'REGISTER_USER';\nexport const REGISTER_USER_SUCCESS = 'REGISTER_USER_SUCCESS';\nexport const REGISTER_USER_ERROR = 'REGISTER_USER_ERROR';\n\nexport const RESET_USER_PASSWORD = 'RESET_USER_PASSWORD';\nexport const RESET_USER_PASSWORD_SUCCESS = 'RESET_USER_PASSWORD_SUCCESS';\nexport const RESET_USER_PASSWORD_ERROR = 'RESET_USER_PASSWORD_ERROR';\n\nexport const ACTIVATE_USER = 'ACTIVATE_USER';\nexport const ACTIVATE_USER_SUCCESS = 'ACTIVATE_USER_SUCCESS';\nexport const ACTIVATE_USER_ERROR = 'ACTIVATE_USER_ERROR';\n\nexport const SET_LOADING_INDICATOR = 'SET_LOADING_INDICATOR';\nexport const SET_SCHEDULE_LOADING_INDICATOR = 'SET_SCHEDULE_LOADING_INDICATOR';\nexport const SET_SEMESTER_LOADING_INDICATOR = 'SET_SEMESTER_LOADING_INDICATOR';\n\nexport const SET_SCHEDULE_ITEMS = 'SET_SCHEDULE_ITEMS';\nexport const SET_CURRENT_SEMESTER = 'SET_CURRENT_SEMESTER';\nexport const SET_DEFAULT_SEMESTER = 'SET_DEFAULT_SEMESTER';\nexport const ADD_ITEM_TO_SCHEDULE = 'ADD_ITEM_TO_SCHEDULE';\nexport const CHECK_AVAILABILITY_SCHEDULE = 'CHECK_AVAILABILITY_SCHEDULE';\nexport const SET_FULL_SCHEDULE = 'SET_FULL_SCHEDULE';\nexport const SET_GROUP_SCHEDULE = 'SET_GROUP_SCHEDULE';\nexport const SET_SCHEDULE_TYPE = 'SET_SCHEDULE_TYPE';\nexport const DELETE_ITEM_FROM_SCHEDULE = 'DELETE_ITEM_FROM_SCHEDULE';\nexport const SET_ITEM_GROUP_ID = 'SET_ITEM_GROUP_ID';\n\nexport const ADD_TEACHER = 'ADD_TEACHER';\nexport const SELECT_TEACHER = 'SELECT_TEACHER';\nexport const SET_TEACHER = 'SET_TEACHER';\nexport const UPDATE_TEACHER = 'UPDATE_TEACHER';\nexport const DELETE_TEACHER = 'DELETE_TEACHER';\nexport const SHOW_ALL = 'SHOW_ALL';\nexport const GET_TEACHERS_BY_DEPARTMENT='GET_TEACHERS_BY_DEPARTMENT';\n\n\nexport const SHOW_ALL_BUSY_ROOMS = 'SHOW_ALL_BUSY_ROOMS';\n\nexport const SET_CLASS_SCHEDULE_LIST = 'SET_CLASS_SCHEDULE_LIST';\nexport const ADD_CLASS_SCHEDULE_ONE = 'ADD_CLASS_SCHEDULE_ONE';\nexport const GET_CLASS_SCHEDULE_LIST = 'GET_CLASS_SCHEDULE_LIST';\nexport const GET_CLASS_SCHEDULE_ONE = 'GET_CLASS_SCHEDULE_ONE';\nexport const DELETE_CLASS_SCHEDULE_ONE = 'DELETE_CLASS_SCHEDULE_ONE';\nexport const UPDATE_CLASS_SCHEDULE_ONE = 'UPDATE_CLASS_SCHEDULE_ONE';\nexport const CLEAR_CLASS_SCHEDULE_ONE = 'CLEAR_CLASS_SCHEDULE_ONE';\n\nexport const ADD_GROUP = 'ADD_GROUP';\nexport const DELETE_GROUP = 'DELETE_GROUP';\nexport const SHOW_ALL_GROUPS = 'SHOW_ALL_GROUPS';\nexport const SELECT_GROUP = 'SELECT_GROUP';\nexport const UPDATE_GROUP = 'UPDATE_GROUP';\nexport const CLEAR_GROUP = 'CLEAR_GROUP';\n\nexport const ADD_STUDENT='ADD_STUDENT';\nexport const SHOW_ALL_STUDENTS_BY_GROUP_ID='SHOW_ALL_STUDENTS_BY_GROUP_ID';\nexport const SHOW_ALL_STUDENTS='SHOW_ALL_STUDENTS';\nexport const DELETE_STUDENT='DELETE_STUDENT';\nexport const SET_STUDENT='SET_STUDENT';\nexport const UPDATE_STUDENT='UPDATE_STUDENT';\n\nexport const ADD_ROOM = 'ADD_ROOM';\nexport const DELETE_ROOM = 'DELETE_ROOM';\nexport const SHOW_LIST_OF_ROOMS = 'SHOW_LIST_OF_ROOMS';\nexport const SELECT_ONE_ROOM = 'SELECT_ONE_ROOM';\nexport const UPDATE_ONE_ROOM = 'UPDATE_ONE_ROOM';\nexport const CLEAR_ROOM_ONE = 'CLEAR_ROOM_ONE';\nexport const GET_ALL_ROOM_TYPES = 'GET_ALL_ROOM_TYPES';\nexport const POST_NEW_TYPE = 'POST_NEW_TYPE';\nexport const DELETE_TYPE = 'DELETE_TYPE';\nexport const GET_ONE_NEW_TYPE = 'GET_ONE_NEW_TYPE';\nexport const UPDATE_ONE_TYPE = 'UPDATE_ONE_TYPE';\nexport const CLEAR_ONE_NEW_TYPE = 'CLEAR_ONE_NEW_TYPE';\nexport const SHOW_FREE_ROOMS = 'SHOW_FREE_ROOMS';\nexport const CLEAR_FREE_ROOM = 'CLEAR_FREE_ROOM';\n\nexport const ADD_SUBJECT = 'ADD_SUBJECT';\nexport const DELETE_SUBJECT = 'DELETE_SUBJECT';\nexport const SHOW_ALL_SUBJECTS = 'SHOW_ALL_SUBJECT';\nexport const SELECT_SUBJECT = 'SELECT_SUBJECT';\nexport const UPDATE_SUBJECT = 'UPDATE_SUBJECT';\nexport const CLEAR_SUBJECT = 'CLEAR_SUBJECT';\n\nexport const ADD_DEPARTMENT='ADD_DEPARTMENT';\nexport const GET_ALL_DEPARTMENTS='GET_ALL_DEPARTMENTS';\nexport const CLEAR_DEPARTMENT_FORM='CLEAR_DEPARTMENT_FORM';\nexport const DELETE_DEPARTMENT='DELETE_DEPARTMENT';\nexport const GET_DISABLED_DEPARTMENTS='GET_DISABLED_DEPARTMENTS';\nexport const SET_DISABLED_DEPARTMENT='SET_DISABLED_DEPARTMENT';\nexport const SET_ENABLED_DEPARTMENT='SET_ENABLED_DEPARTMENT';\nexport const GET_DEPARTMENT_BY_ID='GET_DEPARTMENT_BY_ID';\nexport const UPDATE_DEPARTMENT='UPDATE_DEPARTMENT';\n\nexport const SET_SCHEDULE_GROUP_ID = 'SET_SCHEDULE_GROUP_ID';\n\nexport const ADD_SEMESTER = 'ADD_SEMESTER';\nexport const DELETE_SEMESTER = 'DELETE_SEMESTER';\nexport const SHOW_ALL_SEMESTERS = 'SHOW_ALL_SEMESTER';\nexport const SELECT_SEMESTER = 'SELECT_SEMESTER';\nexport const UPDATE_SEMESTER = 'UPDATE_SEMESTER';\nexport const CLEAR_SEMESTER = 'CLEAR_SEMESTER';\nexport const SET_ERROR = 'SET_ERROR';\nexport const SET_ARCHIVED_SEMESTERS = 'SET_ARCHIVED_SEMESTERS';\n\nexport const SET_DISABLED_ROOMS = 'SET_DISABLED_ROOMS';\nexport const SET_DISABLED_TEACHERS = 'SET_DISABLED_TEACHERS';\nexport const SET_DISABLED_GROUPS = 'SET_DISABLED_GROUPS';\nexport const SET_DISABLED_SEMESTERS = 'SET_DISABLED_SEMESTERS';\nexport const SET_DISABLED_SUBJECTS = 'SET_DISABLED_SUBJECTS';\n\nexport const SET_SCHEDULE_TEACHER_ID = 'SET_SCHEDULE_TEACHER_ID';\nexport const SET_TEACHER_SCHEDULE = 'SET_TEACHER_SCHEDULE';\nexport const SET_SEMESTER_LIST = 'SET_SEMESTER_LIST';\nexport const SET_SCHEDULE_SEMESTER_ID = 'SET_SCHEDULE_SEMESTER_ID';\nexport const SET_TEACHER_RANGE_SCHEDULE = 'SET_TEACHER_RANGE_SCHEDULE';\nexport const SET_TEACHER_VIEW_TYPE = 'SET_TEACHER_VIEW_TYPE';\nexport const MOVE_SEMESTER_TO_ARCHIVE = 'MOVE_SEMESTER_TO_ARCHIVE';\n","export const updateObject = (oldObject, updatedValues) => {\n  return {\n    ...oldObject,\n    ...updatedValues\n  };\n};\n","import * as actionTypes from '../actions/actionsType';\nimport { updateObject } from '../utility';\n\nconst initialState = {\n    lessons: [],\n    lessonTypes: [],\n    lesson: {},\n    groupId: null,\n    uniqueError: false\n};\n\nconst reducer = (state = initialState, action) => {\n    switch (action.type) {\n        case actionTypes.ADD_LESSON_CARD:\n            return updateObject(state, {\n                lessons: state.lessons.concat(action.result)\n            });\n        case actionTypes.SET_LESSONS_CARDS:\n            return updateObject(state, {\n                lessons: action.result\n            });\n        case actionTypes.SET_LESSON_TYPES:\n            return updateObject(state, {\n                lessonTypes: action.result\n            });\n        case actionTypes.DELETE_LESSON_CARD:\n            state.lessons = state.lessons.filter(\n                lesson => lesson.id !== action.result\n            );\n            return updateObject(state, {\n                lessons: state.lessons\n            });\n        case actionTypes.SELECT_LESSON_CARD:\n            let lesson = state.lessons.filter(\n                lesson => lesson.id === action.result\n            )[0];\n            if (!lesson) {\n                lesson = { id: null };\n            }\n            return updateObject(state, {\n                lesson: lesson\n            });\n        case actionTypes.UPDATE_LESSON_CARD:\n            const updatedLessons = [];\n            state.lessons.forEach(lesson => {\n                if (lesson.id === action.result.id) {\n                    lesson = { ...lesson, ...action.result };\n                }\n                updatedLessons.push(lesson);\n            });\n            return updateObject(state, {\n                lessons: updatedLessons,\n                lesson: {}\n            });\n        case actionTypes.SELECT_GROUP_ID:\n            return updateObject(state, {\n                lesson: {},\n                groupId: action.result\n            });\n        case actionTypes.SET_UNIQUE_ERROR:\n            return updateObject(state, {\n                uniqueError: action.result\n            });\n        default:\n            return state;\n    }\n};\n\nexport default reducer;\n","import * as actionTypes from '../actions/actionsType';\nimport { updateObject } from '../utility';\n\nconst initialState = {\n    temporarySchedules: [],\n    temporarySchedule: {},\n    vacation: {},\n    schedulesAndTemporarySchedules: [],\n    teacherId: null,\n    changedScheduleId: null\n};\n\nconst reducer = (state = initialState, action) => {\n    switch (action.type) {\n        case actionTypes.SET_TEMPORARY_SCHEDULES:\n            return updateObject(state, {\n                temporarySchedules: action.result\n            });\n        case actionTypes.SET_SCHEDULES_AND_TEMPORARY_SCHEDULES:\n            return updateObject(state, {\n                schedulesAndTemporarySchedules: action.result\n            });\n        case actionTypes.SELECT_TEMPORARY_SCHEDULE:\n            return updateObject(state, {\n                temporarySchedule: action.result\n            });\n        case actionTypes.SELECT_VACATION:\n            return updateObject(state, {\n                vacation: action.result\n            });\n        case actionTypes.SELECT_TEACHER_ID:\n            return updateObject(state, {\n                teacherId: action.result\n            });\n        default:\n            return state;\n    }\n};\n\nexport default reducer;\n","import * as actionTypes from '../actions/actionsType';\nimport { updateObject } from '../utility';\n\nconst initialState = {\n    isSnackbarOpen: false,\n    snackbarType: null,\n    message: null\n};\n\nconst reducer = (state = initialState, action) => {\n    switch (action.type) {\n        case actionTypes.SET_OPEN_SNACKBAR:\n            let type = action.result.type;\n            let message = action.result.message;\n            return updateObject(state, {\n                isSnackbarOpen: action.result.isOpen,\n                snackbarType: type,\n                message: message\n            });\n        default:\n            return state;\n    }\n};\n\nexport default reducer;\n","import axios from 'axios';\nimport { TOKEN_BEGIN } from '../constants/tokenBegin';\n\nlet REACT_APP_API_BASE_URL = \"/\";\nif(process.env.REACT_APP_API_BASE_URL !== undefined){\n    REACT_APP_API_BASE_URL = process.env.REACT_APP_API_BASE_URL.trim();\n}\nconst instance = axios.create({\n    baseURL: REACT_APP_API_BASE_URL\n});\n\nconst token = localStorage.getItem('token');\nif (token && token.includes(TOKEN_BEGIN)) {\n    instance.defaults.headers.common.Authorization = token;\n}\n\nexport default instance;\n","export const TOKEN_BEGIN= 'Bearer_';\n","import * as actionTypes from '../actions/actionsType';\nimport { updateObject } from '../utility';\nimport axios from '../../helper/axios';\n\nconst initialState = {\n    token: null,\n    role: null,\n    error: null,\n    activationError: null\n};\n\nconst reducer = (state = initialState, action) => {\n    const response = action.response;\n\n    switch (action.type) {\n        case actionTypes.AUTH_USER_SUCCESS:\n            return updateObject(state, {\n                token: response.token,\n                role: response.role,\n                error: null\n            });\n        case actionTypes.AUTH_USER_ERROR:\n            return updateObject(state, {\n                response,\n                error: { login: action.error }\n            });\n        case actionTypes.AUTH_USER_LOGOUT:\n            delete axios.defaults.headers.common.Authorization;\n\n            localStorage.removeItem('token');\n            localStorage.removeItem('expirationDate');\n            localStorage.removeItem('userRole');\n            return updateObject(state, {\n                response: null,\n                token: null,\n                error: null,\n                role: null\n            });\n        case actionTypes.REGISTER_USER_SUCCESS:\n            return updateObject(state, {\n                response\n            });\n        case actionTypes.REGISTER_USER_ERROR:\n            return updateObject(state, {\n                error: { registration: { reg: action.error } }\n            });\n        case actionTypes.RESET_USER_PASSWORD_SUCCESS:\n            return updateObject(state, {\n                resetPasswordResponse: response\n            });\n        case actionTypes.RESET_USER_PASSWORD_ERROR:\n            return updateObject(state, {\n                error: action.error\n            });\n        case actionTypes.ACTIVATE_USER_SUCCESS:\n            return updateObject(state, {\n                response\n            });\n        case actionTypes.ACTIVATE_USER_ERROR:\n            return updateObject(state, {\n                activationError: action.error\n            });\n        case actionTypes.SET_AUTH_ERROR:\n            return updateObject(state, {\n                error: action.result\n            });\n        default:\n            return state;\n    }\n};\n\nexport default reducer;\n","import * as actionTypes from '../actions/actionsType';\nimport { updateObject } from '../utility';\n\nconst initialState = {\n    loading: false,\n    scheduleLoading: false,\n    semesterLoading: false\n};\n\nconst reducer = (state = initialState, action) => {\n    switch (action.type) {\n        case actionTypes.SET_LOADING_INDICATOR:\n            return updateObject(state, {\n                loading: action.result\n            });\n        case actionTypes.SET_SCHEDULE_LOADING_INDICATOR:\n            return updateObject(state, {\n                scheduleLoading: action.result\n            });\n        case actionTypes.SET_SEMESTER_LOADING_INDICATOR:\n            return updateObject(state, {\n                semesterLoading: action.result\n            });\n        default:\n            return state;\n    }\n};\n\nexport default reducer;\n","import * as actionTypes from '../actions/actionsType';\nimport { updateObject } from '../utility';\n\nconst initialState = {\n    items: [],\n    availability: {},\n    itemsIds: [],\n    fullSchedule: [],\n    groupSchedule: {},\n    scheduleType: '',\n    scheduleGroupId: 0,\n    currentSemester: {},\n    defaultSemester:{},\n    viewTeacherScheduleResults: 'block-view'\n};\n\nconst reducer = (state = initialState, action) => {\n    switch (action.type) {\n        case actionTypes.SET_SCHEDULE_ITEMS:\n            return updateObject(state, {\n                items: action.result\n            });\n        case actionTypes.SET_CURRENT_SEMESTER:\n            return updateObject(state, {\n                currentSemester: action.result\n            });\n        case actionTypes.SET_DEFAULT_SEMESTER:\n            return updateObject(state, {\n                defaultSemester: action.result\n            });\n        case actionTypes.CHECK_AVAILABILITY_SCHEDULE:\n            return updateObject(state, {\n                availability: action.result\n            });\n        case actionTypes.ADD_ITEM_TO_SCHEDULE:\n            const id = action.result.id;\n            let itemArr;\n            if (id) {\n                const index = state.items.findIndex(item => {\n                    return item.id === id;\n                });\n                if (index < 0) {\n                    itemArr = state.items.concat(action.result);\n                } else {\n                    state.items.splice(index, 1, action.result);\n                    itemArr = state.items;\n                }\n            } else {\n                itemArr = state.items.concat(action.result);\n            }\n            return updateObject(state, {\n                items: itemArr\n            });\n        case actionTypes.SET_SCHEDULE_TYPE:\n            return updateObject(state, {\n                groupSchedule: {},\n                fullSchedule: [],\n                scheduleType: action.newType\n            });\n        case actionTypes.SET_FULL_SCHEDULE:\n            updateObject(state, {\n                fullSchedule: [],\n                groupSchedule: {}\n            });\n            return updateObject(state, {\n                fullSchedule: action.result\n            });\n        case actionTypes.SET_GROUP_SCHEDULE:\n            return updateObject(state, {\n                groupSchedule: action.result,\n                fullSchedule: [],\n\n            });\n        case actionTypes.SET_ITEM_GROUP_ID:\n            return updateObject(state, {\n                itemGroupId: action.result\n            });\n        case actionTypes.SET_SCHEDULE_GROUP_ID:\n            return updateObject(state, {\n                scheduleGroupId: action.groupId,\n                scheduleTeacherId: null,\n                fullSchedule: [],\n                groupSchedule: {}\n            });\n        case actionTypes.DELETE_ITEM_FROM_SCHEDULE:\n            const index = state.items.findIndex(\n                item => item.id === action.result\n            );\n            state.items.splice(index, 1);\n            const newArr = state.items;\n            return updateObject(state, {\n                items: newArr\n            });\n\n        case actionTypes.SET_SCHEDULE_TEACHER_ID:\n            return updateObject(state, {\n                scheduleGroupId: null,\n                scheduleTeacherId: action.teacherId,\n                fullSchedule: [],\n                groupSchedule: {}\n            });\n        case actionTypes.SET_TEACHER_SCHEDULE:\n            return updateObject(state, {\n                scheduleGroupId: null,\n                teacherSchedule: action.result,\n                scheduleTeacherId:`${action.result.teacher.id}`,\n                groupSchedule: {},\n                fullSchedule: []\n            });\n        case actionTypes.SET_SEMESTER_LIST:\n            return updateObject(state, {\n                scheduleGroupId: null,\n                scheduleTeacherId: null,\n                teacherSchedule: {},\n                groupSchedule: {},\n                fullSchedule: [],\n                semesters: action.result\n            });\n        case actionTypes.SET_SCHEDULE_SEMESTER_ID:\n            return updateObject(state, {\n                scheduleGroupId: null,\n                scheduleTeacherId: null,\n                scheduleSemesterId: action.semesterId,\n                fullSchedule: [],\n                groupSchedule: {}\n            });\n        case actionTypes.SET_TEACHER_RANGE_SCHEDULE:\n            return updateObject(state, {\n                teacherRangeSchedule: action.result,\n                scheduleGroupId: null,\n                teacherSchedule: [],\n                groupSchedule: {},\n                fullSchedule: []\n            });\n        case actionTypes.SET_TEACHER_VIEW_TYPE:\n            return updateObject(state, {\n                viewTeacherScheduleResults: action.result\n            });\n        default:\n            return state;\n    }\n};\n\nexport default reducer;\n","import * as actionTypes from \"../actions/actionsType\";\nconst classActions = (\n  state = {\n    classScheduler: [],\n    classScheduleOne: {}\n  },\n  action\n) => {\n  switch (action.type) {\n    case actionTypes.SET_CLASS_SCHEDULE_LIST:\n      return {\n        ...state,\n        classScheduler: [...action.classScheduler]\n      };\n    case actionTypes.ADD_CLASS_SCHEDULE_ONE:\n      return {\n        ...state,\n        classScheduleOne: {},\n        classScheduler: [...state.classScheduler, action.classSchedulOne]\n      };\n    case actionTypes.GET_CLASS_SCHEDULE_LIST:\n      return state;\n    case actionTypes.GET_CLASS_SCHEDULE_ONE:\n      const one = state.classScheduler.filter(\n        classScheduleItem => classScheduleItem.id === action.classSchedulOne\n      );\n      return {\n        ...state,\n        classScheduleOne: one[0]\n      };\n    case actionTypes.DELETE_CLASS_SCHEDULE_ONE:\n      return {\n        ...state,\n        classScheduler: state.classScheduler.filter(\n          classScheduleItem => classScheduleItem.id !== action.classSchedulOne\n        )\n      };\n    case actionTypes.UPDATE_CLASS_SCHEDULE_ONE:\n      let classSchedulerstate = [...state.classScheduler];\n      classSchedulerstate[\n        classSchedulerstate.findIndex(\n          classItem => classItem.id === action.classSchedulOne.id\n        )\n      ] = action.classSchedulOne;\n      return {\n        ...state,\n        classScheduleOne: {},\n        classScheduler: [...classSchedulerstate]\n      };\n    case actionTypes.CLEAR_CLASS_SCHEDULE_ONE:\n      return {\n        ...state,\n        classScheduleOne: {}\n      };\n    default:\n      return state;\n  }\n};\nexport default classActions;\n","import * as actionTypes from '../actions/actionsType';\nimport { updateObject } from '../utility';\n\nconst initialState = {\n    subjects: [],\n    subject: {},\n    disabledSubjects: []\n};\n\nconst subjects = (state = initialState, action) => {\n    switch (action.type) {\n        case actionTypes.ADD_SUBJECT:\n            return updateObject(state, {\n                subjects: state.subjects.concat(action.result),\n                subject: state.subject\n            });\n\n        case actionTypes.DELETE_SUBJECT:\n            state.subjects = state.subjects.filter(\n                subject => subject.id !== action.result\n            );\n            return updateObject(state, {\n                subjects: state.subjects,\n                subject: state.subject\n            });\n\n        case actionTypes.SHOW_ALL_SUBJECTS:\n            return updateObject(state, {\n                subjects: action.result,\n                subject: state.subject\n            });\n\n        case actionTypes.SET_DISABLED_SUBJECTS:\n            return updateObject(state, {\n                disabledSubjects: action.result\n            });\n\n        case actionTypes.SELECT_SUBJECT:\n            let subject = state.subjects.filter(\n                subject => subject.id === action.result\n            )[0];\n            if (!subject) {\n                subject = { id: null };\n            }\n            return updateObject(state, {\n                subjects: state.subjects,\n                subject: subject\n            });\n\n        case actionTypes.UPDATE_SUBJECT:\n            const updatedSubjects = [];\n            state.subjects.forEach(subject => {\n                if (subject.id === action.result.id) {\n                    subject = { ...subject, ...action.result };\n                }\n                updatedSubjects.push(subject);\n            });\n            return updateObject(state, {\n                subjects: updatedSubjects,\n                subject: {}\n            });\n\n        case actionTypes.CLEAR_SUBJECT:\n            return {\n                ...state,\n                subject: {}\n            };\n\n        default:\n            return state;\n    }\n};\n\nexport default subjects;\n","import * as actionTypes from '../actions/actionsType';\nimport { updateObject } from '../utility';\n\nconst initialState = {\n    groups: [],\n    group: {},\n    disabledGroups: []\n};\n\nconst groups = (state = initialState, action) => {\n    switch (action.type) {\n        case actionTypes.ADD_GROUP:\n            return updateObject(state, {\n                groups: state.groups.concat(action.result),\n                group: state.group\n            });\n\n        case actionTypes.DELETE_GROUP:\n            state.groups = state.groups.filter(\n                group => group.id !== action.result\n            );\n            return updateObject(state, {\n                groups: state.groups,\n                group: state.group\n            });\n\n        case actionTypes.SHOW_ALL_GROUPS:\n            return updateObject(state, {\n                ...state,\n                groups: action.result\n            });\n        case actionTypes.SET_DISABLED_GROUPS:\n            return updateObject(state, {\n                ...state,\n                disabledGroups: action.result\n            });\n\n        case actionTypes.SELECT_GROUP:\n            let group = state.groups.filter(\n                group => group.id === Number(action.result)\n            )[0];\n\n            if (!group) {\n                group = { id: null };\n            }\n            return updateObject(state, {\n                groups: state.groups,\n                group: group\n            });\n\n        case actionTypes.UPDATE_GROUP:\n            const updatedGroups = [];\n            state.groups.forEach(group => {\n                if (group.id === action.result.id) {\n                    group = { ...group, ...action.result };\n                }\n                updatedGroups.push(group);\n            });\n            return updateObject(state, {\n                groups: updatedGroups,\n                group: {}\n            });\n\n        case actionTypes.CLEAR_GROUP:\n            return {\n                ...state,\n                group: {}\n            };\n\n        default:\n            return state;\n    }\n};\n\nexport default groups;\n","import * as actionTypes from '../actions/actionsType';\nfunction compare(a, b) {\n    let comparison = 0;\n    if (a.name > b.name) {\n        comparison = 1;\n    } else if (a.name < b.name) {\n        comparison = -1;\n    }\n    return comparison;\n}\nconst rooms = (\n    state = {\n        rooms: [],\n        oneRoom: {},\n        disabledRooms: []\n    },\n    action\n) => {\n    switch (action.type) {\n        case actionTypes.ADD_ROOM:\n            return {\n                ...state,\n                oneRoom: {},\n                rooms: [...state.rooms, action.result].sort(compare)\n            };\n        case actionTypes.DELETE_ROOM:\n            return {\n                ...state,\n                oneRoom: {},\n                rooms: [\n                    ...state.rooms.filter(rooms => rooms.id !== action.result)\n                ]\n            };\n\n        case actionTypes.SHOW_LIST_OF_ROOMS:\n            return {\n                ...state,\n                rooms: [...action.result]\n            };\n        case actionTypes.SET_DISABLED_ROOMS:\n            return {\n                ...state,\n                disabledRooms: [...action.result]\n            };\n        case actionTypes.SELECT_ONE_ROOM:\n            const one = state.rooms.filter(\n                roomItem => roomItem.id === action.result\n            );\n            return {\n                ...state,\n                oneRoom: one[0]\n            };\n        case actionTypes.UPDATE_ONE_ROOM:\n            let roomState = [...state.rooms];\n            roomState[\n                roomState.findIndex(\n                    roomItem => roomItem.id === action.result.id\n                )\n            ] = action.result;\n            return {\n                ...state,\n                oneRoom: {},\n                rooms: [...roomState]\n            };\n        case actionTypes.CLEAR_ROOM_ONE:\n            return {\n                ...state,\n                oneRoom: {}\n            };\n\n        default:\n            return state;\n    }\n};\n\nexport default rooms;\n","export const actionType = {\n  CREATED: 'created',\n  DELETED: 'deleted',\n  UPDATED: 'updated'\n};\n","import * as actionTypes from '../actions/actionsType';\nimport actions from 'redux-form/lib/actions';\nimport { actionType } from '../../constants/actionTypes';\n\nconst roomTypes = (\n    state = {\n        roomTypes: [],\n        oneType: {}\n    },\n    action\n) => {\n    switch (action.type) {\n        case actionTypes.POST_NEW_TYPE:\n            return {\n                ...state,\n                roomTypes: [...state.roomTypes, action.result]\n            };\n\n        case actionTypes.GET_ALL_ROOM_TYPES:\n            return {\n                ...state,\n                roomTypes: [...action.result]\n            };\n        case actionTypes.DELETE_TYPE:\n            return {\n                ...state,\n                roomTypes: [\n                    ...state.roomTypes.filter(\n                        roomTypes => roomTypes.id !== action.result\n                    )\n                ]\n            };\n\n            case actionTypes.UPDATE_ONE_TYPE:\n                let updateTypeState = [...state.roomTypes];\n                updateTypeState[\n                    updateTypeState.findIndex(\n                        typeItem => typeItem.id === action.result.id\n                    )\n                ] = action.result;\n                return {\n                    ...state,\n                    oneType: {},\n                    roomTypes: [...updateTypeState]\n                };\n                case actionTypes.GET_ONE_NEW_TYPE:\n                    const one = state.roomTypes.filter(\n                        roomTypeItem => roomTypeItem.id === action.result\n                    );\n                    return {\n                        ...state,\n                        oneType: one[0]\n                    };\n        default:\n            return state;\n    }\n};\n\nexport default roomTypes;\n","import * as actionTypes from '../actions/actionsType';\n\nconst busyRooms = (\n    state = {\n        busyRooms: []\n    },\n    action\n) => {\n    switch (action.type) {\n        case actionTypes.SHOW_ALL_BUSY_ROOMS:\n            return {\n                ...state,\n                busyRooms: [action.result]\n            };\n\n        default:\n            return state;\n    }\n};\n\nexport default busyRooms;\n","import * as actionTypes from '../actions/actionsType';\nimport { updateObject } from '../utility';\n\nconst initialState = {\n    semesters: [],\n    semester: {},\n    disabledSemesters: [],\n    archivedSemesters: []\n};\n\nconst semesters = (state = initialState, action) => {\n    switch (action.type) {\n        case actionTypes.ADD_SEMESTER:\n            return updateObject(state, {\n                semesters: state.semesters.concat(action.result),\n                semester: state.semester\n            });\n\n        case actionTypes.DELETE_SEMESTER:\n            state.semesters = state.semesters.filter(\n                semester => semester.id !== action.result\n            );\n            return updateObject(state, {\n                semesters: state.semesters,\n                semester: state.semester\n            });\n\n        case actionTypes.SHOW_ALL_SEMESTERS:\n            return updateObject(state, {\n                semesters: action.result,\n                semester: state.semester\n            });\n        case actionTypes.SET_DISABLED_SEMESTERS:\n            return updateObject(state, {\n                disabledSemesters: action.result\n            });\n        case actionTypes.SET_ARCHIVED_SEMESTERS:\n            return updateObject(state, {\n                archivedSemesters: action.result\n            });\n\n        case actionTypes.SELECT_SEMESTER:\n            let semester = state.semesters.filter(\n                semester => semester.id === action.result\n            )[0];\n            if (!semester) {\n                semester = { id: null };\n            }\n            return updateObject(state, {\n                semesters: state.semesters,\n                semester: semester\n            });\n\n        case actionTypes.UPDATE_SEMESTER:\n            const updatedSemesters = [];\n            state.semesters.forEach(semester => {\n                if (semester.id === action.result.id) {\n                    semester = { ...semester, ...action.result };\n                }\n                updatedSemesters.push(semester);\n            });\n            return updateObject(state, {\n                semesters: updatedSemesters,\n                semester: {}\n            });\n\n        case actionTypes.MOVE_SEMESTER_TO_ARCHIVE:\n            const archivedSemester = state.semesters.find(\n                semester => semester.id === action.result\n            );\n            state.semesters = state.semesters.filter(\n                semester => semester.id !== action.result\n            );\n            return updateObject(state, {\n                semesters: state.semesters,\n                archivedSemesters: [\n                    ...state.archivedSemesters,\n                    archivedSemester\n                ]\n            });\n        case actionTypes.CLEAR_SEMESTER:\n            return {\n                ...state,\n                semester: {}\n            };\n        case actionTypes.SET_ERROR:\n            return updateObject(state, {\n                uniqueError: action.result\n            });\n\n        default:\n            return state;\n    }\n};\n\nexport default semesters;\n","import * as actionTypes from '../actions/actionsType';\nimport { updateObject } from '../utility';\n\nconst initialState = {\n    users: [],\n    user: {}\n};\n\nconst reducer = (state = initialState, action) => {\n    switch (action.type) {\n        case actionTypes.SET_USERS:\n            return updateObject(state, {\n                users: action.result\n            });\n        case actionTypes.SET_USER:\n            return updateObject(state, {\n                user: action.result\n            });\n        default:\n            return state;\n    }\n};\n\nexport default reducer;\n","import * as actionTypes from '../actions/actionsType';\nimport actions from 'redux-form/lib/actions';\n\nconst freeRooms = (\n    state = {\n        freeRooms : [],\n        freeRoom : {}\n    }, \n    action\n) => {\n    switch(action.type) {\n        case actionTypes.SHOW_FREE_ROOMS:\n            return {\n                ...state,\n                freeRooms: action.result\n            };\n        case actionTypes.CLEAR_FREE_ROOM:\n            return {\n                ...state,\n                freeRoom: {}\n            };\n        default:\n            return state;    \n    }\n};\n\nexport default freeRooms;","import * as actionTypes from '../actions/actionsType';\nimport { updateObject } from '../utility';\n\nconst initialState = {\n    departments: [],\n    department: {},\n    disabledDepartments: []\n};\n\nconst departments = (state = initialState, action) => {\n    switch (action.type) {\n        case actionTypes.ADD_DEPARTMENT:\n            return updateObject(state, {\n                departments: state.departments.concat(action.result),\n                department: state.department\n            });\n        case actionTypes.GET_ALL_DEPARTMENTS:\n            let departments = action.result.filter(\n                department => department.disable ===false\n            );\n            let disabledDepartments = action.result.filter(\n                department => department.disable ===true\n            );\n            return updateObject(state, {\n                departments: departments,\n                department: state.department,\n                disabledDepartments: disabledDepartments\n            });\n        case actionTypes.CLEAR_DEPARTMENT_FORM:\n            return {\n                ...state,\n                department: {}\n            };\n        case actionTypes.DELETE_DEPARTMENT:\n            state.departments = state.departments.filter(\n                department => department.id !== action.result.id\n            );\n            state.disabledDepartments = state.disabledDepartments.filter(\n                department => department.id !== action.result.id\n            );\n            return updateObject(state, {\n                departments: state.departments,\n                department: state.department,\n                disabledDepartments: state.disabledDepartments\n            });\n        case actionTypes.GET_DISABLED_DEPARTMENTS:\n            return updateObject(state, {\n                departments: state.departments,\n                department: state.department,\n                disabledDepartments: action.result\n            });\n        case actionTypes.SET_DISABLED_DEPARTMENT:\n            state.departments = state.departments.filter(\n                department => department.id !== action.result.id\n            );\n            state.disabledDepartments.push(action.result)\n            return updateObject(state, {\n                departments: state.departments,\n                department: state.department,\n                disabledDepartments: state.disabledDepartments\n            });\n        case actionTypes.SET_ENABLED_DEPARTMENT:\n            state.disabledDepartments = state.disabledDepartments.filter(\n                department => department.id !== action.result.id\n            );\n            state.departments.push(action.result)\n            return updateObject(state, {\n                departments: state.departments,\n                department: state.department,\n                disabledDepartments: state.disabledDepartments\n            });\n        case actionTypes.GET_DEPARTMENT_BY_ID:\n            let department = state.departments.filter(\n                department => department.id === action.result\n            )[0];\n            if (!department) {\n                department = { id: null };\n            }\n            return updateObject(state, {\n                departments: state.departments,\n                department: department\n            });\n        case actionTypes.UPDATE_DEPARTMENT:\n            let updatedDepartments = [];\n            state.departments.forEach(department => {\n                if (department.id === action.result.id) {\n                    department = { ...department, ...action.result };\n                }\n                updatedDepartments.push(department);\n            });\n            let updatedDefaultDepartments = [];\n            state.disabledDepartments.forEach(department => {\n                if (department.id === action.result.id) {\n                    department = { ...department, ...action.result };\n                }\n                updatedDefaultDepartments.push(department);\n            });\n\n            return updateObject(state, {\n                departments:updatedDepartments,\n                disabledDepartments:updatedDefaultDepartments,\n                department: {}\n            });\n\n        default:\n            return state;\n    }\n};\n\nexport default departments;\n","import * as actionTypes from '../actions/actionsType';\nimport { updateObject } from '../utility';\n\nconst initialState = {\n    students: [],\n    student: {}\n};\n\nconst students = (state = initialState, action) => {\n    switch (action.type) {\n        case actionTypes.ADD_STUDENT:\n            return updateObject(state, {\n                students: state.students.concat(action.result),\n                student: state.student\n            });\n        case actionTypes.SHOW_ALL_STUDENTS_BY_GROUP_ID:\n            return updateObject(state, {\n                ...state,\n                students: action.result\n            });\n        case actionTypes.SHOW_ALL_STUDENTS:\n            return updateObject(state, {\n                ...state,\n                students: action.result\n            });\n        case actionTypes.DELETE_STUDENT:\n            state.students = state.students.filter(\n                student => student.id !== action.result\n            );\n            return updateObject(state, {\n                students: state.students,\n                student: state.student\n            });\n        case actionTypes.SET_STUDENT:\n            let student = state.students.filter(\n                student => student.id === Number(action.result)\n            )[0];\n\n            if (!student) {\n                student = { id: null };\n            }\n            return updateObject(state, {\n                students: state.students,\n                student: student\n            });\n        case actionTypes.UPDATE_STUDENT:\n            const updatedStudents = [];\n            state.students.forEach(student => {\n                if (student.id === action.result.id) {\n                    student = { ...student, ...action.result };\n                }\n                updatedStudents.push(student);\n            });\n            return updateObject(state, {\n                students: updatedStudents,\n                student: {}\n            });\n        default:\n            return state;\n    }\n};\n\nexport default students;","import { combineReducers } from 'redux';\nimport { reducer as formReducer } from 'redux-form';\n\nimport teachers from './teachers';\nimport lesson from './lesson';\nimport temporarySchedule from './temporarySchedule';\nimport snackbar from './snackbar';\nimport auth from './auth';\nimport loadingIndicator from './loadingIndicator';\nimport schedule from './schedule';\nimport classActions from './class';\nimport subjects from './subjects';\nimport groups from './groups';\nimport rooms from './rooms';\nimport roomTypes from './roomTypes';\nimport busyRooms from './busyRooms';\nimport semesters from './semesters';\nimport users from './users';\nimport freeRooms from './freeRooms';\nimport departments from './departments';\nimport students from './students';\n\nconst rootReducer = combineReducers({\n    lesson,\n    temporarySchedule,\n    auth,\n    snackbar,\n    schedule,\n    users,\n    loadingIndicator,\n    classActions,\n    teachers,\n    subjects,\n    groups,\n    rooms,\n    roomTypes,\n    busyRooms,\n    semesters,\n    freeRooms,\n    departments,\n    students,\n\n    form: formReducer\n});\n\nexport default rootReducer;\n","import axios from '../helper/axios';\n\nimport {\n    ACTIVATE_ACCOUNT_URL,\n    LOGIN_URL,\n    LOGOUT_URL,\n    REGISTRATION_URL,\n    RESET_PASSWORD_URL\n} from '../constants/axios';\n\nexport const authUserService = request => {\n    if (\n        request.result.hasOwnProperty('authType') &&\n        request.result.authType === 'google'\n    ) {\n        const response = { data: { token: request.result.token, email: '' } };\n        return response;\n    }\n    return axios.post(LOGIN_URL, request.result).then(response => {\n        return response;\n    });\n};\n\nexport const registerUserService = request => {\n    return axios.post(REGISTRATION_URL, request.result).then(response => {\n        return response;\n    });\n};\n\nexport const resetUserPasswordService = request => {\n    return axios\n        .put(\n            `${RESET_PASSWORD_URL}?email=${request.result.email}`,\n            request.result\n        )\n        .then(response => {\n            return response;\n        });\n};\n\nexport const activateUserService = request => {\n    return axios\n        .put(`${ACTIVATE_ACCOUNT_URL}?token=${request.result}`)\n        .then(response => response);\n};\n\nexport const logoutUserService = () => {\n    return axios.post(LOGOUT_URL).then(response => response);\n};\n","export const CLASS_URL = 'classes';\nexport const GROUP_URL = 'groups';\nexport const LESSON_URL = 'lessons';\nexport const LESSON_TYPES_URL = 'lessons/types';\nexport const LOGIN_URL = 'auth/sign-in';\nexport const GOOGLE_LOGIN_URL = 'auth/google';\nexport const LOGOUT_URL = 'auth/sign-out';\nexport const REGISTRATION_URL = 'auth/sign-up';\nexport const RESET_PASSWORD_URL = 'auth/reset-password';\nexport const ACTIVATE_ACCOUNT_URL = 'auth/activation-account';\nexport const TEACHER_URL = 'teachers';\nexport const ROOM_URL = 'rooms';\nexport const ROOM_TYPES_URL = 'room-types';\nexport const FREE_ROOMS_URL = 'rooms/free';\nexport const SUBJECT_URL = 'subjects';\nexport const STUDENT_URL = 'students';\n\nexport const FULL_SCHEDULE_URL = 'schedules/full/semester?semesterId=';\nexport const GROUP_SCHEDULE_URL = 'schedules/full/groups?semesterId=';\nexport const SCHEDULE_SEMESTER_ITEMS_URL = 'schedules/semester';\nexport const SCHEDULE_ITEMS_URL = 'schedules';\nexport const CURRENT_SEMESTER_URL = 'semesters/current';\nexport const DEFAULT_SEMESTER_URL = 'semesters/default';\nexport const SEND_PDF_TO_EMAIL = 'send-pdf-to-email';\n\nexport const TEMPORARY_SCHEDULE_URL = 'temporary-schedules';\nexport const TEMPORARY_SCHEDULE_RANGE_URL = 'temporary-schedules/add-range';\nexport const TEACHER_TEMPORARY_SCHEDULE = 'schedules/full/teachers/date-range';\n\nexport const STUDENTS_TO_GROUP_FILE = 'students/import?groupId=';\n\nexport const SCHEDULE_CHECK_AVAILABILITY_URL = 'schedules/data-before';\nexport const BUSY_ROOMS = 'schedules/full/rooms';\nexport const ROOMS_AVAILABILITY = 'rooms/available';\nexport const SEMESTERS_URL = 'semesters';\nexport const GROUPS_URL = 'groups';\nexport const TEACHER_SCHEDULE_URL = 'schedules/full/teachers?semesterId=';\n\nexport const DISABLED_ROOMS_URL = 'rooms/disabled';\nexport const DISABLED_TEACHERS_URL = 'teachers/disabled';\nexport const DISABLED_GROUPS_URL = 'groups/disabled';\nexport const DISABLED_SEMESTERS_URL = 'semesters/disabled';\nexport const DISABLED_SUBJECTS_URL = 'subjects/disabled';\n\nexport const USERS_URL = 'users/with-role-user';\nexport const USER_PROFILE = 'users/profile';\nexport const UPDATE_USER_PROFILE = 'users/change-profile';\nexport const TEACHERS_WITHOUT_ACCOUNT_URL = 'not-registered-teachers';\nexport const MERGE_USER_AND_TEACHER_URL = 'managers/teacher_credentials';\n\nexport const PUBLIC_CLASSES_URL = 'public/classes';\nexport const PUBLIC_GROUP_URL = 'public/groups';\nexport const PUBLIC_TEACHER_URL = 'public/teachers';\nexport const PUBLIC_SEMESTERS_URL = 'public/semesters';\n\nexport const PUBLIC_DOWNLOAD_GROUP_SCHEDULE_URL =\n    '/download/schedule-for-group-in-pdf';\nexport const PUBLIC_DOWNLOAD_TEACHER_SCHEDULE_URL =\n    '/download/schedule-for-teacher-in-pdf';\n\nexport const FOR_TEACHER_SCHEDULE_URL = 'schedules/teacher';\nexport const SEMESTER_COPY_URL = '/schedules/copy-schedule';\nexport const CLEAR_SCHEDULE_URL = '/schedules/delete-schedules';\nexport const TEACHER_SCHEDULE_BY_DATE_RANGE_URL = 'schedules/full/teachers/date-range';\n\nexport const COPY_LESSON_URL = '/lessons/copy-lesson-for-groups';\nexport const LESSONS_FROM_SEMESTER_COPY_URL = '/lessons/copy-lessons';\nexport const SCHEDULE_ITEM_ROOM_CHANGE = '/schedules/by-room';\nexport const CREATE_ARCHIVE_SEMESTER = '/archive';\nexport const ARCHIVED_SEMESTERS_URL = '/archive/all-semesters';\n\nexport const DEPARTMENT_URL = '/departments';\n","import i18n from 'i18next';\nimport Backend from 'i18next-xhr-backend';\nimport { initReactI18next } from 'react-i18next';\nimport LanguageDetector from 'i18next-browser-languagedetector';\n\nvar supportedLangs = ['en', 'uk'];\nvar userLang = (navigator.language || navigator.userLanguage).slice(0, 2);\nexport const lang = supportedLangs.find(i => i === userLang) || 'en';\n\ni18n.use(LanguageDetector)\n    .use(initReactI18next)\n    .use(Backend)\n    .init({\n        lng: lang,\n        backend: {\n            loadPath: '/assets/i18n/translations/{{lng}}/{{ns}}.json'\n        },\n        fallbackLng: 'en',\n        debug: false,\n        ns: ['formElements', 'validationMessages', 'common', 'serviceMessages'],\n        defaultNS: 'common',\n        keySeparator: false,\n        useDataAttrOptions: true,\n        interpolation: {\n            escapeValue: false,\n            formatSeparator: ','\n        },\n        react: {\n            wait: true\n        }\n    });\n\nexport default i18n;\n","import { call, put } from 'redux-saga/effects';\nimport * as actionTypes from '../redux/actions/actionsType';\n\nimport { authUserService } from '../services/authService';\n\nimport { TOKEN_BEGIN } from '../constants/tokenBegin';\n\nimport axios from '../helper/axios';\nimport i18n from '../helper/i18n';\n\nexport function* authSaga(payload) {\n    try {\n        const response = yield call(authUserService, payload);\n\n        const jwtDecode = require('jwt-decode');\n        const token = response.data.token;\n        const email = response.data.email;\n        const decodedJWT = jwtDecode(token);\n        const expirationDate = new Date(decodedJWT.exp * 1000);\n\n        axios.defaults.headers.common.Authorization = TOKEN_BEGIN + token;\n\n        yield localStorage.setItem('token', TOKEN_BEGIN + token);\n        yield localStorage.setItem('expirationDate', expirationDate);\n        yield localStorage.setItem('userRole', decodedJWT.roles);\n        yield localStorage.setItem('email', email ? email : decodedJWT.sub);\n\n        yield put({\n            type: actionTypes.AUTH_USER_SUCCESS,\n            response: { token, role: decodedJWT.roles, email }\n        });\n\n        yield put({ type: actionTypes.SET_LOADING_INDICATOR, result: false });\n\n        yield put({\n            type: actionTypes.AUTH_USER_AUTO_LOGOUT,\n            expirationTime: decodedJWT.exp * 1000 - new Date().getTime()\n        });\n    } catch (error) {\n        yield put({\n            type: actionTypes.AUTH_USER_ERROR,\n            error: error.response\n                ? error.response.data.message\n                : i18n.t('common:error_message')\n        });\n        yield put({ type: actionTypes.SET_LOADING_INDICATOR, result: false });\n    }\n}\n","import { call, put } from 'redux-saga/effects';\nimport * as actionTypes from '../redux/actions/actionsType';\n\nimport { logoutUserService } from '../services/authService';\n\nimport i18n from '../helper/i18n';\n\nexport function* logoutSaga(payload) {\n    try {\n        yield call(logoutUserService, payload);\n        yield put({\n            type: actionTypes.AUTH_USER_LOGOUT\n        });\n    } catch (error) {\n        yield put({\n            type: actionTypes.AUTH_USER_ERROR,\n            error: error.response\n                ? error.response.data.message\n                : i18n.t('common:error_message')\n        });\n    }\n}\n","import { call, delay } from 'redux-saga/effects';\n\nimport { logoutSaga } from './logoutSaga';\n\nexport function* checkAuthTimeoutSaga(action) {\n    yield delay(action.expirationTime);\n    yield call(logoutSaga);\n}\n","import { put } from 'redux-saga/effects';\n\nimport * as actionTypes from '../redux/actions/actionsType';\n\nexport function* checkAuthStateSaga(payload) {\n    if (!payload.token) {\n        yield put({ type: actionTypes.AUTH_USER_LOGOUT });\n    } else {\n        const expirationDate = new Date(localStorage.getItem('expirationDate'));\n        if (expirationDate <= new Date()) {\n            yield put({ type: actionTypes.AUTH_USER_LOGOUT });\n        } else {\n            yield put({\n                type: actionTypes.AUTH_USER_SUCCESS,\n                response: {\n                    token: payload.token,\n                    role: payload.role\n                }\n            });\n        }\n    }\n}\n","import { call, put } from 'redux-saga/effects';\nimport * as actionTypes from '../redux/actions/actionsType';\n\nimport { registerUserService } from '../services/authService';\n\nimport i18n from '../helper/i18n';\n\nexport function* registrationSaga(payload) {\n    try {\n        const response = yield call(registerUserService, payload);\n        yield put({ type: actionTypes.REGISTER_USER_SUCCESS, response });\n        yield put({ type: actionTypes.SET_LOADING_INDICATOR, result: false });\n    } catch (error) {\n        yield put({\n            type: actionTypes.REGISTER_USER_ERROR,\n            error: error.response\n                ? error.response.data.message\n                : i18n.t('common:error_message')\n        });\n        yield put({ type: actionTypes.SET_LOADING_INDICATOR, result: false });\n    }\n}\n","import { call, put } from 'redux-saga/effects';\nimport * as actionTypes from '../redux/actions/actionsType';\n\nimport { activateUserService } from '../services/authService';\n\nimport i18n from '../helper/i18n';\n\nexport function* activateUserSaga(payload) {\n    try {\n        const response = yield call(activateUserService, payload);\n        yield put({ type: actionTypes.ACTIVATE_USER_SUCCESS, response });\n        yield put({ type: actionTypes.SET_LOADING_INDICATOR, result: false });\n    } catch (error) {\n        yield put({\n            type: actionTypes.ACTIVATE_USER_ERROR,\n            error: error.response\n                ? error.response.data.message\n                : i18n.t('common:error_message')\n        });\n        yield put({ type: actionTypes.SET_LOADING_INDICATOR, result: false });\n    }\n}\n","import { call, put } from 'redux-saga/effects';\nimport * as actionTypes from '../redux/actions/actionsType';\n\nimport { resetUserPasswordService } from '../services/authService';\n\nimport i18n from '../helper/i18n';\n\nexport function* resetUserPasswordSaga(payload) {\n    try {\n        const response = yield call(resetUserPasswordService, payload);\n        yield put({ type: actionTypes.RESET_USER_PASSWORD_SUCCESS, response });\n        yield put({ type: actionTypes.SET_LOADING_INDICATOR, result: false });\n    } catch (error) {\n        yield put({\n            type: actionTypes.RESET_USER_PASSWORD_ERROR,\n            error: error.response\n                ? error.response.data.message\n                : i18n.t('common:error_message')\n        });\n        yield put({ type: actionTypes.SET_LOADING_INDICATOR, result: false });\n    }\n}\n","import { takeLatest, takeEvery } from 'redux-saga/effects';\n\nimport * as actionTypes from '../redux/actions/actionsType';\n\nimport { authSaga } from './authSaga';\nimport { logoutSaga } from './logoutSaga';\nimport { checkAuthTimeoutSaga } from './checkAuthTimeoutSaga';\nimport { checkAuthStateSaga } from './checkAuthStateSaga';\nimport { registrationSaga } from './registrationSaga';\nimport { activateUserSaga } from './activateUserSaga';\nimport { resetUserPasswordSaga } from './resetUserPasswordSaga';\n\nexport default function* watchUserAuthentication() {\n    yield takeLatest(actionTypes.REGISTER_USER, registrationSaga);\n    yield takeLatest(actionTypes.ACTIVATE_USER, activateUserSaga);\n    yield takeLatest(actionTypes.RESET_USER_PASSWORD, resetUserPasswordSaga);\n    yield takeLatest(actionTypes.AUTH_USER, authSaga);\n    yield takeEvery(actionTypes.AUTH_USER_CHECK_STATE, checkAuthStateSaga);\n    yield takeEvery(actionTypes.AUTH_USER_AUTO_LOGOUT, checkAuthTimeoutSaga);\n    yield takeLatest(actionTypes.AUTH_USER_INITIATE_LOGOUT, logoutSaga);\n}\n","import { fork } from 'redux-saga/effects';\nimport watchUserAuthentication from './watchers';\n\nexport default function* startForman() {\n  yield fork(watchUserAuthentication);\n}","import * as moment from 'moment';\nimport {\n    checkUniqClassName,\n    checkUniqueGroup,\n    checkUniqueRoomName,\n    checkUniqueSubject,\n    timeIntersectService,\n    checkUniqSemester, checkUniqueDepartment\n} from './storeValidation';\nimport i18n from '../helper/i18n';\nimport { validation } from '../constants/validation';\n\nexport const required = value =>\n    value ? undefined : i18n.t('validationMessages:required_message');\n\nexport const lessThanZero = value =>\n    value > 0\n        ? undefined\n        : i18n.t('validationMessages:bigger_than_zero_message');\n\nconst minLength = min => value =>\n    value && value.length < min\n        ? i18n.t('validationMessages:bigger_than_char_message', { min: min })\n        : undefined;\n\nexport const minLengthValue = minLength(3);\n\nconst maxLength = max => value =>\n    value && value.length > max\n        ? i18n.t('validationMessages:less_than_char_message', {\n              max: max\n          })\n        : undefined;\n\nexport const maxLengthValue = maxLength(200);\n\nexport const lessThanTime = (value, previousValue, allValues) => {\n    const otherField = 'endTime';\n    if (allValues.values[otherField] === undefined) return undefined;\n    return moment(value, 'HH:mm').toDate() <=\n        moment(allValues.values[otherField], 'HH:mm').toDate() &&\n        allValues.values[otherField] !== undefined\n        ? undefined\n        : i18n.t('validationMessages:less_than_field_message', {\n              field: i18n.t('formElements:class_to_label')\n          });\n};\n\nexport const greaterThanTime = (value, previousValue, allValues) => {\n    const otherField = 'startTime';\n    if (allValues.values[otherField] === undefined) return undefined;\n    return moment(value, 'HH:mm').toDate() >=\n        moment(allValues.values[otherField], 'HH:mm').toDate()\n        ? undefined\n        : i18n.t('validationMessages:bigger_than_field_message', {\n              field: i18n.t('formElements:class_from_label')\n          });\n};\n\nexport const uniqueClassName = value => {\n    return checkUniqClassName(value);\n};\n\nexport const uniqueGroup = value => {\n    return checkUniqueGroup(value);\n};\n\nexport const uniqueSubject = value => {\n    return checkUniqueSubject(value);\n};\nexport const uniqueDepartment = value => {\n    return checkUniqueDepartment(value);\n};\nexport const timeIntersect = (value, previousValue, allValues) => {\n    return timeIntersectService(\n        allValues.values['startTime'],\n        allValues.values['endTime']\n    );\n};\n\nexport const uniqueRoomName = value => {\n    return checkUniqueRoomName(value);\n};\n\n\n\nexport const email = value =>\n    value && !validation.EMAIL.test(value)\n        ? i18n.t('validationMessages:email')\n        : undefined;\n\nexport const password = value =>\n    value && !validation.PASSWORD.test(value)\n        ? i18n.t('validationMessages:password')\n        : undefined;\n\nconst minYear = min => value =>\n    value < min\n        ? i18n.t('validationMessages:bigger_than_this_year_message', {\n              min: min\n          })\n        : undefined;\nvar today = new Date();\nvar year = today.getFullYear();\nexport const minYearValue = minYear(year);\n\nexport const lessThanDate = (value, previousValue, allValues) => {\n    const otherField = 'endDay';\n    if (allValues.values[otherField] === undefined) return undefined;\n    return moment(value, 'DD/MM/YYYY').toDate() <=\n        moment(allValues.values[otherField], 'DD/MM/YYYY').toDate() &&\n        allValues.values[otherField] !== undefined\n        ? undefined\n        : i18n.t('validationMessages:less_than_field_message', {\n              field: i18n.t('formElements:class_to_label')\n          });\n};\n\nexport const greaterThanDate = (value, previousValue, allValues) => {\n    const otherField = 'startDay';\n    if (allValues.values[otherField] === undefined) return undefined;\n    return moment(value, 'DD/MM/YYYY').toDate() >=\n        moment(allValues.values[otherField], 'DD/MM/YYYY').toDate()\n        ? undefined\n        : i18n.t('validationMessages:bigger_than_field_message', {\n              field: i18n.t('formElements:class_from_label')\n          });\n};\n\nexport const uniquesSemesterName = value => checkUniqSemester(value);\n","export const links = {\n    HOME_PAGE: '/',\n    ADMIN_PAGE: '/admin',\n    SCHEDULE_PAGE: '/schedules',\n    LOGIN: '/login',\n    ACTIVATION_PAGE: '/activation-page',\n    LOGOUT: '/logout',\n    TEACHER_SCHEDULE: '/teacher-schedule',\n    MY_PROFILE: '/my-profile',\n    LessonPage: \"/lessons\",\n    TeacherList: \"/teachers\",\n    GroupList: \"/groups\",\n    Group:\"/group\",\n    Student:\"/student\",\n    Edit:\"/edit\",\n    Delete:\"/delete\",\n    AddStudent:\"/add-student\",\n    SetDisable:\"/set-disable\",\n    ShowStudents:\"/show-students\",\n    IdParam:\"/:id\",\n    IdStudentParam:\"/:idStudent\",\n    ClassScheduleTitle: \"/period\",\n    RoomList: \"/rooms\",\n    SubjectPage: \"/subjects\",\n    BusyRooms: \"/busy-rooms\",\n    SemesterPage: \"/semesters\",\n    MergeRolePage: \"/users\",\n    Changes: \"/changes\",\n    ScheduleFor:\"/schedule\",\n    Registration:\"/registration\",\n    RESET_PASSWORD:\"/reset-password\",\n    Departments:\"/departments\"\n\n};\n","import React from 'react';\nimport Radio from '@material-ui/core/Radio';\nimport RadioGroup from '@material-ui/core/RadioGroup';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport { useTranslation } from 'react-i18next';\nimport './LanguageSelector.scss';\n\nconst LanguageSelector = props => {\n    const { i18n } = useTranslation();\n    const langFlags = [\n        {\n            lang: 'en',\n            img: 'https://image.flaticon.com/icons/svg/555/555417.svg',\n            title: 'English'\n        },\n        {\n            lang: 'uk',\n            img: 'https://image.flaticon.com/icons/svg/321/321267.svg',\n            title: 'Українська'\n        }\n    ];\n    let radioLangClasses = {};\n    i18n.languages.forEach(lang => {\n        radioLangClasses[lang] = 'languageItem ';\n    });\n    radioLangClasses[i18n.language] += ' activeLanguage';\n\n    const changeLanguage = event => {\n        radioLangClasses[i18n.language] = 'languageItem ';\n        radioLangClasses[event.target.value] += ' activeLanguage';\n        i18n.changeLanguage(event.target.value);\n    };\n    const renderLangControls = langItem => (\n        <FormControlLabel\n            key={langItem.lang}\n            control={\n                <>\n                    <Radio\n                        color=\"primary\"\n                        value={langItem.lang}\n                        onChange={changeLanguage}\n                    />\n                    <img\n                        className=\"language-icon\"\n                        src={langItem.img}\n                        alt={langItem.lang}\n                        title={langItem.title}\n                    />\n                </>\n            }\n            className={radioLangClasses[langItem.lang]}\n        />\n    );\n\n    return (\n        <RadioGroup\n            row\n            aria-label=\"lang\"\n            name=\"lang\"\n            value={i18n.language}\n            className=\"lang_selector\"\n        >\n            {langFlags.map(langItem => renderLangControls(langItem))}\n        </RadioGroup>\n    );\n};\n\nexport default LanguageSelector;\n","export const colors = {\n    POSSIBILITY: '#f7f7c1',\n    DANGER: '#ff5e54',\n    ALLOW: '#68f271',\n    NOTHING: '#fff',\n    BORDER: '#d3d4d5'\n};\n","import * as actionTypes from './actionsType';\n\nexport const setTemporarySchedules = res => {\n    return {\n        type: actionTypes.SET_TEMPORARY_SCHEDULES,\n        result: res\n    };\n};\n\nexport const setSchedulesAndTemporarySchedules = res => {\n    return {\n        type: actionTypes.SET_SCHEDULES_AND_TEMPORARY_SCHEDULES,\n        result: res\n    };\n};\n\nexport const selectTemporarySchedule = res => {\n    return {\n        type: actionTypes.SELECT_TEMPORARY_SCHEDULE,\n        result: res\n    };\n};\n\nexport const selectVacation = res => {\n    return {\n        type: actionTypes.SELECT_VACATION,\n        result: res\n    };\n};\n\nexport const selectTeacherId = res => {\n    return {\n        type: actionTypes.SELECT_TEACHER_ID,\n        result: res\n    };\n};\n\n","import * as actionTypes from \"./actionsType\";\n\nexport const setOpenSnackbar = res => {\n  return {\n    type: actionTypes.SET_OPEN_SNACKBAR,\n    result: res\n  };\n};\n","import * as actionTypes from './actionsType';\n\nexport const setUsers = res => {\n    return {\n        type: actionTypes.SET_USERS,\n        result: res\n    };\n};\nexport const setUser = res => {\n    return {\n        type: actionTypes.SET_USER,\n        result: res\n    };\n};\n","import * as actionTypes from './actionsType';\n\nexport const setLoading = res => {\n    return {\n        type: actionTypes.SET_LOADING_INDICATOR,\n        result: res\n    };\n};\n\nexport const setScheduleLoading = res => {\n    return {\n        type: actionTypes.SET_SCHEDULE_LOADING_INDICATOR,\n        result: res\n    };\n};\n\nexport const setSemesterLoading = res => {\n    return {\n        type: actionTypes.SET_SEMESTER_LOADING_INDICATOR,\n        result: res\n    };\n};\n","import * as actionTypes from './actionsType';\n\nexport const setScheduleItems = res => {\n    return {\n        type: actionTypes.SET_SCHEDULE_ITEMS,\n        result: res\n    };\n};\n\nexport const setCurrentSemester = res => {\n    return {\n        type: actionTypes.SET_CURRENT_SEMESTER,\n        result: res\n    };\n};\nexport const setDefaultSemester = res => {\n    return {\n        type: actionTypes.SET_DEFAULT_SEMESTER,\n        result: res\n    };\n};\n\nexport const addItemToSchedule = res => {\n    return {\n        type: actionTypes.ADD_ITEM_TO_SCHEDULE,\n        result: res\n    };\n};\n\nexport const checkAvailabilitySchedule = res => {\n    return {\n        type: actionTypes.CHECK_AVAILABILITY_SCHEDULE,\n        result: res\n    };\n};\n\nexport const setFullSchedule = result => {\n    return {\n        type: actionTypes.SET_FULL_SCHEDULE,\n        result: result\n    };\n};\nexport const setItemGroupId = res => {\n    return {\n        type: actionTypes.SET_ITEM_GROUP_ID,\n        result: res\n    };\n};\n\nexport const setGroupSchedule = result => {\n    return {\n        type: actionTypes.SET_GROUP_SCHEDULE,\n        result: result\n    };\n};\nexport const deleteItemFromSchedule = res => {\n    return {\n        type: actionTypes.DELETE_ITEM_FROM_SCHEDULE,\n        result: res\n    };\n};\n\nexport const setScheduleType = result => {\n    return {\n        type: actionTypes.SET_SCHEDULE_TYPE,\n        newType: result\n    };\n};\n\nexport const setScheduleGroupId = groupId => {\n    return {\n        type: actionTypes.SET_SCHEDULE_GROUP_ID,\n        groupId: groupId\n    };\n};\n\nexport const setScheduleTeacherId = teacherId => {\n    return {\n        type: actionTypes.SET_SCHEDULE_TEACHER_ID,\n        teacherId: teacherId\n    };\n};\nexport const setTeacherSchedule = result => {\n    return {\n        type: actionTypes.SET_TEACHER_SCHEDULE,\n        result: result\n    };\n};\n\nexport const setSemesterList = result => {\n    return {\n        type: actionTypes.SET_SEMESTER_LIST,\n        result: result\n    };\n};\nexport const setScheduleSemesterId = semesterId => {\n    return {\n        type: actionTypes.SET_SCHEDULE_SEMESTER_ID,\n        semesterId: semesterId\n    };\n};\n\nexport const setTeacherRangeSchedule = result => {\n    return {\n        type: actionTypes.SET_TEACHER_RANGE_SCHEDULE,\n        result: result\n    };\n};\n\nexport const setTeacherViewType = type => {\n    return {\n        type: actionTypes.SET_TEACHER_VIEW_TYPE,\n        result: type\n    };\n};\n","import * as actionsType from './actionsType';\n\nexport const addTeacher = teacher => {\n    return {\n        type: actionsType.ADD_TEACHER,\n        result: teacher\n    };\n};\n\nexport const setTeacher = teacher => {\n    return {\n        type: actionsType.SET_TEACHER,\n        result: teacher\n    };\n};\n\nexport const deleteTeacher = id => {\n    return {\n        type: actionsType.DELETE_TEACHER,\n        result: id\n    };\n};\n\nexport const selectTeacherCard = res => {\n    return {\n        type: actionsType.SELECT_TEACHER,\n        result: res\n    };\n};\n\nexport const updateTeacherCard = res => {\n    return {\n        type: actionsType.UPDATE_TEACHER,\n        result: res\n    };\n};\n\nexport const showAllTeachers = teachers => {\n    return {\n        type: actionsType.SHOW_ALL,\n        result: teachers\n    };\n};\nexport const getAllTeachersByDepartmentId=teachers=>{\n    return{\n        type:actionsType.GET_TEACHERS_BY_DEPARTMENT,\n        result:teachers\n    }\n}\n\nexport const setDisabledTeachers = teachers => {\n    return {\n        type: actionsType.SET_DISABLED_TEACHERS,\n        result: teachers\n    };\n};\n","import * as actionTypes from \"./actionsType\";\n\nexport const setClassScheduleList = classScheduler => ({\n  type: actionTypes.SET_CLASS_SCHEDULE_LIST,\n  classScheduler\n});\n\nexport const addClassScheduleOne = classSchedulOne => ({\n  type: actionTypes.ADD_CLASS_SCHEDULE_ONE,\n  classSchedulOne\n});\n\nexport const getClassScheduleList = () => ({\n  type: actionTypes.GET_CLASS_SCHEDULE_LIST\n});\n\nexport const getClassScheduleOne = classSchedulOne => ({\n  type: actionTypes.GET_CLASS_SCHEDULE_ONE,\n  classSchedulOne\n});\n\nexport const deleteClassScheduleOne = classSchedulOne => ({\n  type: actionTypes.DELETE_CLASS_SCHEDULE_ONE,\n  classSchedulOne\n});\n\nexport const updateClassScheduleOne = classSchedulOne => ({\n  type: actionTypes.UPDATE_CLASS_SCHEDULE_ONE,\n  classSchedulOne\n});\n\nexport const clearClassScheduleOne = () => ({\n  type: actionTypes.CLEAR_CLASS_SCHEDULE_ONE\n});\n","import * as actionTypes from './actionsType';\n\nexport const showAllGroups = res => {\n    return {\n        type: actionTypes.SHOW_ALL_GROUPS,\n        result: res\n    };\n};\n\nexport const setDisabledGroups = res => {\n    return {\n        type: actionTypes.SET_DISABLED_GROUPS,\n        result: res\n    };\n};\n\nexport const addGroup = res => {\n    return {\n        type: actionTypes.ADD_GROUP,\n        result: res\n    };\n};\n\nexport const deleteGroup = res => {\n    return {\n        type: actionTypes.DELETE_GROUP,\n        result: res\n    };\n};\n\nexport const selectGroup = res => {\n    return {\n        type: actionTypes.SELECT_GROUP,\n        result: res\n    };\n};\n\nexport const updateGroup = res => {\n    return {\n        type: actionTypes.UPDATE_GROUP,\n        result: res\n    };\n};\n\nexport const clearGroup = () => ({\n    type: actionTypes.CLEAR_GROUP\n});\n","import * as actionTypes from './actionsType';\n\nexport const showAllSemesters = res => {\n\n    return {\n        type: actionTypes.SHOW_ALL_SEMESTERS,\n        result: res\n    };\n};\n\nexport const setDisabledSemesters = res => {\n    return {\n        type: actionTypes.SET_DISABLED_SEMESTERS,\n        result: res\n    };\n};\nexport const setArchivedSemesters = res => {\n    return {\n        type: actionTypes.SET_ARCHIVED_SEMESTERS,\n        result: res\n    };\n};\n\nexport const addSemester = res => {\n    return {\n        type: actionTypes.ADD_SEMESTER,\n        result: res\n    };\n};\n\nexport const deleteSemester = res => {\n    return {\n        type: actionTypes.DELETE_SEMESTER,\n        result: res\n    };\n};\n\nexport const selectSemester = res => {\n\n    return {\n        type: actionTypes.SELECT_SEMESTER,\n        result: res\n    };\n};\n\nexport const updateSemester = res => {\n    return {\n        type: actionTypes.UPDATE_SEMESTER,\n        result: res\n    };\n};\n\nexport const moveToArchivedSemester = res => {\n    return {\n        type: actionTypes.MOVE_SEMESTER_TO_ARCHIVE,\n        result: res\n    };\n};\n\nexport const clearSemester = () => ({\n    type: actionTypes.CLEAR_SEMESTER\n});\n\nexport const setError = res => {\n    return {\n        type: actionTypes.SET_ERROR,\n        result: res\n    };\n};\n","import { store } from '../index';\n\nimport { setOpenSnackbar } from '../redux/actions/index';\n\nexport const handleSnackbarOpenService = (isOpen, type, message) => {\n    store.dispatch(\n        setOpenSnackbar({\n            isOpen: isOpen,\n            type: type,\n            message: message\n        })\n    );\n};\n\nexport const handleSnackbarCloseService = () => {\n    const snackbarStore = store.getState().snackbar;\n    store.dispatch(\n        setOpenSnackbar({\n            isOpen: false,\n            type: snackbarStore.snackbarType,\n            message: null\n        })\n    );\n};\n","export const snackbarTypes = {\n    ERROR: 'error',\n    WARNING: 'warning',\n    INFO: 'info',\n    SUCCESS: 'success'\n};\n","import { handleSnackbarOpenService } from '../services/snackbarService';\nimport { snackbarTypes } from '../constants/snackbarTypes';\nimport i18n from './i18n';\n\nexport const errorHandler = error => {\n    handleSnackbarOpenService(\n        true,\n        snackbarTypes.ERROR,\n        error.response\n            ? i18n.t(error.response.data.message, error.response.data.message)\n            : 'Error'\n    );\n};\n\nexport const successHandler = message => {\n    handleSnackbarOpenService(true, snackbarTypes.SUCCESS, message);\n};\n\nexport const infoHandler = message => {\n    handleSnackbarOpenService(true, snackbarTypes.INFO, message);\n};","import { store } from '../index';\n\nimport {\n    setLoading,\n    setScheduleLoading,\n    setSemesterLoading\n} from '../redux/actions/index';\n\nexport const setLoadingService = isLoading => {\n    store.dispatch(setLoading(isLoading));\n};\n\nexport const setScheduleLoadingService = isLoading => {\n    store.dispatch(setScheduleLoading(isLoading));\n};\n\nexport const setSemesterLoadingService = isLoading => {\n    store.dispatch(setSemesterLoading(isLoading));\n};\n","import { reset } from 'redux-form';\nimport { store } from '../index';\n\nexport const resetFormHandler = formName => {\n    store.dispatch(reset(formName));\n};\n","import { reset } from 'redux-form';\n\nimport { store } from '../index';\nimport axios from '../helper/axios';\nimport { DISABLED_GROUPS_URL, GROUP_URL } from '../constants/axios';\nimport { GROUP_FORM } from '../constants/reduxForms';\nimport {\n    showAllGroups,\n    deleteGroup,\n    addGroup,\n    selectGroup,\n    updateGroup,\n    clearGroup,\n    setDisabledGroups\n} from '../redux/actions/index';\nimport { errorHandler, successHandler } from '../helper/handlerAxios';\nimport i18n from '../helper/i18n';\nimport { resetFormHandler } from '../helper/formHelper';\n\nexport const sortGroup = (a, b) => {\n    return Number(a.title.substr(0, a.title.indexOf(' '))) - Number(b.title.substr(0, b.title.indexOf(' ')));\n};\n\nexport const selectGroupService = groupId => {\n    store.dispatch(selectGroup(groupId));\n};\n\nexport const handleGroupService = values =>\n    values.id ? updateGroupService(values) : createGroupService(values);\n\nexport const clearGroupService = () => {\n    store.dispatch(clearGroup());\n    resetFormHandler(GROUP_FORM);\n};\n\nexport const showAllGroupsService = () => {\n    axios\n        .get(GROUP_URL)\n        .then(response => {\n            store.dispatch(showAllGroups(response.data.sort((a, b) => sortGroup(a, b))));\n        })\n        .catch(error => errorHandler(error));\n};\n\nexport const removeGroupCardService = groupId => {\n    axios\n        .delete(GROUP_URL + `/${groupId}`)\n        .then(response => {\n            store.dispatch(deleteGroup(groupId));\n            getDisabledGroupsService();\n            successHandler(\n                i18n.t('serviceMessages:back_end_success_operation', {\n                    cardType: i18n.t('formElements:group_label'),\n                    actionType: i18n.t('serviceMessages:deleted_label')\n                })\n            );\n        })\n        .catch(error => errorHandler(error));\n};\n\nexport const createGroupService = data => {\n    axios\n        .post(GROUP_URL, data)\n        .then(response => {\n            store.dispatch(addGroup(response.data));\n            resetFormHandler(GROUP_FORM);\n            successHandler(\n                i18n.t('serviceMessages:back_end_success_operation', {\n                    cardType: i18n.t('formElements:group_label'),\n                    actionType: i18n.t('serviceMessages:created_label')\n                })\n            );\n        })\n        .catch(error => errorHandler(error));\n};\n\nexport const updateGroupService = data => {\n    return axios\n        .put(GROUP_URL, data)\n        .then(response => {\n            store.dispatch(updateGroup(response.data));\n            selectGroupService(null);\n            getDisabledGroupsService();\n            showAllGroupsService();\n            resetFormHandler(GROUP_FORM);\n            successHandler(\n                i18n.t('serviceMessages:back_end_success_operation', {\n                    cardType: i18n.t('formElements:group_label'),\n                    actionType: i18n.t('serviceMessages:updated_label')\n                })\n            );\n        })\n        .catch(error => errorHandler(error));\n};\n\nexport const getDisabledGroupsService = () => {\n    axios\n        .get(DISABLED_GROUPS_URL)\n        .then(res => {\n            store.dispatch(setDisabledGroups(res.data.sort((a, b) => sortGroup(a, b))));\n        })\n        .catch(error => {\n            errorHandler(error);\n        });\n};\n\nexport const setDisabledGroupService = group => {\n    group.disable = true;\n    updateGroupService(group);\n};\n\nexport const setEnabledGroupService = group => {\n    group.disable = false;\n    updateGroupService(group);\n};\n","export const LESSON_FORM = 'lessonForm';\nexport const TEMPORARY_SCHEDULE_FORM = 'temporaryScheduleForm';\nexport const TEMPORARY_SCHEDULE_VACATION_FORM = 'temporaryScheduleVacationForm';\nexport const GROUP_FORM = 'addGroup';\nexport const ROOM_FORM = 'AddRoom';\nexport const ROOM_FORM_TYPE = 'roomType';\nexport const FREE_ROOMS = 'FREE_ROOMS';\nexport const TEACHER_FORM = 'addTeacher';\nexport const STUDENT_FORM=\"addStudent\";\nexport const CLASS_FORM = 'classForm';\nexport const LOGIN_FORM = 'loginForm';\nexport const REGISTRATION_FORM = 'registrationForm';\nexport const RESET_PASSWORD_FORM = 'resetPasswordForm';\nexport const SUBJECT_FORM = 'addSubject';\nexport const DEPARTMENT_FORM = 'addDepartment';\nexport const SEMESTER_FORM = 'addSemester';\nexport const TEACHER_SCHEDULE_FORM = 'teacherScheduleForm';\nexport const SCHEDULE_SEARCH_FORM = 'GroupSchedulePageTop';\nexport const PROFILE_FORM = 'ProfilePage';\nexport const SEMESTER_COPY_FORM = 'SemesterCopyForm';\nexport const COPY_LESSONS_FROM_SEMESTER_FORM = 'CopyLessonsFromSemesterForm';\n","import { store } from '../index';\nimport React, { useEffect } from 'react';\nimport axios from '../helper/axios';\nimport i18n from '../helper/i18n';\nimport { errorHandler, infoHandler, successHandler } from '../helper/handlerAxios';\n\nimport {\n    checkAvailabilitySchedule,\n    deleteItemFromSchedule,\n    setCurrentSemester,\n    setDefaultSemester,\n    setFullSchedule,\n    setGroupSchedule,\n    setItemGroupId,\n    setScheduleGroupId,\n    setScheduleItems,\n    setScheduleSemesterId,\n    setScheduleTeacherId,\n    setScheduleType,\n    setSemesterList,\n    setTeacherSchedule,\n    showAllGroups,\n    showAllTeachers,\n    setTeacherRangeSchedule,\n    setTeacherViewType\n} from '../redux/actions/index';\n\nimport {\n    setLoadingService,\n    setScheduleLoadingService,\n    setSemesterLoadingService\n} from './loadingService';\nimport { handleSnackbarOpenService } from './snackbarService';\n\nimport {\n    CURRENT_SEMESTER_URL,\n    DEFAULT_SEMESTER_URL,\n    FULL_SCHEDULE_URL,\n    GROUP_SCHEDULE_URL,\n    SCHEDULE_CHECK_AVAILABILITY_URL,\n    SCHEDULE_ITEMS_URL,\n    SCHEDULE_SEMESTER_ITEMS_URL,\n    PUBLIC_SEMESTERS_URL,\n    TEACHER_SCHEDULE_URL,\n    PUBLIC_GROUP_URL,\n    PUBLIC_TEACHER_URL,\n    FOR_TEACHER_SCHEDULE_URL,\n    CLEAR_SCHEDULE_URL,\n    ROOMS_AVAILABILITY,\n    SCHEDULE_ITEM_ROOM_CHANGE, TEACHER_URL, SEMESTERS_URL, GROUPS_URL, SEND_PDF_TO_EMAIL, DEPARTMENT_URL\n} from '../constants/axios';\n\nimport { snackbarTypes } from '../constants/snackbarTypes';\n\nimport { showBusyRooms } from './busyRooms';\nimport { TEACHER_SCHEDULE_FORM } from '../constants/reduxForms';\nimport { resetFormHandler } from '../helper/formHelper';\nimport { useHistory } from 'react-router-dom';\nimport { getAllTeachersByDepartmentId } from '../redux/actions/teachers';\nimport departments from '../redux/reducers/departments';\nimport { sortGroup } from './groupService';\n\nexport const getCurrentSemesterService = () => {\n    axios\n        .get(CURRENT_SEMESTER_URL)\n        .then(response => {\n            setSemesterLoadingService(false);\n            store.dispatch(setCurrentSemester(response.data));\n        })\n        .catch(err => {\n            handleSnackbarOpenService(\n                true,\n                snackbarTypes.ERROR,\n                i18n.t('common:no_current_semester_error')\n            );\n            setSemesterLoadingService(false);\n        });\n};\nexport const getDefaultSemesterService = () => {\n    axios\n        .get(DEFAULT_SEMESTER_URL)\n        .then(response => {\n            setSemesterLoadingService(false);\n            store.dispatch(setDefaultSemester(response.data));\n        })\n        .catch(err => {\n            handleSnackbarOpenService(\n                true,\n                snackbarTypes.ERROR,\n                i18n.t('common:no_current_semester_error')\n            );\n            setSemesterLoadingService(false);\n        });\n};\n\nexport const disableDefaultSemesterService = () => {\n    store.dispatch(setDefaultSemester({}));\n};\n\nexport const getScheduleItemsService = () => {\n    axios\n        .get(CURRENT_SEMESTER_URL)\n        .then(response => {\n            store.dispatch(setCurrentSemester(response.data));\n            getScheduleItemsServiceBySemester(response.data.id);\n            showBusyRooms(response.data.id);\n        })\n        .catch(err => {\n            handleSnackbarOpenService(\n                true,\n                snackbarTypes.ERROR,\n                i18n.t('common:no_current_semester_error')\n            );\n            setLoadingService(false);\n        });\n};\n\nconst getScheduleItemsServiceBySemester = semesterId => {\n    axios\n        .get(`${SCHEDULE_SEMESTER_ITEMS_URL}?semesterId=${semesterId}`)\n        .then(response => {\n            store.dispatch(setScheduleItems(response.data));\n            setScheduleLoadingService(false);\n        })\n        .catch(err => {\n            errorHandler(err);\n            setLoadingService(false);\n        });\n};\n\nexport const checkAvailabilityScheduleService = item => {\n    axios\n        .get(\n            SCHEDULE_CHECK_AVAILABILITY_URL +\n            '?classId=' +\n            item.periodId +\n            '&dayOfWeek=' +\n            item.dayOfWeek +\n            '&evenOdd=' +\n            item.evenOdd +\n            '&lessonId=' +\n            item.lessonId +\n            '&semesterId=' +\n            item.semesterId\n        )\n        .then(response => {\n            setLoadingService(false);\n            store.dispatch(checkAvailabilitySchedule(response.data));\n        })\n        .catch(err => {\n            errorHandler(err);\n            setLoadingService(false);\n        });\n};\nexport const checkAvailabilityChangeRoomScheduleService = item => {\n    axios\n        .get(\n            ROOMS_AVAILABILITY +\n            '?classId=' +\n            item.periodId +\n            '&dayOfWeek=' +\n            item.dayOfWeek +\n            '&evenOdd=' +\n            item.evenOdd +\n            '&semesterId=' +\n            item.semesterId\n        )\n        .then(response => {\n            setLoadingService(false);\n            store.dispatch(\n                checkAvailabilitySchedule({\n                    classSuitsToTeacher: true,\n                    teacherAvailable: true,\n                    rooms: response.data\n                })\n            );\n        })\n        .catch(err => {\n            errorHandler(err);\n            setLoadingService(false);\n        });\n};\nexport const addItemToScheduleService = item => {\n    axios\n        .post(SCHEDULE_ITEMS_URL, item)\n        .then(response => {\n            getScheduleItemsService();\n        })\n        .catch(err => errorHandler(err));\n};\nexport const editRoomItemToScheduleService = item => {\n    axios\n        .put(\n            SCHEDULE_ITEM_ROOM_CHANGE +\n            '?roomId=' +\n            item.roomId +\n            '&scheduleId=' +\n            item.itemId\n        )\n        .then(response => {\n            successHandler(\n                i18n.t('serviceMessages:back_end_success_operation', {\n                    cardType: i18n.t('common:schedule_title'),\n                    actionType: i18n.t('serviceMessages:updated_label')\n                })\n            );\n            getScheduleItemsService();\n        })\n        .catch(err => errorHandler(err));\n};\nexport const deleteItemFromScheduleService = itemId => {\n    axios\n        .delete(`${SCHEDULE_ITEMS_URL}/${itemId}`)\n        .then(response => {\n            store.dispatch(deleteItemFromSchedule(itemId));\n            getScheduleItemsService();\n        })\n        .catch(err => {\n            errorHandler(err);\n            setLoadingService(false);\n        });\n};\n\nexport const submitSearchSchedule = values => {\n\n    setScheduleSemesterIdService(values.semester);\n\n    if (values.hasOwnProperty('group') && +values.group > 0) {\n        setScheduleTypeService('group');\n        setScheduleGroupIdService(values.group);\n        getGroupSchedule(values.group, values.semester);\n\n        return;\n    }\n    if (values.hasOwnProperty('teacher') && +values.teacher > 0) {\n        setScheduleTypeService('teacher');\n        // setScheduleGroupIdService(values.teacher);\n        setScheduleTeacherIdService(values.teacher);\n        getTeacherSchedule(values.teacher, values.semester);\n        return;\n    }\n    if (\n        (!values.hasOwnProperty('group') &&\n            !values.hasOwnProperty('teacher')) ||\n        (values.hasOwnProperty('group') &&\n            !values.hasOwnProperty('teacher') &&\n            +values.group === 0) ||\n        (!values.hasOwnProperty('group') &&\n            values.hasOwnProperty('teacher') &&\n            +values.teacher === 0) ||\n        (values.hasOwnProperty('group') &&\n            values.hasOwnProperty('teacher') &&\n            +values.teacher === 0 &&\n            +values.group === 0)\n    ) {\n        setScheduleTypeService('full');\n        getFullSchedule(values.semester);\n        return;\n    }\n};\n\n\nexport const sendTeachersScheduleService = (data) => {\n    const teachersId = data.teachersId.map(teacherId => `teachersId=${teacherId}`).join('&');//teachersId=65&teachersId=12\n    const { semesterId, language } = data;\n    axios\n        .get(`${SEND_PDF_TO_EMAIL}/semester/${semesterId}?language=${language}&${teachersId}`)\n        .then(response => {\n            setLoadingService(false);\n            successHandler(\n                i18n.t('serviceMessages:back_end_success_operation', {\n                    cardType: i18n.t('formElements:schedule_label'),\n                    actionType: i18n.t('serviceMessages:sent_label')\n                })\n            );\n        })\n        .catch(error => errorHandler(error));\n};\n\nexport const setItemGroupIdService = groupId => {\n    store.dispatch(setItemGroupId(groupId));\n};\n\nexport const setScheduleGroupIdService = groupId => {\n\n    store.dispatch(setScheduleGroupId(groupId));\n};\n\nexport const setScheduleTypeService = item => {\n    store.dispatch(setScheduleType(item));\n};\n\n\nexport const getFullSchedule = semesterId => {\n    if (semesterId !== undefined)\n        axios\n            .get(FULL_SCHEDULE_URL + semesterId)\n            .then(response => {\n                store.dispatch(setFullSchedule(response.data));\n            })\n            .catch(err => errorHandler(err));\n\n};\n\n\nexport const getGroupSchedule = (groupId, semesterId) => {\n    if (groupId > 0) {\n        axios\n            .get(GROUP_SCHEDULE_URL + semesterId + '&groupId=' + groupId)\n            .then(response => {\n                store.dispatch(setGroupSchedule(response.data));\n            })\n            .catch(err => errorHandler(err));\n    }\n};\n\n\nexport const getTeacherSchedule = (teacherId, semesterId) => {\n    if (teacherId > 0) {\n        axios\n            .get(TEACHER_SCHEDULE_URL + semesterId + '&teacherId=' + teacherId)\n            .then(response => {\n                store.dispatch(setTeacherSchedule(response.data));\n            })\n            .catch(err => errorHandler(err));\n    }\n};\nexport const setScheduleTeacherIdService = teacherId => {\n    store.dispatch(setScheduleTeacherId(teacherId));\n};\n\nexport const showAllPublicSemestersService = () => {\n    axios\n        .get(PUBLIC_SEMESTERS_URL)\n        .then(response => {\n            store.dispatch(setSemesterList(response.data));\n        })\n        .catch(err => errorHandler(err));\n};\nexport const setScheduleSemesterIdService = semesterId => {\n    store.dispatch(setScheduleSemesterId(semesterId));\n};\n\nexport const showAllPublicGroupsService = (id) => {\n    if (id !== null && id !== undefined)\n        axios\n            .get(`/${SEMESTERS_URL}/${id}/${GROUPS_URL}`)\n            .then(response => {\n                store.dispatch(showAllGroups(response.data.sort((a, b) => sortGroup(a, b))));\n                if (response.data.length === 0) {\n                    infoHandler(\n                        i18n.t('serviceMessages:chosen_semester_has_not_groups', {\n                            cardType: i18n.t('formElements:chosen_semester_label'),\n                            actionType: i18n.t('serviceMessages:group_label')\n                        })\n                    );\n                }\n            })\n            .catch(err => errorHandler(err));\n};\n\nexport const showAllPublicTeachersService = () => {\n    axios\n        .get(PUBLIC_TEACHER_URL)\n        .then(response => {\n            store.dispatch(showAllTeachers(response.data));\n        })\n        .catch(err => errorHandler(err));\n};\nexport const showAllPublicTeachersByDepartmentService = (departmentId) => {\n    axios\n        .get(`${DEPARTMENT_URL}/${departmentId}/${TEACHER_URL}`)\n        .then(response => {\n            store.dispatch(getAllTeachersByDepartmentId(response.data));\n        })\n        .catch(err => errorHandler(err));\n};\n\nexport const clearTeacherScheduleFormService = () => {\n    resetFormHandler(TEACHER_SCHEDULE_FORM);\n};\n\nexport const getTeacherScheduleService = values => {\n    axios\n        .get(\n            FOR_TEACHER_SCHEDULE_URL +\n            '?from=' +\n            values.startDay.replace(/\\//g, '-') +\n            '&to=' +\n            values.endDay.replace(/\\//g, '-')\n        )\n        .then(response => {\n            setLoadingService(false);\n            store.dispatch(setTeacherRangeSchedule(response.data));\n        })\n        .catch(err => {\n            errorHandler(err);\n            setLoadingService(false);\n        });\n};\n\nexport const getTeacherScheduleByDateRangeService = (teacherId, to, from) => {\n    axios\n        .get(\n            FOR_TEACHER_SCHEDULE_URL +\n            '?teacherId' +\n            teacherId +\n            '&from=' +\n            from.replace(/\\//g, '-') +\n            '&to=' +\n            to.replace(/\\//g, '-')\n        )\n        .then(response => {\n        })\n        .catch(err => {\n            errorHandler(err);\n        });\n};\n\nexport const setTeacherServiceViewType = type => {\n    store.dispatch(setTeacherViewType(type));\n};\n\nexport const clearSchedule = semesterId => {\n    axios\n        .delete(CLEAR_SCHEDULE_URL + '?semesterId=' + semesterId)\n        .then(response => {\n            getScheduleItemsService();\n            successHandler(\n                i18n.t('serviceMessages:back_end_success_operation', {\n                    cardType: i18n.t('common:schedule_title'),\n                    actionType: i18n.t('serviceMessages:cleared_label')\n                })\n            );\n        })\n        .catch(err => {\n            errorHandler(err);\n            setLoadingService(false);\n        });\n};\n","import { store } from '../index';\n\nimport { BUSY_ROOMS } from '../constants/axios';\nimport axios from '../helper/axios';\n\nimport { showAllBusyRooms } from '../redux/actions';\nimport { errorHandler } from '../helper/handlerAxios';\n\nexport const showBusyRooms = semesterId => {\n    axios\n        .get(BUSY_ROOMS + '?semesterId=' + semesterId)\n        .then(response => {\n            store.dispatch(showAllBusyRooms(response.data));\n        })\n        .catch(error => {\n            errorHandler(error);\n        });\n};\n","import * as actionsType from './actionsType';\n\nexport const showAllBusyRooms = data => {\n    return {\n        type: actionsType.SHOW_ALL_BUSY_ROOMS,\n        result: data\n    };\n};\n","export const cssClasses = {\n    SCHEDULE_BOARD: 'schedule-board',\n    IN_BOARD_SECTION: 'in-board-section',\n    IN_BOARD_CARD: 'in-board-card',\n    MORE_ICON: 'more-icon'\n};\n","import React, { useRef } from 'react';\n\nimport './Card.scss';\nimport { colors } from '../../constants/schedule/colors';\n\nimport { setItemGroupIdService } from '../../services/scheduleService';\nimport { cssClasses } from '../../constants/schedule/cssClasses';\n\nconst Card = props => {\n    let className = 'card';\n    if (props.class) {\n        className = className.concat(' ' + props.class);\n    }\n\n    let card = <div className={className}>{props.children}</div>;\n\n    const dragItemNode = useRef();\n    const dragItem = useRef();\n\n    if (props.draggable) {\n        const dragStart = e => {\n            const item = JSON.parse(e.target.childNodes[0].value);\n            const groupId = item.lesson.group.id;\n            const groupTitle = document.getElementById(`group-${groupId}`);\n            groupTitle.style.backgroundColor = colors.ALLOW;\n            const boards = document.getElementsByClassName(`group-${groupId}`);\n\n            setTimeout(() => {\n                groupTitle.style.display = 'flex';\n\n                for (const board of boards) {\n                    board.style.display = 'flex';\n                    if (\n                        board.childNodes[0].classList.contains(\n                            cssClasses.MORE_ICON\n                        ) &&\n                        !board.childNodes[1]\n                    ) {\n                        board.style.background = colors.POSSIBILITY;\n                    }\n                }\n            }, 50);\n\n            setItemGroupIdService(groupId);\n\n            dragItemNode.current = e.target;\n            dragItemNode.current.addEventListener('dragend', handleDragEnd);\n\n            e.dataTransfer.setData('card_id', dragItemNode.current.id);\n        };\n\n        const handleDragEnd = e => {\n            const groupId = +JSON.parse(e.target.childNodes[0].value).lesson\n                .group.id;\n            const groupTitleEl = document.getElementById(`group-${groupId}`);\n\n            const allBoards = document.getElementsByClassName('schedule-board');\n            const groupTitles = document.getElementsByClassName('group-title');\n\n            const boards = document.getElementsByClassName(`group-${groupId}`);\n\n            if (groupTitleEl) {\n                groupTitleEl.style.backgroundColor = colors.NOTHING;\n            }\n            for (const board of boards) {\n                if (board) {\n                    board.style.background = colors.NOTHING;\n                }\n            }\n\n            for (let board of allBoards) {\n                board.style.display = 'flex';\n            }\n\n            for (const groupTitle of groupTitles) {\n                groupTitle.style.display = 'flex';\n            }\n\n            dragItem.current = null;\n            dragItemNode.current.removeEventListener('dragend', handleDragEnd);\n            dragItemNode.current = null;\n        };\n\n        card = (\n            <div\n                id={props.id}\n                className={className}\n                onDragStart={dragStart}\n                draggable={props.draggable}\n            >\n                {props.children}\n            </div>\n        );\n    }\n\n    return <>{card}</>;\n};\n\nexport default Card;\n","import { store } from '../index';\n\nimport Moment from 'moment';\nimport { extendMoment } from 'moment-range';\nimport i18n from '../helper/i18n';\n\nexport const checkUniqClassName = className => {\n    const classId = store.getState().classActions.classScheduleOne.id;\n    var find = false;\n    if (classId) {\n        find = store\n            .getState()\n            .classActions.classScheduler.some(function (value, index, _arr) {\n                return value.class_name === className && value.id !== classId;\n            });\n    } else {\n        find = store\n            .getState()\n            .classActions.classScheduler.some(function (value, index, _arr) {\n                return value.class_name === className;\n            });\n    }\n    return find ? i18n.t('validationMessages:unique_error_message') : undefined;\n};\n\nexport const timeIntersectService = (startTime, endTime) => {\n    const classId = store.getState().classActions.classScheduleOne.id;\n    const moment = extendMoment(Moment);\n    let find = false;\n    if (startTime && endTime) {\n        const incomeRange = moment.range(\n            moment(startTime, 'HH:mm').toDate(),\n            moment(endTime, 'HH:mm').toDate()\n        );\n        if (classId) {\n            find = store\n                .getState()\n                .classActions.classScheduler.some(function (\n                    value,\n                    index,\n                    _arr\n                ) {\n                    return (\n                        incomeRange.intersect(\n                            moment.range(\n                                moment(value.startTime, 'HH:mm').toDate(),\n                                moment(value.endTime, 'HH:mm').toDate()\n                            )\n                        ) !== null && value.id !== classId\n                    );\n                });\n        } else {\n            find = store\n                .getState()\n                .classActions.classScheduler.some(function (\n                    value,\n                    index,\n                    _arr\n                ) {\n                    return (\n                        incomeRange.intersect(\n                            moment.range(\n                                moment(value.startTime, 'HH:mm').toDate(),\n                                moment(value.endTime, 'HH:mm').toDate()\n                            )\n                        ) !== null\n                    );\n                });\n        }\n    }\n    return find\n        ? i18n.t('validationMessages:intersect_time_error_message')\n        : undefined;\n};\n\nexport const checkUniqLesson = lesson => {\n    const lessons = store.getState().lesson.lessons;\n    let isNotUnique;\n    if (!lesson.id) {\n        isNotUnique = !!lessons.find(\n            storeLesson =>\n                storeLesson.subject.id === +lesson.subject.id &&\n                storeLesson.teacher.id === +lesson.teacher.id &&\n                storeLesson.lessonType === lesson.lessonType\n        );\n    } else {\n        isNotUnique = !!lessons.find(\n            storeLesson =>\n                storeLesson.subject.id === +lesson.subject.id &&\n                storeLesson.teacher.id === +lesson.teacher.id &&\n                storeLesson.lessonType === lesson.lessonType &&\n                storeLesson.id !== +lesson.id\n        );\n    }\n    return !isNotUnique;\n};\n\nexport const checkUniqueRoomName = roomName => {\n    const roomdId = store.getState().rooms.oneRoom.id;\n    let find = false;\n    if (roomdId) {\n        find = store\n        .getState()\n        .rooms.rooms.some(function (value, index, _arr) {\n            return value.name.toUpperCase() === roomName.toUpperCase() && value.id !== roomdId;\n        });\n    } else {\n     find = store\n        .getState()\n        .rooms.rooms.some(function (value, index, _arr) {\n            return value.name.toUpperCase() === roomName.toUpperCase()  ;\n        });\n    }\n    return find ? i18n.t('validationMessages:unique_error_message') : undefined;\n};\n\nexport const checkUniqueGroup = groupTitle => {\n    if (!groupTitle) {\n        return;\n    }\n    const find = store.getState().groups.groups.some(function (value) {\n        return (\n            value.title.toUpperCase().trim() === groupTitle.toUpperCase().trim()\n        );\n    });\n    return find ? i18n.t('validationMessages:unique_error_message') : undefined;\n};\n\nexport const checkUniqueSubject = subjectTitle => {\n    if (!subjectTitle) {\n        return;\n    }\n    const find = store.getState().subjects.subjects.some(function (value) {\n        return (\n            value.name.toUpperCase().trim() ===\n            subjectTitle.toUpperCase().trim()\n        );\n    });\n    return find ? i18n.t('validationMessages:unique_error_message') : undefined;\n};\nexport const checkUniqueDepartment = departmentTitle => {\n    if (!departmentTitle) {\n        return;\n    }\n    const find = store.getState().departments.departments.some(function (value) {\n        return (\n            value.name.toUpperCase().trim() ===\n            departmentTitle.toUpperCase().trim()\n        );\n    });\n    return find ? i18n.t('validationMessages:unique_error_message') : undefined;\n};\n\n\n\nexport const checkUniqSemester = semester => {\n    const semesters = store.getState().semesters.semesters;\n    let isNotUnique;\n    if (!semester.id) {\n        isNotUnique = !!semesters.find(\n            storeSemester =>\n                storeSemester.year === +semester.year &&\n                storeSemester.description.toUpperCase().trim() === semester.description.toUpperCase().trim()\n        );\n    } else {\n        isNotUnique = !!semesters.find(\n            storeSemester =>\n            storeSemester.year=== +semester.year &&\n            storeSemester.description.toUpperCase().trim() === semester.description.toUpperCase().trim() && \n            storeSemester.id !== +semester.id\n        );\n    }\n    \n    return !isNotUnique\n};\n","export const validation = {\n    EMAIL: /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i,\n    PASSWORD: /^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z])(?=.*[^a-zA-Z0-9])(?=.*[!@#$%^&*]).{8,}$/\n};\n","import React from \"react\";\n\nimport FormControl from '@material-ui/core/FormControl'\nimport Select from '@material-ui/core/Select'\nimport InputLabel from '@material-ui/core/InputLabel'\n\nimport {renderFromHelper} from './error';\n\nconst renderSelectField = ({\n  input,\n  label,\n  name,\n  id,\n  meta: { touched, error },\n  children,\n  ...custom\n}) => (\n  <FormControl error={touched && !!error}>\n    <InputLabel htmlFor={id}>{label}</InputLabel>\n    <Select\n      native\n      {...input}\n      {...custom}\n      name={name}\n      id={id}\n    >\n      {children}\n    </Select>\n    {renderFromHelper({ touched, error })}\n  </FormControl>\n)\n\nexport default renderSelectField;\n","import React from \"react\";\n\nimport FormHelperText from \"@material-ui/core/FormHelperText\";\n\nexport const renderFromHelper = ({ touched, error }) => {\n  if (!(touched && error)) {\n    return;\n  } else {\n    return <FormHelperText>{touched && error}</FormHelperText>;\n  }\n};\n","import i18n from '../helper/i18n';\nimport { store } from '../index';\nimport axios from '../helper/axios';\nimport {\n    DISABLED_SEMESTERS_URL,\n    SEMESTERS_URL,\n    SEMESTER_COPY_URL,\n    LESSONS_FROM_SEMESTER_COPY_URL,\n    CREATE_ARCHIVE_SEMESTER,\n    ARCHIVED_SEMESTERS_URL, DEFAULT_SEMESTER_URL, SCHEDULE_SEMESTER_ITEMS_URL, GROUPS_URL\n} from '../constants/axios';\nimport { setDisabledSemesters, setError } from '../redux/actions/semesters';\nimport { SEMESTER_FORM } from '../constants/reduxForms';\nimport { snackbarTypes } from '../constants/snackbarTypes';\nimport { handleSnackbarOpenService } from './snackbarService';\nimport { checkUniqSemester } from '../validation/storeValidation';\nimport {\n    addSemester,\n    clearSemester,\n    deleteSemester,\n    selectSemester,\n    showAllSemesters,\n    updateSemester,\n    setArchivedSemesters,\n    moveToArchivedSemester,\n    setScheduleType,\n    setFullSchedule, setScheduleItems\n} from '../redux/actions/index';\n\nimport { errorHandler, successHandler } from '../helper/handlerAxios';\nimport { resetFormHandler } from '../helper/formHelper';\nimport { setLoadingService, setScheduleLoadingService } from './loadingService';\n\nexport const selectSemesterService = semesterId =>\n    store.dispatch(selectSemester(semesterId));\n\nexport const setUniqueErrorService = isUniqueError =>\n    store.dispatch(setError(isUniqueError));\n\nexport const clearSemesterService = () => {\n    store.dispatch(clearSemester());\n    resetFormHandler(SEMESTER_FORM);\n};\n\nexport const showAllSemestersService = () => {\n    axios\n        .get(SEMESTERS_URL)\n        .then(response => {\n            store.dispatch(\n                showAllSemesters(\n                    response.data\n                        .sort((a, b) => (a.year > b.year ? 1 : -1))\n                        .reverse()\n                )\n            );\n        })\n        .catch(error => errorHandler(error));\n\n};\nexport const setGroupsToSemester = (semesterId, groups) => {\n    const groupIds = groups.map(item => `groupId=${item.id}`).join('&');\n    axios\n        .put(`${SEMESTERS_URL}/${semesterId}/groups?${groupIds}`)\n        .then(response => {\n            store.dispatch(updateSemester(response.data));\n            selectSemesterService(null);\n            getDisabledSemestersService();\n            getArchivedSemestersService();\n            showAllSemestersService();\n            resetFormHandler(SEMESTER_FORM);\n            successHandler(\n                i18n.t('serviceMessages:back_end_success_operation', {\n                    cardType: i18n.t('formElements:semester_label'),\n                    actionType: i18n.t('serviceMessages:updated_label')\n                })\n            );\n        })\n        .catch(error => errorHandler(error));\n};\n\nconst cardSemester = semester => {\n    const semester_days = [];\n    const semester_classes = [];\n    for (let prop in semester) {\n        if (Object.prototype.hasOwnProperty.call(semester, prop)) {\n            if (\n                prop.indexOf('semester_days_markup_') >= 0 &&\n                semester[prop] === true\n            ) {\n                semester_days.push(prop.substring(21));\n            }\n        }\n        if (Object.prototype.hasOwnProperty.call(semester, prop)) {\n            if (\n                prop.indexOf('semester_classes_markup_') >= 0 &&\n                semester[prop] === true\n            ) {\n                semester_classes.push(\n                    store\n                        .getState()\n                        .classActions.classScheduler.find(\n                        schedule => schedule.id === +prop.substring(24)\n                    )\n                );\n            }\n        }\n\n    }\n\n    return {\n        id: semester.id,\n        year: +semester.year,\n        description: semester.description,\n        startDay: semester.startDay,\n        endDay: semester.endDay,\n        currentSemester: semester.currentSemester,\n        defaultSemester: semester.defaultSemester,\n        semester_days: semester_days,\n        semester_classes: semester_classes,\n        semester_groups: semester.semester_groups\n\n    };\n};\n\nexport const removeSemesterCardService = semesterId => {\n    const semester = store\n        .getState()\n        .semesters.semesters.find(item => item.id === semesterId);\n    if (semester.currentSemester === true) {\n        handleSnackbarOpenService(\n            true,\n            snackbarTypes.ERROR,\n            i18n.t('serviceMessages:semester_service_is_active')\n        );\n        return;\n    }\n    axios\n        .delete(SEMESTERS_URL + `/${semesterId}`)\n        .then(response => {\n            store.dispatch(deleteSemester(semesterId));\n            successHandler(\n                i18n.t('serviceMessages:back_end_success_operation', {\n                    cardType: i18n.t('formElements:semester_label'),\n                    actionType: i18n.t('serviceMessages:deleted_label')\n                })\n            );\n        })\n        .catch(error => errorHandler(error));\n};\n\nconst switchSaveActions = semester => {\n    if (semester.id) {\n        putSemester(semester);\n    } else {\n        postSemester(semester);\n    }\n};\n\nexport const handleSemesterService = values => {\n    let semester = cardSemester(values);\n    if (!checkUniqSemester(semester)) {\n        handleSnackbarOpenService(\n            true,\n            snackbarTypes.ERROR,\n            i18n.t('common:semester_service_is_not_unique')\n        );\n        setUniqueErrorService(true);\n        return;\n    }\n    if (!checkSemesterYears(semester.endDay, semester.startDay, semester.year))\n        return;\n\n    if (semester.currentSemester) {\n        const currentScheduleOld = findCurrentSemester(semester.id);\n        if (currentScheduleOld) {\n            currentScheduleOld.currentSemester = false;\n            axios\n                .put(SEMESTERS_URL, currentScheduleOld)\n                .then(response => {\n                    store.dispatch(updateSemester(response.data));\n                    switchSaveActions(semester);\n                })\n                .catch(error => errorHandler(error));\n        } else {\n            switchSaveActions(semester);\n        }\n    } else {\n        switchSaveActions(semester);\n    }\n};\n\nconst checkSemesterYears = (endDay, startDay, year) => {\n    const dateEndYear = +endDay.substring(endDay.length - 4);\n    const dateStartYear = +startDay.substring(startDay.length - 4);\n    let conf = true;\n    if (year !== dateEndYear || year !== dateStartYear) {\n        conf = window.confirm(\n            i18n.t('serviceMessages:semester_service_not_as_begin_or_end')\n        );\n    }\n    return conf;\n};\nexport const setDefaultSemesterById = dataId => {\n    axios\n        .put(`${DEFAULT_SEMESTER_URL}?semesterId=${dataId}`)\n        .then(response => {\n            store.dispatch(updateSemester(response.data));\n            selectSemesterService(null);\n            getDisabledSemestersService();\n            getArchivedSemestersService();\n            showAllSemestersService();\n            resetFormHandler(SEMESTER_FORM);\n            successHandler(\n                i18n.t('serviceMessages:back_end_success_operation', {\n                    cardType: i18n.t('formElements:semester_label'),\n                    actionType: i18n.t('serviceMessages:updated_label')\n                })\n            );\n        })\n        .catch(error => errorHandler(error));\n};\n\nconst putSemester = data => {\n    axios\n        .put(SEMESTERS_URL, data)\n        .then(response => {\n            store.dispatch(updateSemester(response.data));\n            selectSemesterService(null);\n            getDisabledSemestersService();\n            getArchivedSemestersService();\n            showAllSemestersService();\n            resetFormHandler(SEMESTER_FORM);\n            successHandler(\n                i18n.t('serviceMessages:back_end_success_operation', {\n                    cardType: i18n.t('formElements:semester_label'),\n                    actionType: i18n.t('serviceMessages:updated_label')\n                })\n            );\n        })\n        .catch(error => errorHandler(error));\n};\nconst postSemester = data => {\n    axios\n        .post(SEMESTERS_URL, data)\n        .then(response => {\n            store.dispatch(addSemester(response.data));\n            resetFormHandler(SEMESTER_FORM);\n            successHandler(\n                i18n.t('serviceMessages:back_end_success_operation', {\n                    cardType: i18n.t('formElements:semester_label'),\n                    actionType: i18n.t('serviceMessages:created_label')\n                })\n            );\n        })\n        .catch(error => errorHandler(error));\n};\nconst findCurrentSemester = semesterId => {\n    return store\n        .getState()\n        .semesters.semesters.find(\n            semesterItem =>\n                semesterItem.currentSemester === true &&\n                semesterItem.id !== semesterId\n        );\n};\nconst findDefaultSemester = semesterId => {\n    return store\n        .getState()\n        .semesters.semesters.find(\n            semesterItem =>\n                semesterItem.defaultSemester === true &&\n                semesterItem.id !== semesterId\n        );\n};\nexport const getDisabledSemestersService = () => {\n    axios\n        .get(DISABLED_SEMESTERS_URL)\n        .then(res => {\n            store.dispatch(setDisabledSemesters(res.data));\n        })\n        .catch(err => errorHandler(err));\n};\n\nexport const setDisabledSemestersService = semester => {\n    semester.disable = true;\n    putSemester(semester);\n};\n\nexport const setEnabledSemestersService = semester => {\n    semester.disable = false;\n    putSemester(semester);\n};\n\nexport const semesterCopy = values => {\n    axios\n        .post(\n            SEMESTER_COPY_URL +\n            '?fromSemesterId=' +\n            values.fromSemesterId +\n            '&toSemesterId=' +\n            values.toSemesterId\n        )\n        .then(response => {\n            successHandler(\n                i18n.t('serviceMessages:back_end_success_operation', {\n                    cardType: i18n.t('formElements:semester_label'),\n                    actionType: i18n.t('serviceMessages:copied_label')\n                })\n            );\n        })\n        .catch(error => errorHandler(error));\n};\n\nexport const CopyLessonsFromSemesterService = values => {\n    axios\n        .post(\n            LESSONS_FROM_SEMESTER_COPY_URL +\n            '?fromSemesterId=' +\n            values.fromSemesterId +\n            '&toSemesterId=' +\n            values.toSemesterId\n        )\n        .then(response => {\n            successHandler(\n                i18n.t('serviceMessages:back_end_success_operation', {\n                    cardType: i18n.t('formElements:lesson_label'),\n                    actionType: i18n.t('serviceMessages:copied_label')\n                })\n            );\n        })\n        .catch(error => errorHandler(error));\n};\n\nexport const createArchiveSemesterService = semesterId => {\n    axios\n        .post(CREATE_ARCHIVE_SEMESTER + '/' + semesterId)\n        .then(response => {\n            store.dispatch(moveToArchivedSemester(semesterId));\n            successHandler(\n                i18n.t('serviceMessages:back_end_success_operation', {\n                    cardType: i18n.t('formElements:semester_label'),\n                    actionType: i18n.t('serviceMessages:archived_label')\n                })\n            );\n        })\n        .catch(error => errorHandler(error));\n};\n\nexport const getArchivedSemestersService = () => {\n    axios\n        .get(ARCHIVED_SEMESTERS_URL)\n        .then(response => {\n            store.dispatch(setArchivedSemesters(response.data));\n        })\n        .catch(err => errorHandler(err));\n};\n\nexport const viewArchivedSemester = semesterId => {\n    setScheduleType('archived');\n    axios\n        .get(CREATE_ARCHIVE_SEMESTER + '/' + semesterId)\n        .then(response => {\n            store.dispatch(setFullSchedule(response.data));\n        })\n        .catch(err => errorHandler(err));\n};\n","export const days = [\n    'Monday',\n    'Tuesday',\n    'Wednesday',\n    'Thursday',\n    'Friday',\n    'Saturday',\n    'Sunday'\n];\n\nexport const daysUppercase = [];\ndays.map(day => daysUppercase.push(day.toUpperCase()));\n","import React, { useEffect } from 'react';\nimport { reduxForm, Field } from 'redux-form';\nimport { connect } from 'react-redux';\nimport Button from '@material-ui/core/Button';\nimport { required } from '../../validation/validateFields';\nimport renderSelectField from '../../share/renderedFields/select';\nimport { FREE_ROOMS } from '../../constants/reduxForms';\nimport { useTranslation } from 'react-i18next';\nimport { showAllSemestersService } from '../../services/semesterService';\nimport './freeRoomForm.scss';\nimport { daysUppercase } from '../../constants/schedule/days';\n\nlet FreeRoomForm = props => {\n\n    const { t } = useTranslation('formElements');\n\n    const weeks = ['ODD', 'EVEN', 'WEEKLY'];\n\n    useEffect(() => showAllSemestersService(), []);\n\n    const {\n        handleSubmit,\n        classScheduler,\n        pristine,\n        submitting,\n        onReset\n    } = props;\n\n    const class_names = [];\n\n    if (classScheduler.length - 1 > 0) {\n        classScheduler.map(classSchedulerOne => {\n            class_names.push(classSchedulerOne.class_name);\n        });\n    }\n\n    return (\n        <>\n            <form className=\"freeRoomsItems\" onSubmit={handleSubmit}>\n                <div className=\"roomsItems\">\n                    <Field\n                        name=\"semesterId\"\n                        component={renderSelectField}\n                        label={t('formElements:semester_free_rooms')}\n                        type=\"text\"\n                        className=\"freeRoomsItem\"\n                        validate={[required]}\n                    >\n                        <option value={''}></option>\n                        {props.semesters.map((semesters, index) => (\n                            <option key={index} value={semesters.id}>\n                                {semesters.description}\n                            </option>\n                        ))}\n                    </Field>\n                    <Field\n                        name=\"evenOdd\"\n                        component={renderSelectField}\n                        label={t('formElements:week_free_rooms')}\n                        type=\"text\"\n                        className=\"freeRoomsItem\"\n                        validate={[required]}\n                    >\n                        <option value={''}></option>\n                        {weeks.map((week, index) => (\n                            <option key={index} value={`${week}`}>\n                                {t(`common:${week.toLowerCase()}_week`)}\n                            </option>\n                        ))}\n                    </Field>\n                    <Field\n                        name=\"dayOfWeek\"\n                        component={renderSelectField}\n                        label={t('formElements:day_free_rooms')}\n                        type=\"text\"\n                        className=\"freeRoomsItem\"\n                        validate={[required]}\n                    >\n                        <option value={''}></option>\n                        {daysUppercase.map((day, index) => (\n                            <option key={index} value={`${day}`}>\n                                {t(`common:day_of_week_${day}`)}\n                            </option>\n                        ))}\n                    </Field>\n                    <Field\n                        name=\"class\"\n                        component={renderSelectField}\n                        label={t('formElements:class_free_rooms')}\n                        type=\"text\"\n                        className=\"freeRoomsItem\"\n                        validate={[required]}\n                    >\n                        <option value={''}></option>\n                        {class_names.map((classNum, index) => (\n                            <option key={index} value={`${classNum}`}>\n                                {classNum}\n                            </option>\n                        ))}\n                    </Field>\n                </div>\n                <div className=\"form-buttons-container freeRoomsButtons\">\n                    <Button\n                        variant=\"contained\"\n                        color=\"primary\"\n                        disabled={pristine || submitting}\n                        className=\"buttons-style\"\n                        type=\"submit\"\n                    >\n                        {t('formElements:submit_button_label')}\n                    </Button>\n                    <Button\n                        variant=\"contained\"\n                        disabled={pristine || submitting}\n                        className=\"buttons-style\"\n                        onClick={onReset}\n                    >\n                        {t('formElements:clear_button_label')}\n                    </Button>\n                </div>\n            </form>\n        </>\n    );\n};\n\nconst mapStateToProps = state => ({\n    freeRooms: state.freeRooms.freeRooms,\n    semesters: state.semesters.semesters\n});\n\nFreeRoomForm = reduxForm({\n    form: FREE_ROOMS\n})(FreeRoomForm);\n\nexport default connect(mapStateToProps)(FreeRoomForm);\n","import axios from '../helper/axios';\nimport { store } from '../index';\nimport { CLASS_URL, PUBLIC_CLASSES_URL } from '../constants/axios';\n\nimport { CLASS_FORM } from '../constants/reduxForms';\n\nimport {\n    addClassScheduleOne,\n    setClassScheduleList,\n    getClassScheduleOne,\n    deleteClassScheduleOne,\n    updateClassScheduleOne,\n    clearClassScheduleOne\n} from '../redux/actions/class';\n\nimport i18n from '../helper/i18n';\nimport { errorHandler, successHandler } from '../helper/handlerAxios';\nimport { resetFormHandler } from '../helper/formHelper';\nimport { setLoadingService } from './loadingService';\n\nexport const getClassScheduleListService = dispatch => {\n    axios\n        .get(CLASS_URL)\n        .then(response => {\n            let bufferArray = [];\n            const results = response.data;\n            for (const key in results) {\n                bufferArray.push({\n                    id: key,\n                    ...results[key]\n                });\n            }\n            store.dispatch(setClassScheduleList(bufferArray));\n            setLoadingService(false);\n        })\n        .catch(error => errorHandler(error));\n};\n\nexport const getPublicClassScheduleListService = dispatch => {\n    axios\n        .get(PUBLIC_CLASSES_URL)\n        .then(response => {\n            let bufferArray = [];\n            const results = response.data;\n            for (const key in results) {\n                bufferArray.push({\n                    id: key,\n                    ...results[key]\n                });\n            }\n            store.dispatch(setClassScheduleList(bufferArray));\n        })\n        .catch(error => {\n            errorHandler(error);\n            setLoadingService(false);\n        });\n};\n\nexport const addClassScheduleOneService = values => {\n    if (values.id) {\n        putAddClassScheduleOneService(values);\n    } else {\n        postAddClassScheduleOneService(values);\n    }\n};\n\nexport const putAddClassScheduleOneService = values => {\n    axios\n        .put(CLASS_URL, values)\n        .then(response => {\n            store.dispatch(updateClassScheduleOne(response.data));\n            resetFormHandler(CLASS_FORM);\n            successHandler(\n                i18n.t('serviceMessages:back_end_success_operation', {\n                    cardType: i18n.t('formElements:class_label'),\n                    actionType: i18n.t('serviceMessages:updated_label')\n                })\n            );\n        })\n        .catch(error => errorHandler(error));\n};\n\nexport const postAddClassScheduleOneService = values => {\n    axios\n        .post(CLASS_URL, values)\n        .then(response => {\n            store.dispatch(addClassScheduleOne(response.data));\n            resetFormHandler(CLASS_FORM);\n            successHandler(\n                i18n.t('serviceMessages:back_end_success_operation', {\n                    cardType: i18n.t('formElements:class_label'),\n                    actionType: i18n.t('serviceMessages:created_label')\n                })\n            );\n        })\n        .catch(error => errorHandler(error));\n};\n\nexport const getClassScheduleOneService = classId => {\n    store.dispatch(getClassScheduleOne(classId));\n};\n\nexport const deleteClassScheduleOneService = classId => {\n    axios\n        .delete(CLASS_URL + `/${classId}`)\n        .then(response => {\n            store.dispatch(deleteClassScheduleOne(classId));\n            successHandler(\n                i18n.t('serviceMessages:back_end_success_operation', {\n                    cardType: i18n.t('formElements:class_label'),\n                    actionType: i18n.t('serviceMessages:deleted_label')\n                })\n            );\n        })\n        .catch(error => errorHandler(error));\n};\n\nexport const clearClassScheduleOneService = () => {\n    store.dispatch(clearClassScheduleOne());\n    resetFormHandler(CLASS_FORM);\n};\n","import React, { useEffect, useState } from 'react';\nimport Card from '../../share/Card/Card';\nimport { connect } from 'react-redux';\n\nimport Dialog from '@material-ui/core/Dialog';\n\nimport FreeRoomForm from '../../components/FreeRoomForm/freeRoomForm';\nimport { GiCancel } from 'react-icons/gi';\nimport { useTranslation } from 'react-i18next';\nimport { clearFreeRoomsService } from '../../services/freeRoomsService';\nimport { getClassScheduleListService } from '../../services/classService';\nimport { showFreeRoomsService } from '../../services/freeRoomsService';\n\nimport './freeRooms.scss';\n\nconst FreeRooms = props => {\n    const { t } = useTranslation('formElements');\n\n    const [open, setOpen] = useState(false);\n\n    const { classScheduler } = props;\n\n    useEffect(() => getClassScheduleListService(), []);\n\n    const handleClickOpen = () => {\n        setOpen(true);\n    };\n\n    const handleClose = () => {\n        setOpen(false);\n    };\n\n    const handleFormReset = () => {\n        clearFreeRoomsService();\n    };\n\n    const submit = values => {\n        showFreeRoomsService(values);\n    };\n\n    return (\n        <>\n            <span className=\"navLinks\" onClick={handleClickOpen}>\n                {t('find_free_room')}\n            </span>\n\n            <Dialog\n                open={open}\n                onClose={handleClose}\n                maxWidth=\"lg\"\n                aria-labelledby=\"form-dialog-title\"\n            >\n                <div className=\"cards-container \">\n                    <aside className=\"free-rooms__panel\">\n                        <Card className=\"free-rooms-wrapper freeRoomCard\">\n                            <div className=\"freeRoomForms\">\n                                <h2 id=\"form-dialog-title\">\n                                    {t('find_free_room')}\n                                </h2>\n                                <FreeRoomForm\n                                    classScheduler={classScheduler}\n                                    onReset={handleFormReset}\n                                    onSubmit={submit}\n                                />\n                            </div>\n                        </Card>\n                    </aside>\n                    <section className=\"container-flex-wrap wrapper\">\n                        {props.freeRooms.map(freeRoom => (\n                            <Card key={freeRoom.id} className=\"container\">\n                                <div className=\"freeRoomCard\">\n                                    <span> {t('room_label') + ':'} </span>\n                                    <h2 className=\"room-card__number\">\n                                        {freeRoom.name}\n                                    </h2>\n                                    <span>{t('type_label') + ':'}</span>\n                                    <h2 className=\"room-card__number\">\n                                        {freeRoom.type.description}\n                                    </h2>\n                                </div>\n                            </Card>\n                        ))}\n                    </section>\n                </div>\n            </Dialog>\n        </>\n    );\n};\n\nconst mapStateToProps = state => ({\n    freeRooms: state.freeRooms.freeRooms\n});\n\nexport default connect(mapStateToProps)(FreeRooms);\n","import axios from '../helper/axios';\nimport { store } from '../index';\n\nimport { showFreeRooms, clearFreeRooms } from '../redux/actions/freeRooms';\nimport { FREE_ROOMS_URL } from '../constants/axios';\nimport { FREE_ROOMS } from '../constants/reduxForms';\n\nimport { errorHandler } from '../helper/handlerAxios';\nimport { resetFormHandler } from '../helper/formHelper';\n\nexport const showFreeRoomsService = elem => {\n    axios\n        .get(\n            FREE_ROOMS_URL +\n                '?dayOfWeek=' +\n                elem.dayOfWeek +\n                '&evenOdd=' +\n                elem.evenOdd +\n                '&classId=' +\n                elem.class +\n                '&semesterId=' +\n                elem.semesterId\n        )\n        .then(response => {\n            let bufferArray = [];\n            const results = response.data;\n            for (const key in results) {\n                bufferArray.push({\n                    id: key,\n                    ...results[key]\n                });\n            }\n            store.dispatch(showFreeRooms(bufferArray));\n        })\n        .catch(error => {\n            errorHandler(error);\n        });\n};\n\nexport const clearFreeRoomsService = () => {\n    store.dispatch(clearFreeRooms());\n    resetFormHandler(FREE_ROOMS);\n};\n","import * as actionsType from './actionsType';\n\nexport const showFreeRooms = freeRooms => {\n    return {\n        type: actionsType.SHOW_FREE_ROOMS,\n        result: freeRooms\n    };\n};\n\nexport const clearFreeRooms = () => ({\n    type: actionsType.CLEAR_FREE_ROOM\n});\n","import React, { useEffect, useState } from 'react';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport {\n    FaCaretDown,\n    FaClipboardList,\n    FaClock,\n    FaDoorOpen,\n    FaHome,\n    FaRunning,\n    FaSignOutAlt,\n    FaUser\n} from 'react-icons/fa';\nimport Menu from '@material-ui/core/Menu';\nimport Button from '@material-ui/core/Button';\nimport { useTranslation } from 'react-i18next';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport { withStyles } from '@material-ui/core/styles';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\n\nimport '../../App.scss';\nimport './Header.scss';\nimport { links } from '../../constants/links';\n\nimport LanguageSelector from '../LanguageSelector/LanguageSelector';\nimport * as colors from '../../constants/schedule/colors';\n\nimport { getCurrentSemesterService } from '../../services/scheduleService';\n\nimport FreeRooms from '../../containers/FreeRooms/freeRooms';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport { setSemesterLoadingService } from '../../services/loadingService';\n\nconst StyledMenu = withStyles({\n    paper: {\n        border: `1px solid ${colors.colors.BORDER}`\n    }\n})(props => (\n    <Menu\n        elevation={0}\n        getContentAnchorEl={null}\n        anchorOrigin={{\n            vertical: 'bottom',\n            horizontal: 'center'\n        }}\n        transformOrigin={{\n            vertical: 'bottom',\n            horizontal: 'center'\n        }}\n        {...props}\n    />\n));\n\nconst StyledMenuItem = withStyles(theme => ({\n    root: {\n        '&:focus': {\n            backgroundColor: theme.palette.primary.main,\n            color: theme.palette.common.white\n        }\n    }\n}))(MenuItem);\n\nconst Header = props => {\n    const [anchorEl, setAnchorEl] = React.useState(null);\n    const handleClick = event => setAnchorEl(event.currentTarget);\n    const handleClose = () => setAnchorEl(null);\n\n    const [anchorElUser, setAnchorElUser] = React.useState(null);\n    const handleClickUserMenu = event => setAnchorElUser(event.currentTarget);\n    const handleCloseUserMenu = () => setAnchorElUser(null);\n\n    const { t } = useTranslation('common');\n    const [teacher, setTeacher] = useState(0);\n\n    useEffect(() => {\n        if (props.userRole === roles.MANAGER) {\n            setSemesterLoadingService(true);\n            getCurrentSemesterService();\n        }\n    }, [props.userRole]);\n\n\n    const getUserMenu = userRole => {\n        let userMenu = null;\n        if (userRole === null || userRole === undefined) {\n            return (\n                <Link to={links.LOGIN} className='navLinks'>\n                    {t('login_title')}\n                </Link>\n            );\n        }\n        switch (userRole) {\n            case roles.MANAGER:\n                userMenu = (\n                    <div className='user-menu'>\n                        <Button\n                            aria-controls='customized-menu'\n                            aria-haspopup='true'\n                            variant='contained'\n                            color='primary'\n                            onClick={handleClickUserMenu}\n                        >\n                            {localStorage.getItem('email')}\n                            <ListItemIcon>\n                                <FaCaretDown fontSize='normall' />\n                            </ListItemIcon>\n                        </Button>\n                        <StyledMenu\n                            id='customized-menu'\n                            anchorEl={anchorElUser}\n                            keepMounted\n                            open={Boolean(anchorElUser)}\n                            onClose={handleCloseUserMenu}\n                        >\n                            <Link\n                                to={links.ADMIN_PAGE}\n                                className='navLinks'\n                                style={{ textDecoration: 'none' }}\n                                onClick={handleCloseUserMenu}\n                            >\n                                <StyledMenuItem>\n                                    <ListItemIcon>\n                                        <FaUser fontSize='normall' />\n                                    </ListItemIcon>\n                                    {t('admin_title')}\n                                </StyledMenuItem>\n                            </Link>\n                            <Link\n                                to={links.SCHEDULE_PAGE}\n                                className='navLinks'\n                                style={{ textDecoration: 'none' }}\n                                onClick={handleCloseUserMenu}\n                            >\n                                <StyledMenuItem>\n                                    <ListItemIcon>\n                                        <FaClock fontSize='normal' />\n                                    </ListItemIcon>\n                                    {t('schedule_title')}\n                                </StyledMenuItem>\n                            </Link>\n                            <span\n                                className='navLinks'\n                                style={{ textDecoration: 'none' }}\n                                onClick={handleCloseUserMenu}\n                            >\n                                <StyledMenuItem>\n                                    <ListItemIcon>\n                                        <FaDoorOpen fontSize='normal' />\n                                    </ListItemIcon>\n                                    <FreeRooms\n                                        classScheduler={props.classScheduler}\n                                    />\n                                </StyledMenuItem>\n                            </span>\n                            <Link\n                                to={links.MY_PROFILE}\n                                className='navLinks'\n                                style={{ textDecoration: 'none' }}\n                                onClick={handleCloseUserMenu}\n                            >\n                                <StyledMenuItem>\n                                    <ListItemIcon>\n                                        <FaUser fontSize='normal' />\n                                    </ListItemIcon>\n                                    {t('my_profile')}\n                                </StyledMenuItem>\n                            </Link>\n                            <Link\n                                to={links.LOGOUT}\n                                className='navLinks'\n                                style={{ textDecoration: 'none' }}\n                                onClick={handleCloseUserMenu}\n                            >\n                                <StyledMenuItem>\n                                    <ListItemIcon>\n                                        <FaSignOutAlt fontSize='normal' />\n                                    </ListItemIcon>\n                                    {t('logout_title')}\n                                </StyledMenuItem>\n                            </Link>\n                        </StyledMenu>\n                    </div>\n                );\n                break;\n            case roles.TEACHER:\n                userMenu = (\n                    <div className='user-menu'>\n                        <Button\n                            aria-controls='customized-menu'\n                            aria-haspopup='true'\n                            variant='contained'\n                            color='primary'\n                            onClick={handleClickUserMenu}\n                        >\n                            {localStorage.getItem('email')}\n                            <ListItemIcon>\n                                <FaCaretDown fontSize='normal' />\n                            </ListItemIcon>\n                        </Button>\n                        <StyledMenu\n                            id='customized-menu'\n                            anchorEl={anchorElUser}\n                            keepMounted\n                            open={Boolean(anchorElUser)}\n                            onClose={handleCloseUserMenu}\n                        >\n                            <Link\n                                to={links.TEACHER_SCHEDULE}\n                                className='navLinks'\n                                style={{ textDecoration: 'none' }}\n                                onClick={handleCloseUserMenu}\n                            >\n                                <StyledMenuItem>\n                                    <ListItemIcon>\n                                        <FaClock fontSize='normal' />\n                                    </ListItemIcon>\n                                    {t('schedule_title')}\n                                </StyledMenuItem>\n                            </Link>\n                            <span\n                                className='navLinks'\n                                style={{ textDecoration: 'none' }}\n                                onClick={() => {\n\n                                    handleCloseUserMenu();\n                                }}\n                            >\n\n                            </span>\n                            <Link\n                                to={links.MY_PROFILE}\n                                className='navLinks'\n                                style={{ textDecoration: 'none' }}\n                                onClick={handleCloseUserMenu}\n                            >\n                                <StyledMenuItem>\n                                    <ListItemIcon>\n                                        <FaUser fontSize='normal' />\n                                    </ListItemIcon>\n                                    {t('my_profile')}\n                                </StyledMenuItem>\n                            </Link>\n                            <Link\n                                to={links.LOGOUT}\n                                className='navLinks'\n                                style={{ textDecoration: 'none' }}\n                                onClick={handleCloseUserMenu}\n                            >\n                                <StyledMenuItem>\n                                    <ListItemIcon>\n                                        <FaSignOutAlt fontSize='normal' />\n                                    </ListItemIcon>\n                                    {t('logout_title')}\n                                </StyledMenuItem>\n                            </Link>\n                        </StyledMenu>\n                    </div>\n                );\n                break;\n            default:\n                userMenu = (\n                    <div className='user-menu'>\n                        <Button\n                            aria-controls='customized-menu'\n                            aria-haspopup='true'\n                            variant='contained'\n                            color='primary'\n                            onClick={handleClickUserMenu}\n                        >\n                            {localStorage.getItem('email')}\n                        </Button>\n                        <StyledMenu\n                            id='customized-menu'\n                            anchorEl={anchorElUser}\n                            keepMounted\n                            open={Boolean(anchorElUser)}\n                            onClose={handleCloseUserMenu}\n                        >\n                            <Link\n                                to={links.LOGOUT}\n                                className='navLinks'\n                                style={{ textDecoration: 'none' }}\n                                onClick={handleCloseUserMenu}\n                            >\n                                <StyledMenuItem>\n                                    <ListItemIcon>\n                                        <FaSignOutAlt fontSize='normal' />\n                                    </ListItemIcon>\n                                    {t('logout_title')}\n                                </StyledMenuItem>\n                            </Link>\n                        </StyledMenu>\n                    </div>\n                );\n        }\n        return userMenu;\n    };\n\n    const roles = props.roles;\n\n    let leftLinks = null;\n    let menu = null;\n    let userMenu = getUserMenu(props.userRole);\n    if (props.userRole === roles.MANAGER) {\n        leftLinks = (\n            <>\n                {props.loading ? (\n                    <span className='navLinks nav-semester'>\n                        <CircularProgress size={20} />\n                    </span>\n                ) : (\n                    <span className='navLinks nav-semester'>\n                        {t('semester_title')}:{' '}\n                        {props.currentSemester.description}\n                    </span>\n                )}\n            </>\n        );\n        menu = (\n            <div className='menu'>\n                <Button\n                    aria-controls='customized-menu'\n                    aria-haspopup='true'\n                    variant='contained'\n                    color='primary'\n                    onClick={handleClick}\n                >\n                    {t('menu_button')}\n                </Button>\n\n                <StyledMenu\n                    id='customized-menu'\n                    anchorEl={anchorEl}\n                    keepMounted\n                    open={Boolean(anchorEl)}\n                    onClose={handleClose}\n                >\n                    <span className='navLinks menu-semester'>\n                        {props.currentSemester.description}\n                    </span>\n                    <Link\n                        to={links.HOME_PAGE}\n                        className='navLinks'\n                        style={{ textDecoration: 'none' }}\n                        onClick={handleClose}\n                    >\n                        <StyledMenuItem>\n                            <ListItemIcon>\n                                <FaHome fontSize='normall' />\n                            </ListItemIcon>\n                            {t('home_title')}\n                        </StyledMenuItem>\n                    </Link>\n\n                    <Link\n                        to={links.SCHEDULE_PAGE}\n                        className='navLinks'\n                        style={{ textDecoration: 'none' }}\n                        onClick={handleClose}\n                    >\n                        <StyledMenuItem>\n                            <ListItemIcon>\n                                <FaClock fontSize='normall' />\n                            </ListItemIcon>\n                            {t('schedule_title')}\n                        </StyledMenuItem>\n                    </Link>\n\n                    <Link\n                        to={links.ADMIN_PAGE}\n                        className='navLinks'\n                        style={{ textDecoration: 'none' }}\n                        onClick={handleClose}\n                    >\n                        <StyledMenuItem>\n                            <ListItemIcon>\n                                <FaUser fontSize='normall' />\n                            </ListItemIcon>\n                            {t('admin_title')}\n                        </StyledMenuItem>\n                    </Link>\n\n                    <span\n                        className='navLinks'\n                        style={{ textDecoration: 'none' }}\n                        onClick={handleClose}\n                    >\n                        <StyledMenuItem>\n                            <ListItemIcon>\n                                <FaDoorOpen fontSize='normall' />\n                            </ListItemIcon>\n                            <FreeRooms classScheduler={props.classScheduler} />\n                        </StyledMenuItem>\n                    </span>\n\n                    <Link\n                        to={links.LOGOUT}\n                        className='navLinks'\n                        style={{ textDecoration: 'none' }}\n                        onClick={handleClose}\n                    >\n                        <StyledMenuItem>\n                            <ListItemIcon>\n                                <FaSignOutAlt fontSize='normall' />\n                            </ListItemIcon>\n                            {t('logout_title')}\n                        </StyledMenuItem>\n                    </Link>\n                </StyledMenu>\n            </div>\n        );\n    } else if (props.userRole === roles.TEACHER) {\n        menu = (\n            <div className='menu'>\n                <Button\n                    aria-controls='customized-menu'\n                    aria-haspopup='true'\n                    variant='contained'\n                    color='primary'\n                    onClick={handleClick}\n                >\n                    {t('menu_button')}\n                </Button>\n\n                <StyledMenu\n                    id='customized-menu'\n                    anchorEl={anchorEl}\n                    keepMounted\n                    open={Boolean(anchorEl)}\n                    onClose={handleClose}\n                >\n                    <Link\n                        to={links.HOME_PAGE}\n                        className='navLinks'\n                        style={{ textDecoration: 'none' }}\n                        onClick={handleClose}\n                    >\n                        <StyledMenuItem>\n                            <ListItemIcon>\n                                <FaHome fontSize='normall' />\n                            </ListItemIcon>\n                            {t('home_title')}\n                        </StyledMenuItem>\n                    </Link>\n                    <StyledMenuItem>\n                        <ListItemIcon>\n                            <FaClipboardList fontSize='normall' />\n                        </ListItemIcon>\n\n                    </StyledMenuItem>\n\n                    <Link\n                        to={links.TEACHER_SCHEDULE}\n                        className='navLinks'\n                        style={{ textDecoration: 'none' }}\n                        onClick={handleClose}\n                    >\n                        <StyledMenuItem>\n                            <ListItemIcon>\n                                <FaClock fontSize='normall' />\n                            </ListItemIcon>\n                            {t('schedule_title')}\n                        </StyledMenuItem>\n                    </Link>\n\n                    <Link\n                        to={links.LOGOUT}\n                        className='navLinks'\n                        style={{ textDecoration: 'none' }}\n                        onClick={handleClose}\n                    >\n                        <StyledMenuItem>\n                            <ListItemIcon>\n                                <FaSignOutAlt fontSize='normall' />\n                            </ListItemIcon>\n                            {t('logout_title')}\n                        </StyledMenuItem>\n                    </Link>\n                </StyledMenu>\n            </div>\n        );\n    } else if (props.userRole === null || props.userRole === undefined) {\n        menu = (\n            <div className='menu'>\n                <Button\n                    aria-controls='customized-menu'\n                    aria-haspopup='true'\n                    variant='contained'\n                    color='primary'\n                    onClick={handleClick}\n                >\n                    {t('menu_button')}\n                </Button>\n                <StyledMenu\n                    id='customized-menu'\n                    anchorEl={anchorEl}\n                    keepMounted\n                    open={Boolean(anchorEl)}\n                    onClose={handleClose}\n                >\n                    <Link\n                        to={links.HOME_PAGE}\n                        className='navLinks'\n                        style={{ textDecoration: 'none' }}\n                        onClick={() => {\n                            setAnchorEl(null);\n                        }}\n\n                    >\n                        <StyledMenuItem>\n\n                            <ListItemIcon>\n                                <FaHome fontSize='normall' />\n                            </ListItemIcon>\n                            {t('home_title')}\n                        </StyledMenuItem>\n                    </Link>\n                    <Link\n                        to={links.LOGIN}\n                        className='navLinks'\n                        style={{ textDecoration: 'none' }}\n                        onClick={handleClose}\n                    >\n                        <StyledMenuItem>\n                            <ListItemIcon>\n                                <FaRunning fontSize='normall' />\n                            </ListItemIcon>\n                            {t('login_title')}\n                        </StyledMenuItem>\n                    </Link>\n                </StyledMenu>\n            </div>\n        );\n    }\n\n    return (\n        <>\n\n            <header className='header'>\n                {menu}\n                <nav className='header-blocks header-blocks_one'>\n                    <Link to={links.HOME_PAGE} className='navLinks'>\n\n                        {t('home_title')}\n                    </Link>\n                    {leftLinks}\n                </nav>\n                <nav className='header-blocks header-blocks_two'>\n                    {userMenu}\n                </nav>\n                <nav className='header-blocks header-blocks_three'>\n                    <LanguageSelector />\n                </nav>\n            </header>\n        </>\n    );\n};\n\nconst mapStateToProps = state => ({\n    classScheduler: state.classActions.classScheduler,\n    currentSemester: state.schedule.currentSemester,\n    loading: state.loadingIndicator.semesterLoading\n});\n\nexport default connect(mapStateToProps, {})(Header);\n","export const userRoles = {\n    USER: 'ROLE_USER',\n    MANAGER: 'ROLE_MANAGER',\n    TEACHER: 'ROLE_TEACHER'\n};\n","import { daysUppercase } from '../constants/schedule/days';\n\nexport const makeGroupSchedule = groupSchedule => {\n    let evenArray = [];\n    let oddArray = [];\n    let group = {};\n    let done = false;\n\n    const evenDaysPrepArray = [\n        { day: 'MONDAY', class: [] },\n        { day: 'TUESDAY', class: [] },\n        { day: 'WEDNESDAY', class: [] },\n        { day: 'THURSDAY', class: [] },\n        { day: 'FRIDAY', class: [] },\n        { day: 'SATURDAY', class: [] },\n        { day: 'SUNDAY', class: [] }\n    ];\n    const oddDaysPrepArray = [\n        { day: 'MONDAY', class: [] },\n        { day: 'TUESDAY', class: [] },\n        { day: 'WEDNESDAY', class: [] },\n        { day: 'THURSDAY', class: [] },\n        { day: 'FRIDAY', class: [] },\n        { day: 'SATURDAY', class: [] },\n        { day: 'SUNDAY', class: [] }\n    ];\n\n    if (groupSchedule.schedule && groupSchedule.schedule.length > 0) {\n        group = groupSchedule.schedule[0].group;\n        groupSchedule.schedule[0].days.map(day => {\n            day.classes.map(classItem => {\n                evenDaysPrepArray.map(evenDayPrep => {\n                    if (evenDayPrep.day === day.day) {\n                        evenDayPrep.class[classItem.class.id] = {\n                            class: classItem.class,\n                            card: classItem.weeks.even\n                        };\n                    }\n                });\n\n                oddDaysPrepArray.map(oddDayPrep => {\n                    if (oddDayPrep.day === day.day) {\n                        oddDayPrep.class[classItem.class.id] = {\n                            class: classItem.class,\n                            card: classItem.weeks.odd\n                        };\n                    }\n                });\n            });\n        });\n    }\n\n    oddDaysPrepArray.map(oddDay => {\n        oddDay.class.map((oddClas, clasIndex) => {\n            if (!oddArray.hasOwnProperty(clasIndex)) {\n                oddArray[clasIndex] = { class: oddClas.class, cards: {} };\n            }\n\n            daysUppercase.map(dayArr => {\n                if (!oddArray[clasIndex].cards.hasOwnProperty(dayArr)) {\n                    oddArray[clasIndex].cards[dayArr] = {};\n                }\n            });\n            if (oddClas.card !== null && oddClas.card !== undefined) {\n                // if (oddClas.card.hasOwnProperty('teacherForSite')) {\n                if (oddClas.card.hasOwnProperty('teacher')) {\n                    oddArray[clasIndex].cards[oddDay.day] = {\n                        card: oddClas.card\n                    };\n                }\n            }\n        });\n    });\n\n    evenDaysPrepArray.map(evenDay => {\n        evenDay.class.map((evenClas, clasIndex) => {\n            if (!evenArray.hasOwnProperty(clasIndex)) {\n                evenArray[clasIndex] = { class: evenClas.class, cards: {} };\n            }\n\n            daysUppercase.map(dayArr => {\n                if (!evenArray[clasIndex].cards.hasOwnProperty(dayArr)) {\n                    evenArray[clasIndex].cards[dayArr] = {};\n                }\n            });\n            if (evenClas.card !== null && evenClas.card !== undefined) {\n                // if (evenClas.card.hasOwnProperty('teacherForSite')) {\n                if (evenClas.card.hasOwnProperty('teacher')) {\n                    evenArray[clasIndex].cards[evenDay.day] = {\n                        card: evenClas.card\n                    };\n                }\n            }\n        });\n    });\n    done = true;\n    return {\n        semester: groupSchedule.semester,\n        oddArray,\n        evenArray,\n        group,\n        done\n    };\n};\n\nexport const makeFullSchedule = fullSchedule => {\n    let groupsCount = 0;\n    let groupList = [];\n    let groupListId = new Map([]);\n    let daysPrepArrayFull = [];\n    let done = false;\n    let semester_days = [];\n    let semester_classes = [];\n\n    if (fullSchedule.schedule) {\n        groupsCount = fullSchedule.schedule.length;\n        semester_days = fullSchedule.semester.semester_days;\n        semester_classes = fullSchedule.semester.semester_classes;\n\n        fullSchedule.schedule.map(group => {\n            groupList.push(group.group);\n            groupListId.set(group.group.id, {});\n        });\n        groupList = groupList.sort((a, b) =>\n            a.title > b.title ? 1 : b.title > a.title ? -1 : 0\n        );\n\n        fullSchedule.semester.semester_days.map(day => {\n            let prep_schedule_array = [];\n            fullSchedule.semester.semester_classes.map(classItem => {\n                const oddArray = [];\n                const evenArray = [];\n                groupList.forEach((groupItem, groupIndex) => {\n                    const groupFull = fullSchedule.schedule.find(\n                        groupFullIterate =>\n                            groupFullIterate.group.id === groupItem.id\n                    );\n                    const dayFull = groupFull.days.find(\n                        dayFullIterate => dayFullIterate.day === day\n                    );\n                    const classFull = dayFull.classes.find(\n                        dayFullIterable =>\n                            dayFullIterable.class.id === classItem.id\n                    );\n                    oddArray.push({\n                        group: groupItem,\n                        card: classFull.weeks.odd\n                    });\n                    evenArray.push({\n                        group: groupItem,\n                        card: classFull.weeks.even\n                    });\n                });\n                prep_schedule_array.push({\n                    class: classItem,\n                    cards: { odd: oddArray, even: evenArray }\n                });\n            });\n            daysPrepArrayFull.push({ day, classes: prep_schedule_array });\n        });\n        done = true;\n    }\n\n    return {\n        semester: fullSchedule.semester,\n        schedule: fullSchedule.schedule,\n        semester_classes,\n        semester_days,\n        groupsCount: groupsCount,\n        groupList: groupList,\n        resultArray: daysPrepArrayFull,\n        done\n    };\n};\n\nexport const makeTeacherSchedule = teacherSchedule => {\n    let teacher = {};\n    let evenArray = [];\n    let oddArray = [];\n    let oddDays = [];\n    let evenDays = [];\n    let oddClasses = [];\n    let evenClasses = [];\n    let done = false;\n\n    if (teacherSchedule && teacherSchedule.days) {\n        teacher = teacherSchedule.teacher;\n\n        teacherSchedule.days.map(dayTeacher => {\n            dayTeacher.odd.classes.map(clas => {\n                if (\n                    oddClasses.findIndex(\n                        oddClass => oddClass.id === clas.class.id\n                    ) < 0\n                ) {\n                    oddClasses.push(clas.class);\n                }\n                if (oddDays.indexOf(dayTeacher.day) < 0) {\n                    oddDays.push(dayTeacher.day);\n                }\n                if (!(clas.class.id in oddArray)) {\n                    oddArray[clas.class.id] = [];\n                }\n\n                oddArray[clas.class.id].push({\n                    day: dayTeacher.day,\n                    cards: clas.lessons\n                });\n            });\n\n            dayTeacher.even.classes.map(clas => {\n                if (\n                    evenClasses.findIndex(\n                        evenClass => evenClass.id === clas.class.id\n                    ) < 0\n                ) {\n                    evenClasses.push(clas.class);\n                }\n                if (evenDays.indexOf(dayTeacher.day) < 0) {\n                    evenDays.push(dayTeacher.day);\n                }\n                if (!(clas.class.id in evenArray)) {\n                    evenArray[clas.class.id] = [];\n                }\n\n                evenArray[clas.class.id].push({\n                    day: dayTeacher.day,\n                    cards: clas.lessons\n                });\n            });\n        });\n        done = true;\n    }\n\n\n    return {\n        done,\n        teacher,\n        semester: teacherSchedule.semester,\n        odd: {\n            days: oddDays,\n            classes: oddClasses.sort((a, b) =>\n                a.startTime > b.startTime\n                    ? 1\n                    : b.startTime > a.startTime\n                    ? -1\n                    : 0\n            ),\n            cards: oddArray\n        },\n        even: {\n            days: evenDays,\n            classes: evenClasses.sort((a, b) =>\n                a.startTime > b.startTime\n                    ? 1\n                    : b.startTime > a.startTime\n                    ? -1\n                    : 0\n            ),\n            cards: evenArray\n        }\n    };\n};\n","export const disabledCard = {\n    SHOW: 'show',\n    HIDE: 'hide'\n};\n","import React from 'react';\n\nimport PropTypes from 'prop-types';\n\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport Dialog from '@material-ui/core/Dialog';\nimport Button from '@material-ui/core/Button';\n\nimport './modal.scss';\n\nimport i18n from 'i18next';\nimport { disabledCard } from '../../../constants/disabledCard';\nimport './linkToMeetingDialog.scss'\nexport const LinkToMeetingDialog = props => {\n    const { onClose, cardId, isHide, open,linkToMeeting} = props;\n\n    const handleClose = () => {\n        onClose(cardId);\n    };\n\n    return (\n        <Dialog id=\"my-dialog\"\n\n            disableBackdropClick={true}\n            onClose={handleClose}\n            aria-labelledby=\"confirm-dialog-title\"\n            open={open}\n        >\n            <DialogTitle id=\"confirm-dialog-title\" className=\"confirm-dialog\">\n                <>\n                    {isHide ? (\n                        <>\n                            {isHide === disabledCard.HIDE ? (\n                                <>{i18n.t('common:do_you_wanna_disable')}</>\n                            ) : (\n                                <>{i18n.t('common:do_you_wanna_show')}</>\n                            )}\n                        </>\n                    ) : (\n                        <>\n                            {i18n.t('common:do_you_wanna')}{' '}\n                            <span>\n                                <a className=\"go-to-meeting\" href={linkToMeeting} target=\"_blank\" title={linkToMeeting}>\n                                    {i18n.t(`common:go_to_meeting_word`)}\n                                </a>\n                            </span>{' '}\n                        </>\n                    )}\n\n                    {i18n.t('common:by_this_card_type', {\n                        cardType: i18n.t(`formElements:reference_element`)\n                    })}\n                </>\n            </DialogTitle>\n            <div className=\"buttons-container\">\n                <Button\n                    className=\"dialog-button\"\n                    variant=\"contained\"\n                    color=\"primary\"\n                    onClick={() => onClose(cardId)}\n                >\n                    {i18n.t('common:yes_button_title')}\n                </Button>\n                <Button\n                    className=\"dialog-button\"\n                    variant=\"contained\"\n                    onClick={() => onClose('')}\n                >\n                    {i18n.t('common:no_button_title')}\n                </Button>\n            </div>\n        </Dialog>\n    );\n};\n\nLinkToMeetingDialog.propTypes = {\n    onClose: PropTypes.func.isRequired,\n    open: PropTypes.bool.isRequired\n};\n\nexport default LinkToMeetingDialog;\n","import React, { useState } from 'react';\nimport { IoMdLink } from 'react-icons/all';\nimport LinkToMeetingDialog from '../../share/modals/modal/linkToMeetingDialog';\nimport './LinkToMeeting.scss'\nconst LinkToMeeting=(props)=>{\n   const {linkToMeeting}=props;\n   const [openDialog,setOpenDialog]=useState(false);\n   const openWindowByUrl=(url)=>{\n      let win = window.open(linkToMeeting, '_blank');\n       win.focus();\n   }\n    const handleClose = semesterId => {\n        setOpenDialog(false);\n        if (semesterId !== '') {\n           openWindowByUrl(linkToMeeting);\n        }\n    };\n\n    return (<>\n                    <IoMdLink\n                        color={\"blue\"}\n                        className=\"svg-btn copy-btn link\"\n                        onClick={() => {\n                            setOpenDialog(true);\n                        }}\n                        title={linkToMeeting}\n\n                    />\n                <LinkToMeetingDialog\n                    cardId={1}\n                    isHide={false}\n                    open={openDialog}\n                    onClose={handleClose}\n                    linkToMeeting={linkToMeeting}\n                />\n                </>\n           )\n\n}\nexport {LinkToMeeting}","export const places={\n    TOGETHER:\"auditory+online\",\n    AUDITORY:\"auditory\",\n    ONLINE:\"online\"\n}","const parseShortPosition = (position) => {\n    const teacherPosition = new Map();\n    teacherPosition.set('доцент', 'доц.');\n    teacherPosition.set('асистент', 'ac.');\n    teacherPosition.set('професор', 'проф.');\n    return teacherPosition.get(position);\n\n};\nexport const getFirstLetter = (word) => {\n    return word !== null ? `${word.charAt(0)}.` : '';\n};\nexport const getTeacherName = (teacher) => {\n    const { name, surname, patronymic } = teacher;\n    return `${surname} ${getFirstLetter(name)} ${getFirstLetter(patronymic)}`;\n\n};\nexport const getTeacherFullName = (teacher) => {\n    const { name, surname, patronymic } = teacher;\n    return `${surname} ${name} ${patronymic}`;\n\n};\nexport const getTeacherForSite = (teacher) => {\n    const { name, surname, patronymic, position } = teacher;\n    return `${position} ${surname} ${getFirstLetter(name)} ${getFirstLetter(patronymic)}\\n`;\n\n};\nexport const handleTeacherInfo = (teacher) => {\n    const { name, surname, patronymic, position } = teacher;\n    return `${surname} ${name} ${patronymic} (${position})`;\n};\nexport const getTeacherWithPosition = (teacher) => {\n    const { name, surname, patronymic, position } = teacher;\n    return `${position} ${surname} ${name} ${patronymic}`;\n};\nexport const getTeacherShortPosition = (teacher) => {\n    const { name, surname, patronymic, position } = teacher;\n    return `${parseShortPosition(position)} ${surname} ${getFirstLetter(name)} ${getFirstLetter(patronymic)}\\n`;\n\n};\nexport const getTeacherWithShortPosition = (teacher) => {\n    const { name, surname, patronymic, position } = teacher;\n    return `${parseShortPosition(position)} ${surname} ${name} ${patronymic}`;\n};\n","import React from 'react';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableRow from '@material-ui/core/TableRow';\n\nimport Card from '../share/Card/Card';\n\nimport i18next from './i18n';\n\nimport { daysUppercase } from '../constants/schedule/days';\nimport { LinkToMeeting } from '../components/LinkToMeeting/LinkToMeeting';\nimport { places } from '../constants/places';\nimport i18n from 'i18next';\nimport './renderScheduleTable.scss';\nimport {\n    getTeacherForSite,\n    getTeacherFullName,\n    getTeacherShortPosition,\n    getTeacherWithPosition, getTeacherWithShortPosition\n} from './renderTeacher';\n\nconst shortid = require('shortid');\n\nconst matchDayNumberSysytemToDayName = () => {\n    let now = new Date();\n    return daysUppercase[now.getDay() - 1];\n};\nconst currentDay = matchDayNumberSysytemToDayName();\nconst setLink = (card, place) => {\n    if (place === places.TOGETHER) {\n        return <LinkToMeeting {...card} />;\n    } else if (place === places.ONLINE) {\n        return getHref(card.linkToMeeting);\n    }\n    return null;\n};\n\nconst getWeekNumber = (startScheduleDate, date) => {\n    const parsed = Array.from(startScheduleDate);\n\n    const startDay = new Date(\n        parsed[3] +\n        parsed[4] +\n        parsed[5] +\n        parsed[0] +\n        parsed[1] +\n        parsed[2] +\n        parsed[6] +\n        parsed[7] +\n        parsed[8] +\n        parsed[9]\n    );\n\n    const numberOfDays = Math.floor((date - startDay) / (24 * 60 * 60 * 1000));\n    return Math.ceil((date.getDay() + 1 + numberOfDays) / 7);\n};\nconst printWeekNumber = startScheduleDate => {\n    let date = new Date();\n    let result = getWeekNumber(startScheduleDate, date);\n    return result;\n};\n\nfunction isOddFunction(num) {\n    return num % 2;\n}\n\nlet currentWeekType = 0;\n\nconst renderClassCell = classItem => {\n    return (classItem.class_name +\n        '\\n\\r\\n\\r' +\n        classItem.startTime +\n        ' - ' +\n        classItem.endTime);\n};\n\nexport const prepareLessonCardCell = card => {\n    let inner = '';\n    if (card !== undefined && card !== null) {\n        inner = getTeacherWithShortPosition(card.teacher) + '\\n' + card.subjectForSite + '\\n';\n    }\n    return inner;\n};\nexport const prepareLessonSubCardCell = (card, place) => {\n    const room = place !== places.ONLINE ? card.room : '';\n    let inner = '';\n    if (card !== undefined && card !== null) {\n        inner =\n            i18next.t(\n                `formElements:lesson_type_${card.lessonType.toLowerCase()}_label`\n            );\n        if (room !== '') {\n            inner = `(${inner}, ${card.room.name})`;\n        }\n    }\n    return inner;\n};\nconst getHref = (link) => {\n    return (<a title={link} className='link-to-meeting' href={link}\n               target='_blank'>{i18n.t(`common:link_to_meeting_word`)}</a>);\n};\n\nexport const prepareLessonTemporaryCardCell = (card, place, day) => {\n    let inner = '';\n    if (card !== undefined && card !== null) {\n        if (card.temporary_schedule) {\n            if (card.temporary_schedule.vacation === true) {\n                inner +=\n                    card.temporary_schedule.date +\n                    '\\n\\r' +\n                    i18next.t(`common:vacation_label`);\n            } else {\n                inner +=\n                    card.temporary_schedule.date +\n                    '\\n\\r' +\n                    getTeacherForSite(card.temporary_schedule) +\n                    '\\n' +\n                    card.temporary_schedule.subjectForSite;\n                if (card.temporary_schedule.room) {\n                    inner += ', ' + card.temporary_schedule.room.name + ' )';\n                }\n            }\n            let title =\n                i18next.t(`common:regular_lesson_label`) +\n                '\\r' +\n                prepareLessonCardCell(card, place) +\n                '\\r' +\n                prepareLessonSubCardCell(card, place) +\n                '\\r';\n\n            return inner.length > 0 ? (\n                <>\n                    <p className='temporary-class' title={title}>\n                        {inner}\n                    </p>\n                    {card.linkToMeeting && setLink(card, place)}\n                </>\n\n            ) : (\n                ''\n            );\n        } else {\n            let title = i18next.t(`common:day_of_week_${day}`);\n            return (\n                <>\n                    <p title={title}>{prepareLessonCardCell(card, place)}</p>\n                    <p>{prepareLessonSubCardCell(card, place)}</p>\n                    {card.linkToMeeting && setLink(card, place)}\n                </>\n            );\n        }\n    } else {\n        return '';\n    }\n};\n\nexport const prepareTeacherCardCell = card => {\n    let inner = '';\n    if (card !== undefined && card !== null) {\n        inner = card.subjectForSite;\n    }\n    return inner;\n};\n\nexport const prepareTeacherCardRegularCell = (card, place) => {\n    let inner = buildLessonWithRoom(card, place);\n    inner += '\\n' +\n        card.group.title + '\\n';\n    return inner;\n\n};\n\nexport const buildLessonWithRoom = (card, place) => {\n    const room = place !== places.ONLINE ? card.room : '';\n    let inner = '';\n    inner += prepareTeacherCardCell(card) +\n        '\\n';\n\n    if (room !== '') {\n        inner += `(${i18next.t(\n            `formElements:lesson_type_${card.lessonType.toLowerCase()}_label`\n        )} ,${card.room})\\n`;\n    } else {\n        inner += i18next.t(\n            `formElements:lesson_type_${card.lessonType.toLowerCase()}_label`\n        ) + '\\n';\n    }\n    return inner;\n\n\n};\nexport const buildGroupNumber = card => {\n\n    return card.group.title + '\\n';\n};\n\nexport const prepareTeacherTemporaryCardCell = (cards, place) => {\n\n    let inner = '';\n    let title = '';\n    if (!cards) {\n        return '';\n    }\n\n    if (cards.length === 1) {\n        if (cards[0] === undefined || cards[0] === null) {\n            return '';\n        }\n        const card = cards[0];\n\n        if (!card.temporary_schedule) {\n            return <>\n                {prepareTeacherCardRegularCell(card, place)}\n                {card.linkToMeeting && setLink(card, place)}\n            </>;\n\n        }\n        if (card.temporary_schedule.vacation === true) {\n            inner +=\n                card.temporary_schedule.date +\n                '\\n' +\n                i18next.t(`common:vacation_label`);\n        } else {\n\n            inner +=\n                card.temporary_schedule.date +\n                '\\n';\n            if (card.temporary_schedule.room) {\n                inner += `(${card.temporary_schedule.subjectForSite}, ${card.temporary_schedule.room.name})\\n`;\n            } else {\n                inner += card.temporary_schedule.subjectForSite + '\\n';\n            }\n        }\n        title =\n            i18next.t(`common:regular_lesson_label`) +\n            '\\r' +\n            prepareTeacherCardRegularCell(card, place);\n        return inner.length > 0 ? (\n            <p className='temporary-class' title={title}>\n                {inner}\n                {card.linkToMeeting && setLink(card, place)}\n            </p>\n        ) : (\n            ''\n        );\n    }\n    let card = cards[0];\n\n    inner += buildLessonWithRoom(card, place);\n    cards.map(card => {\n        if (!card.temporary_schedule) {\n            inner +=\n                buildGroupNumber(card);\n        } else if (card.temporary_schedule.vacation === true) {\n\n            inner +=\n                card.temporary_schedule.date +\n                '\\n' +\n                i18next.t(`common:vacation_label`) +\n                '\\n';\n        } else {\n            inner +=\n                card.temporary_schedule.date +\n                '\\n' +\n                getTeacherFullName(card.temporary_schedule.teacher) +\n                '\\n';\n            if (card.temporary_schedule.room) {\n                inner += `${card.temporary_schedule.subjectForSite}, ${card.temporary_schedule.room.name}\\n`;\n            } else {\n                inner += card.temporary_schedule.subjectForSite + '\\n';\n            }\n        }\n        title +=\n            i18next.t(`common:regular_lesson_label`) +\n            '\\r' +\n            prepareTeacherCardRegularCell(card, place) +\n            '\\r';\n    });\n\n    return inner.length > 0 ? (\n        <p className='temporary-class' title={title}>\n            {inner}\n            {card.linkToMeeting && setLink(card, place)}\n        </p>\n    ) : (\n        ''\n    );\n};\n\nexport const renderGroupDayClass = (classDay, isOddWeek, place, semesterDays) => {\n    let res = [];\n    for (let [key, value] of Object.entries(classDay.cards)) {\n        value.day = key;\n        res.push(value);\n    }\n    return (\n        <TableRow key={shortid.generate()}>\n            <TableCell className=' lesson groupLabelCell'>\n                {renderClassCell(classDay.class)}\n            </TableCell>\n            {res.map(day => {\n                let className = 'lesson ';\n                if (currentDay === day.day && currentWeekType === isOddWeek) {\n                    className += ' currentDay';\n                }\n                return (\n                    semesterDays.includes(day.day) && <TableCell key={shortid.generate()} className={className}>\n\n                        {prepareLessonTemporaryCardCell(day.card, place, day.day)}\n\n                    </TableCell>\n                );\n            })}\n        </TableRow>\n    );\n};\n\nexport const renderScheduleGroupHeader = daysUppercase => (\n    <TableHead>\n        <TableRow>\n            <TableCell className='groupLabelCell'></TableCell>\n            {daysUppercase.map(day => (\n                <TableCell key={shortid.generate()}>\n                    {i18next.t(`day_of_week_${day}`)}\n                </TableCell>\n            ))}\n        </TableRow>\n    </TableHead>\n);\n\nexport const renderGroupTable = (classes, isOdd, semester, place) => {\n    if (semester) {\n        currentWeekType = isOddFunction(printWeekNumber(semester.startDay));\n    }\n    return (\n        <TableContainer>\n            <Table aria-label='sticky table'>\n                {semester && renderScheduleGroupHeader(semester.semester_days)}\n                <TableBody>\n                    {classes.map((classDay, classIndex) => {\n                        if (classDay) {\n                            return renderGroupDayClass(classDay, isOdd, place, semester.semester_days);\n                        }\n                    })}\n                </TableBody>\n            </Table>\n        </TableContainer>\n    );\n};\n\nexport const renderGroupCells = (\n    groups,\n    place,\n    isOdd = 0,\n    currentWeekType = 0,\n    isCurrentDay = 0,\n    day_name\n) => {\n    return groups.map((group, groupIndex) => {\n        let colspan = 1;\n        let rowspan = 1;\n        let classname = 'lesson';\n\n        if (currentWeekType === isOdd && isCurrentDay) {\n            classname += ' currentDay';\n        }\n        if (group.card !== null && group.card.skip_render === 1) {\n            return;\n        }\n        if (group.card !== null && group.card.weekly_render === 1) {\n            rowspan = 2;\n            classname += ' weekly';\n        }\n        for (let i = groupIndex + 1; i < groups.length; i++) {\n            if (\n                group &&\n                groups[i] &&\n                group.card !== null &&\n                groups[i].card !== null\n\n            ) {\n\n                if (\n                    group.card.teacher &&\n                    group.card.teacher.surname ===\n                    groups[i].card.teacher.surname &&\n                    group.card.teacher.name ===\n                    groups[i].card.teacher.name &&\n                    group.card.subjectForSite ===\n                    groups[i].card.subjectForSite &&\n                    group.card.room.id === groups[i].card.room.id\n                    &&\n                    group.card.weekly_render ===\n                    groups[i].card.weekly_render\n\n\n                ) {\n\n                    groups[i].card.skip_render = 1;\n                    colspan++;\n                    classname += ' grouped';\n                } else break;\n\n            } else break;\n\n        }\n\n        return (\n\n            <TableCell\n\n                key={shortid.generate()}\n                colSpan={colspan}\n                rowSpan={rowspan}\n                className={classname}\n            >\n                {prepareLessonTemporaryCardCell(group.card, place, day_name)}\n            </TableCell>\n        );\n    });\n};\n\nexport const renderScheduleHeader = groups => (\n    <TableHead>\n        <TableRow>\n            <TableCell className='groupLabelCell' colSpan={3}>\n                {i18next.t('group_y_label')}\n            </TableCell>\n            {groups.map(group => (\n                <TableCell key={shortid.generate()}>{group}</TableCell>\n            ))}\n        </TableRow>\n    </TableHead>\n);\n\nexport const renderFirstDayFirstClassFirstCardLine = (\n    day_name,\n    classItem,\n    groups,\n    classesCount,\n    place\n) => {\n    let dayClassName = 'dayNameCell ';\n    let classClassName = 'classNameCell ';\n\n    let oddWeekClass = '';\n    let evenWeekClass = '';\n    if (currentDay === day_name) {\n        dayClassName += ' currentDay';\n\n        if (currentWeekType === 1) {\n            oddWeekClass = ' currentDay';\n        } else {\n            evenWeekClass = ' currentDay';\n        }\n    }\n\n    if (groups.even.length <= 2 || groups.odd.length <= 2) {\n        dayClassName += ' minHeightDouble';\n    }\n\n    return (\n        <React.Fragment key={shortid.generate()}>\n            <TableRow>\n                <TableCell rowSpan={classesCount * 2} className={dayClassName}>\n                    <span className='dayName'>\n                        <b>{i18next.t(`common:day_of_week_${day_name}`)}</b>\n                    </span>\n                </TableCell>\n                <TableCell className={classClassName} rowSpan={2}>\n                    {renderClassCell(classItem)}\n\n                </TableCell>\n                <TableCell\n                    className={classClassName + oddWeekClass + ' subClassName'}\n                >\n                    1\n                </TableCell>\n                {renderGroupCells(groups.odd, place, 0, 0, 0, day_name)}\n            </TableRow>\n            <TableRow>\n                <TableCell\n                    className={classClassName + evenWeekClass + ' subClassName'}\n                >\n                    2\n                </TableCell>\n                {renderGroupCells(groups.even, place, 0, 0, 0, day_name)}\n            </TableRow>\n        </React.Fragment>\n    );\n};\n\nexport const renderFirstDayOtherClassFirstCardLine = (\n    day_name,\n    classItem,\n    groups,\n    place\n) => {\n\n    let classClassName = 'classNameCell ';\n    let oddWeekClass = '';\n    let evenWeekClass = '';\n\n    if (currentDay === day_name) {\n        if (currentWeekType === 1) {\n            oddWeekClass = ' currentDay';\n        } else {\n            evenWeekClass = ' currentDay';\n        }\n    }\n\n    return (\n        <React.Fragment key={shortid.generate()}>\n            <TableRow>\n                <TableCell className={classClassName} rowSpan={2}>\n                    {renderClassCell(classItem)}\n                </TableCell>\n                <TableCell\n                    className={classClassName + oddWeekClass + ' subClassName'}\n                >\n                    1\n                </TableCell>\n                {renderGroupCells(groups.odd, place, 1, 0, 0, day_name)}\n            </TableRow>\n            <TableRow>\n                <TableCell\n                    className={classClassName + evenWeekClass + ' subClassName'}\n                >\n                    2\n                </TableCell>\n                {renderGroupCells(groups.even, place, 0, 0, 0, day_name)}\n            </TableRow>\n        </React.Fragment>\n    );\n};\n\nconst prepareForRender = classItem => {\n    if (classItem.cards) {\n        classItem.cards.odd.forEach((card, cardIndex, map) => {\n            if (\n                classItem.cards.even[cardIndex] &&\n                card.group.id === classItem.cards.even[cardIndex].group.id\n            ) {\n                if (\n                    card.card !== null &&\n                    classItem.cards.even[cardIndex].card !== null\n                ) {\n                    if (\n                        card.card.teacher.name ===\n                        classItem.cards.even[cardIndex].card\n                            .teacher.name &&\n                        card.card.teacher.surname ===\n                        classItem.cards.even[cardIndex].card\n                            .teacher.surname &&\n                        card.card.subjectForSite ===\n                        classItem.cards.even[cardIndex].card\n                            .subjectForSite &&\n                        card.card.room.id ===\n                        classItem.cards.even[cardIndex].card.room.id\n                    ) {\n                        classItem.cards.odd[cardIndex].card.weekly_render = 1;\n                        classItem.cards.even[cardIndex].card.skip_render = 1;\n                    }\n                }\n            }\n        });\n    }\n    return classItem;\n};\n\nexport const renderDay = (dayName, dayItem, semesterClassesCount, place) => {\n    return dayItem.map((classItem, classIndex) => {\n        const t = prepareForRender(classItem);\n        if (classIndex === 0) {\n            return renderFirstDayFirstClassFirstCardLine(\n                dayName,\n                classItem.class,\n                classItem.cards,\n                semesterClassesCount,\n                place\n            );\n        } else {\n            return renderFirstDayOtherClassFirstCardLine(\n                dayName,\n                classItem.class,\n                classItem.cards,\n                place\n            );\n        }\n    });\n};\n\nexport const renderScheduleFullHeader = groupList => (\n    <TableHead>\n        <TableRow>\n            <TableCell colSpan={3}>\n                {i18next.t('formElements:group_label')}\n            </TableCell>\n            {groupList.map(group => (\n                <TableCell key={shortid.generate()} className='groupLabelCell'>\n                    {group.title}\n                </TableCell>\n            ))}\n        </TableRow>\n    </TableHead>\n);\n\nconst renderScheduleDays = (fullResultSchedule, place) => {\n    return fullResultSchedule.resultArray.map((dayItem, dayName) => {\n        return renderDay(\n            dayItem.day,\n            dayItem.classes,\n            fullResultSchedule.semester_classes.length,\n            place\n        );\n    });\n};\n\nexport const renderFullSchedule = (fullResultSchedule, place) => {\n    currentWeekType = isOddFunction(\n        printWeekNumber(fullResultSchedule.semester.startDay)\n    );\n    let scheduleTitle = '';\n    if (fullResultSchedule.semester) {\n        scheduleTitle =\n            fullResultSchedule.semester.description +\n            ' (' +\n            fullResultSchedule.semester.startDay +\n            '-' +\n            fullResultSchedule.semester.endDay +\n            ')';\n    }\n\n    return (\n        <>\n            <h1>{scheduleTitle}</h1>\n            <TableContainer>\n                <Table aria-label='sticky table'>\n                    {renderScheduleFullHeader(fullResultSchedule.groupList)}\n                    <TableBody>\n                        {renderScheduleDays(fullResultSchedule, place)}\n                    </TableBody>\n                </Table>\n            </TableContainer>\n        </>\n    );\n};\n\nconst renderClassRow = (classItem, days, scheduleRow, place) => (\n\n    <TableRow key={shortid.generate()}>\n        <TableCell className='lesson groupLabelCell'>\n\n            {renderClassCell(classItem)}\n        </TableCell>\n        {days.map(dayName => {\n\n            if (scheduleRow) {\n                return renderTeacherClassCell(\n                    scheduleRow.find(clas => clas.day === dayName), place\n                );\n            }\n        })}\n    </TableRow>\n);\nconst renderTeacherClassCell = (cards, place) => {\n    let teacherLessonAddCellClass = '';\n\n    if (cards !== undefined) {\n        if (cards.cards.length > 1) {\n            cards.cards.map((card, cardIndex) => {\n                if (\n                    cards.cards[cardIndex + 1] &&\n                    card.room !== cards.cards[cardIndex + 1].room\n                ) {\n                    teacherLessonAddCellClass += 'intersection-on-schedule';\n                }\n            });\n        }\n    }\n    return (\n        <TableCell\n            key={shortid.generate()}\n            className={`lesson ${teacherLessonAddCellClass}`}\n        >\n\n            {prepareTeacherTemporaryCardCell(cards && cards.cards, place)}\n        </TableCell>\n    );\n};\nexport const renderWeekTable = (schedule, isOdd, place) => {\n    if (schedule) {\n        return (\n            <TableContainer>\n                <Table aria-label='sticky table'>\n                    {renderScheduleGroupHeader(schedule.days)}\n                    <TableBody>\n                        {schedule.classes.map(classItem => {\n                            return renderClassRow(\n                                classItem,\n                                schedule.days,\n                                schedule.cards[classItem.id],\n                                place\n                            );\n                        })}\n                    </TableBody>\n                </Table>\n            </TableContainer>\n        );\n    }\n};\n\nexport const renderTeacherRangeSchedule = (\n    schedule,\n    viewTeacherScheduleResults\n) => {\n    if (schedule === undefined) return;\n    if (schedule) {\n        if (schedule.length === 0) {\n            return i18next.t('empty_schedule');\n        }\n        return schedule.map((dayItem, dayIndex) => {\n            const parsed = Array.from(dayItem.date);\n\n            const startDay = new Date(\n                parsed[3] +\n                parsed[4] +\n                parsed[5] +\n                parsed[0] +\n                parsed[1] +\n                parsed[2] +\n                parsed[6] +\n                parsed[7] +\n                parsed[8] +\n                parsed[9]\n            );\n            return (\n                <Card\n                    class={\n                        viewTeacherScheduleResults +\n                        ' ' +\n                        'form-card teacher-schedule-day-card'\n                    }\n                    key={shortid.generate()}\n                >\n                    <h3>\n                        {dayItem.date +\n                        ' ( ' +\n                        i18next.t(`day_of_week_${startDay.getDay() + 1}`) +\n                        ' )'}\n                    </h3>\n                    {renderTeacherRangeDay(dayItem.schedule)}\n                </Card>\n            );\n        });\n    }\n};\n\nconst renderLessonsFirstLine = lessonItem => {\n    return (\n        <>\n            <TableCell>{lessonItem.lesson.subject_for_site}</TableCell>\n            <TableCell>{lessonItem.lesson.group_name}</TableCell>\n            <TableCell>{lessonItem.lesson.room.name}</TableCell>\n        </>\n    );\n};\n\nconst renderLessonsRestLines = lessons => {\n    if (lessons.length === 1) {\n        return;\n    }\n    let lessonClassName = '';\n    lessonClassName = 'groupped';\n    lessons.forEach((lessonItem, lessonIndex) => {\n        if (\n            lessons[lessonIndex + 1] &&\n            (lessonItem.lesson.subject_for_site !==\n                lessons[lessonIndex + 1].lesson.subject_for_site ||\n                lessonItem.lesson.room.id !==\n                lessons[lessonIndex + 1].lesson.room.id)\n        ) {\n            lessonClassName = 'overlap';\n        }\n    });\n    return lessons.map((lessonItem, lessonIndex) => {\n        if (lessonIndex === 0) {\n            return;\n        }\n        return (\n            <TableRow className={lessonClassName} key={shortid.generate()}>\n                <TableCell>{lessonItem.lesson.subject_for_site}</TableCell>\n                <TableCell>{lessonItem.lesson.group_name}</TableCell>\n                <TableCell>{lessonItem.lesson.room.name}</TableCell>\n            </TableRow>\n        );\n    });\n};\n\nconst renderFirstLineTable = classItem => {\n    return (\n        <TableRow key={shortid.generate()}>\n            <TableCell rowSpan={classItem.lessons.length}>\n                {classItem.class.class_name +\n                ' ( ' +\n                classItem.class.startTime +\n                ' - ' +\n                classItem.class.endTime +\n                ')'}\n            </TableCell>\n            {renderLessonsFirstLine(classItem.lessons[0])}\n        </TableRow>\n    );\n};\n\nexport const renderTeacherRangeDay = schedule => {\n    if (schedule) {\n        return (\n            <TableContainer key={shortid.generate()}>\n                <Table aria-label='sticky table'>\n                    <TableBody>\n                        {schedule.map(classItem => {\n                            return (\n                                <React.Fragment key={shortid.generate()}>\n                                    {renderFirstLineTable(classItem)}\n                                    {renderLessonsRestLines(classItem.lessons)}\n                                </React.Fragment>\n                            );\n                        })}\n                    </TableBody>\n                </Table>\n            </TableContainer>\n        );\n    }\n};\n","import React, { useEffect, useState } from 'react';\nimport { connect } from 'react-redux';\nimport { Field, reduxForm } from 'redux-form';\n\nimport { makeStyles } from '@material-ui/core/styles';\nimport { useTranslation } from 'react-i18next';\n\nimport Button from '@material-ui/core/Button';\nimport { MdPlayArrow } from 'react-icons/md';\n\nimport renderSelectField from '../../share/renderedFields/select';\n\nimport {\n    showAllPublicSemestersService,\n    showAllPublicGroupsService,\n    showAllPublicTeachersService, getFullSchedule\n} from '../../services/scheduleService';\n\nimport './GroupSchedulePageTop.scss';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport Card from '../../share/Card/Card';\n\nimport { SCHEDULE_SEARCH_FORM } from '../../constants/reduxForms';\nimport { required } from '../../validation/validateFields';\nimport { MenuItem, Select } from '@material-ui/core';\nimport { places } from '../../constants/places';\nimport { getTeacherFullName } from '../../helper/renderTeacher';\nconst shortid = require('shortid');\n\nconst useStyles = makeStyles(theme => ({\n    root: {\n        '& > *': {\n            margin: theme.spacing(1)\n        }\n    }\n}));\n\nconst GroupSchedulePageTop = props => {\n    const [groupDisabled,setGroupDisabled]=useState(true);\n    const classes = useStyles();\n    const { t } = useTranslation('common');\n    const {\n        groups,\n        teachers,\n        semesters,\n        handleSubmit,\n        pristine,\n        submitting\n    } = props;\n    const isLoading = props.loading;\n    const [semesterId,setSemesterId]=useState(props.initialValues.semester);\n    let loadingContainer = '';\n    if (isLoading) {\n        loadingContainer = (\n            <section className=\"centered-container\">\n                <CircularProgress />\n            </section>\n        );\n    }\n    useEffect(() => showAllPublicGroupsService(semesterId), [semesterId]);\n    useEffect(() => showAllPublicTeachersService(), []);\n    useEffect(() => showAllPublicSemestersService(), []);\n    useEffect(() => {\n        if(groups.length!==0){\n            setGroupDisabled(false)\n        }\n        else {\n            setGroupDisabled(true)\n        }\n    }, [groups]);\n    const renderSemesterList = () => {\n        if (semesters) {\n            if (semesters.length > 1) {\n\n                return (\n                    <Field\n                        id=\"semester\"\n                        name=\"semester\"\n                        component={renderSelectField}\n                        label={t('formElements:semester_label')}\n                        type=\"text\"\n                        validate={[required]}\n                        onChange={(e)=>setSemesterId(e.target.value)}\n                    >\n                        <option />\n                        {semesters.map((semester, index) => (\n\n                            <option\n                                key={shortid.generate()}\n                                value={semester.id}\n\n                            >\n                                {semester.description}\n                            </option>\n\n                        ))}\n                    </Field>\n                );\n            }\n            else if (semesters.length === 1) {\n                handleSubmit({ semester: semesters[0].id });\n                return <p>{semesters[0].description}</p>;\n            }\n        }\n    };\n    const renderTeacherList=()=>{\n      return  (<Field\n            id=\"teacher\"\n            name=\"teacher\"\n            component={renderSelectField}\n            label={t('formElements:teacher_label')}\n            type=\"text\"\n            onChange={() => props.change('group', 0)}\n\n        >\n            <option />\n            {teachers.map((teacher, index) => (\n                <option\n                    key={shortid.generate()}\n                    value={teacher.id}\n                >\n                    {getTeacherFullName(teacher)}\n                </option>\n            ))}\n        </Field>)\n    };\n    const renderGroupList=()=>{\n       return (<Field\n            disabled={groupDisabled}\n            id=\"group\"\n            name=\"group\"\n            component={renderSelectField}\n            label={t('formElements:group_label')}\n            type=\"text\"\n            onChange={() => {\n                props.change('teacher', 0);\n            }}\n        >\n            <option />\n            {groups.map((group, index) => (\n                <option\n                    key={shortid.generate()}\n                    value={group.id}\n                >\n                    {group.title}\n                </option>\n            ))}\n        </Field>)\n    }\n\n    useEffect(()=>{\n\n        props.initialize({\n            semester:props.initialValues.semester,\n            group: props.initialValues.group,\n            teacher:props.initialValues.teacher\n        })\n    },[])\n\n    return (\n        <section className={classes.root}>\n            <p>{t('greetings_schedule_message')}</p>\n            <p>{t('greetings_schedule_message_hint')}</p>\n            <section className=\"form-buttons-container top\">\n                <Card class=\"form-card width-auto\">\n                    <form onSubmit={handleSubmit}>\n                        {renderSemesterList()}\n                        {renderGroupList()}\n                        {renderTeacherList()}\n\n                        <Button\n                            variant=\"contained\"\n                            color=\"primary\"\n                            type=\"submit\"\n                            disabled={pristine || submitting}\n\n                        >\n\n                            <MdPlayArrow\n                                title={t('teacher_schedule_label')}\n                                className=\"svg-btn\"\n                            />\n                        </Button>\n\n                    </form>\n\n                </Card>\n                <span id=\"select-place\">\n                    <label htmlFor={\"demo-controlled-open-select\"}>{t('place_for_class_label')}</label>\n                <Select className=\"place\"\n                        labelId=\"demo-controlled-open-select-label\"\n                        id=\"demo-controlled-open-select\"\n                        value={props.place}\n                        onChange={props.onChange}\n\n                >\n\n                    {\n                        Object.entries(places).map(function(data, index) {\n                            return <MenuItem value={data[1]} key={data[0]}>{t(`${data[1]}_label`)}</MenuItem>\n                        }, this)\n                    }\n\n                </Select>\n                </span>\n\n            </section>\n            {loadingContainer}\n        </section>\n    );\n};\n\nconst mapStateToProps = state => ({\n    defaultSemester: state.schedule.defaultSemester,\n    groups: state.groups.groups,\n    teachers: state.teachers.teachers,\n    semesters: state.schedule.semesters,\n    loading: state.loadingIndicator.loading,\n    initialValues:{semester: state.schedule.scheduleSemesterId,group: state.schedule.scheduleGroupId,teacher: state.schedule.scheduleTeacherId},\n\n});\nexport default connect(mapStateToProps)(\n    reduxForm({\n        form: SCHEDULE_SEARCH_FORM\n    })(GroupSchedulePageTop)\n);\n\n\n","import React, { useEffect, useState } from 'react';\nimport { connect } from 'react-redux';\nimport { useTranslation } from 'react-i18next';\nimport {\n    PUBLIC_DOWNLOAD_GROUP_SCHEDULE_URL,\n    PUBLIC_DOWNLOAD_TEACHER_SCHEDULE_URL\n} from '../../constants/axios';\n\nimport './GroupSchedulePage.scss';\nimport { MdPictureAsPdf } from 'react-icons/md';\n\nimport {\n    makeGroupSchedule,\n    makeFullSchedule,\n    makeTeacherSchedule\n} from '../../helper/prepareSchedule';\nimport {\n    renderGroupTable,\n    renderFullSchedule,\n    renderWeekTable\n} from '../../helper/renderScheduleTable';\nimport {\n    getDefaultSemesterService,\n    getFullSchedule, getGroupSchedule, getTeacherSchedule,\n    setScheduleGroupIdService,\n    setScheduleSemesterIdService,\n    setScheduleTeacherIdService, showAllPublicSemestersService,\n    submitSearchSchedule, submitSearchSchedule1\n} from '../../services/scheduleService';\n\nimport GroupSchedulePageTop from '../GroupSchedulePageTop/GroupSchedulePageTop';\nimport { setLoadingService } from '../../services/loadingService';\nimport {useHistory,useLocation} from 'react-router-dom';\nimport { links } from '../../constants/links';\nimport RadioGroup from '@material-ui/core/RadioGroup';\nimport { FormLabel, InputLabel, MenuItem, Select } from '@material-ui/core';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Radio from '@material-ui/core/Radio';\nimport { places } from '../../constants/places';\nimport i18n from 'i18next';\nimport { Contactless } from '@material-ui/icons';\nimport { getTeacherWithPosition } from '../../helper/renderTeacher';\nconst GroupSchedulePage = props => {\n\n    const [place,setPlace]=useState(places.TOGETHER);\n    let {scheduleType, groupSchedule, fullSchedule, teacherSchedule,groupId,teacherId ,semesterId,loading,defaultSemester,semesters} = props;\n    let history = useHistory();\n\n    const location = useLocation();\n    const emptySchedule = () => (\n        <p className=\"empty_schedule\">{t('common:empty_schedule')}</p>\n    );\n    const { t } = useTranslation('common');\n    const renderDownloadLink = (entity, semesterId, entityId) => {\n        let link = '';\n        const {language}=i18n;\n        const languageToRequest=`&language=${language}`;\n        if (semesterId && entityId) {\n            switch (entity) {\n                case 'group':\n                    link =\n                        PUBLIC_DOWNLOAD_GROUP_SCHEDULE_URL +\n                        '?groupId=' +\n                        entityId +\n                        '&semesterId=' +\n                        semesterId+\n                        languageToRequest;\n                    break;\n                case 'teacher':\n                    link =\n                        PUBLIC_DOWNLOAD_TEACHER_SCHEDULE_URL +\n                        '?teacherId=' +\n                        entityId +\n                        '&semesterId=' +\n                        semesterId+\n                        languageToRequest;\n                    break;\n                default:\n                    break;\n            }\n            return (\n                <a\n                    href={link}\n                    target=\"_blank\"\n                    rel=\"noreferrer noopener\"\n                    variant=\"contained\"\n                    color=\"primary\"\n                    className=\"pdf_link\"\n                    download\n                >\n                    <MdPictureAsPdf className=\"svg-btn\" />\n                    {t('common:download_pdf')}\n                </a>\n            );\n        }\n    };\n\n    const renderGroupScheduleTitle = (semester, group) => {\n        let title = '';\n        if (semester) {\n            title +=\n                semester.description +\n                ' (' +\n                semester.startDay +\n                '-' +\n                semester.endDay +\n                ') : ';\n        }\n        if (group) {\n            title += group.title ? group.title : '';\n        }\n        return title;\n    };\n    const renderTeacherScheduleTitle = (semester, teacher) => {\n        let title = '';\n        if (semester) {\n            title +=\n                semester.description +\n                ' (' +\n                semester.startDay +\n                '-' +\n                semester.endDay +\n                ') : ';\n        }\n        if (teacher) {\n            title +=\n                getTeacherWithPosition(teacher);\n        }\n        return title;\n    };\n\n    const renderSchedule = () => {\n        switch (props.scheduleType) {\n            case 'group':\n                if (\n                    (!groupSchedule ||\n                        (groupSchedule.schedule &&\n                            groupSchedule.schedule.length === 0)) &&\n                    !props.loading\n                ) {\n                    return emptySchedule();\n                }\n\n                const resultArrays = makeGroupSchedule(groupSchedule);\n                if (resultArrays.done) {\n                    setLoadingService(false);\n                    return (\n                        <>\n                            <h1>\n                                {renderGroupScheduleTitle(\n                                    resultArrays.semester,\n                                    resultArrays.group\n                                )}\n                                {renderDownloadLink(\n                                    'group',\n                                    props.semesterId,\n                                    props.groupId\n                                )}\n                            </h1>\n                            <h2>{t('common:odd_week')}</h2>\n                            {renderGroupTable(\n                                resultArrays.oddArray,\n                                1,\n                                resultArrays.semester,\n                                place\n                            )}\n                            <h2>{t('common:even_week')}</h2>\n                            {renderGroupTable(\n                                resultArrays.evenArray,\n                                0,\n                                resultArrays.semester,\n                                place\n                            )}\n                        </>\n                    );\n                }\n                else setLoadingService(false)\n                break;\n            case 'teacher':\n                if (\n                    (!teacherSchedule ||\n                        !teacherSchedule.days ||\n                        teacherSchedule.days.length === 0) &&\n                    !props.loading\n                ) {\n                    return emptySchedule();\n                }\n                    if(teacherSchedule) {\n                        const teacher = makeTeacherSchedule(teacherSchedule);\n                        if (teacher.done) {\n                            setLoadingService(false);\n                            return (\n                                <>\n                                    <h1>\n                                        {renderTeacherScheduleTitle(\n                                            teacher.semester,\n                                            teacher.teacher\n                                        )}\n                                        {renderDownloadLink(\n                                            'teacher',\n                                            props.semesterId,\n                                            props.teacherId\n                                        )}\n                                    </h1>\n                                    <h2>{t('common:odd_week')}</h2>\n                                    {renderWeekTable(teacher.odd, 1,place)}\n                                    <h2>{t('common:even_week')}</h2>\n                                    {renderWeekTable(teacher.even, 0,place)}\n                                </>\n                            );\n                        }\n                    }\n                    else setLoadingService(false)\n                break;\n            case 'full':\n\n                if (\n                    (!fullSchedule.schedule ||\n                        fullSchedule.schedule.length === 0) &&\n                    !props.loading\n                ) {\n                    return emptySchedule();\n                }\n                const result = makeFullSchedule(fullSchedule);\n\n                if (result.groupsCount || result.done) {\n                    setLoadingService(false);\n                    return renderFullSchedule(result,place);\n                }\n                else setLoadingService(false)\n                break;\n            case 'archived':\n                if (\n                    (!fullSchedule.schedule ||\n                        fullSchedule.schedule.length === 0) &&\n                    !props.loading\n                ) {\n                    return '';\n                }\n                const archive = makeFullSchedule(fullSchedule);\n                if (archive.groupsCount || archive.done) {\n                    setLoadingService(false);\n                    return renderFullSchedule(archive,place);\n                }\n                else setLoadingService(false)\n                break;\n\n\n            default:\n                return;\n        }\n    };\n\n    const handleSubmit = values => {\n        const {semester,group,teacher}=values\n        const groupPath=group?\"&group=\"+group:\"\";\n        const teacherPath=teacher?\"&teacher=\"+teacher:\"\";\n        setLoadingService('true');\n        submitSearchSchedule(values, history);\n        history.push(links.ScheduleFor+\"?semester=\"+semester+groupPath+teacherPath);\n\n    };\n    useEffect(()=>getFullSchedule(),[place])\n\n\n    useEffect(()=> {\n         if(scheduleType===\"group\")\n         getGroupSchedule(groupId, semesterId);\n     },[groupId])\n     useEffect(()=> {\n         if(scheduleType===\"teacher\")\n         getTeacherSchedule(teacherId, semesterId);\n     },[teacherId])\n\n    useEffect(()=> {\n        if((scheduleType===\"full\"&&fullSchedule.length===0)) {\n            getFullSchedule();\n        }\n    },)\n    useEffect(()=>{\n        getDefaultSemesterService()\n    },[])\n\n   const getSchedule=()=>{\n       if((props.scheduleType===\"\")&&(props.defaultSemester.id!==undefined)){\n           const semester=`${props.defaultSemester.id}`;\n           handleSubmit({ \"semester\":semester });\n\n           return\n       }\n       if(props.scheduleType!==\"\"|| location.pathname===links.HOME_PAGE){\n\n           return renderSchedule();\n\n       }\n\n\n       const params = new URLSearchParams(location.search);\n\n       const semester= params.get(\"semester\");\n       const teacher=params.get(\"teacher\");\n       const group=params.get(\"group\");\n\n       if(semester!==null) {\n           handleSubmit({ semester, 'group': group != null ? group : 0, 'teacher': teacher != null ? teacher : 0 });\n        return\n       }\n       else return null;\n    }\n\n    const getTop=()=>{\n\n       if(props.scheduleType !== 'archived') {\n\n         return (\n             <GroupSchedulePageTop\n                  scheduleType={props.scheduleType}\n                 onSubmit={handleSubmit} place={place} onChange={changePlace}\n             />\n         );\n\n\n       }\n       return null;\n    }\n    const changePlace=(e)=>{\n        if(e.target) {\n            setPlace(e.target.value);}\n    }\n\n\n    return (\n        <>\n            {getTop()}\n            {getSchedule()}\n        </>\n    );\n};\nconst mapStateToProps = state => ({\n    scheduleType: state.schedule.scheduleType,\n    groupSchedule: state.schedule.groupSchedule,\n    fullSchedule: state.schedule.fullSchedule,\n    teacherSchedule: state.schedule.teacherSchedule,\n    groupId: state.schedule.scheduleGroupId,\n    teacherId: state.schedule.scheduleTeacherId,\n    semesterId: state.schedule.scheduleSemesterId,\n    loading: state.loadingIndicator.loading,\n    defaultSemester: state.schedule.defaultSemester,\n    semesters: state.schedule.semesters,\n\n\n});\nexport default connect(mapStateToProps)(GroupSchedulePage);\n","import React, { Fragment, useEffect } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { connect } from 'react-redux';\n\nimport { userRoles } from '../../constants/userRoles';\n\nimport GroupSchedulePage from '../../components/GroupSchedulePage/GroupSchedulePage';\n\n\nimport {\n    getDefaultSemesterService,\n\n    setScheduleSemesterIdService,\n    setScheduleTypeService,\n} from '../../services/scheduleService';\nimport { getPublicClassScheduleListService } from '../../services/classService';\n\nconst HomePage = props => {\n    const { t } = useTranslation('common');\n\n    useEffect(() => getPublicClassScheduleListService(), []);\n    setScheduleSemesterIdService(null)\n    setScheduleTypeService(\"\")\n\n    // useEffect(() => showAllPublicSemestersService(), []);\n\n    useEffect(() => {\n        if (props.userRole === null) {\n            //disableDefaultSemesterService();\n            getDefaultSemesterService();\n            setScheduleTypeService(\"\");\n        }\n    }, []);\n    useEffect(() => {\n        if (props.userRole === userRoles.TEACHER) {\n            //disableDefaultSemesterService();\n            getDefaultSemesterService();\n            setScheduleTypeService(\"\");\n        }\n    }, []);\n    useEffect(() => {\n        if (props.userRole === userRoles.MANAGER) {\n           // disableDefaultSemesterService();\n            getDefaultSemesterService();\n            setScheduleTypeService(\"\");\n        }\n    }, []);\n\n    return (\n\n        <Fragment>\n\n            <h1>{t('home_title')}</h1>\n            <GroupSchedulePage scheduleType=\"default\"  />\n        </Fragment>\n    );\n};\n\nconst mapStateToProps = state => ({\n    userRole: state.auth.role ,\n});\n\nexport default connect(mapStateToProps)(HomePage);\n","import React from 'react';\nimport MomentUtils from '@date-io/moment';\nimport * as moment from 'moment';\nimport { MuiPickersUtilsProvider, DatePicker } from '@material-ui/pickers';\n\nconst renderMounthPicker = ({\n    label,\n    input: { value, ...inputProps },\n    meta: { touched, invalid, error },\n    ...custom\n}) => {\n    return (\n        <MuiPickersUtilsProvider utils={MomentUtils}>\n            <DatePicker\n                minDate={new Date()}\n                clearable\n                value={value ? moment(value, 'DD/MM/YYYY').toDate() : null}\n                format=\"DD/MM/YYYY\"\n                error={touched && invalid}\n                helperText={touched && error ? touched && error : label}\n                {...inputProps}\n                {...custom}\n            />\n        </MuiPickersUtilsProvider>\n    );\n};\nexport default renderMounthPicker;\n","import React, { useEffect } from 'react';\nimport { Field, reduxForm } from 'redux-form';\n\nimport Card from '../../share/Card/Card';\nimport { connect } from 'react-redux';\n\nimport './TeacherScheduleForm.scss';\n\nimport renderMonthPicker from '../../share/renderedFields/timeSemester';\nimport { MdPlayArrow, MdViewModule, MdViewHeadline } from 'react-icons/md';\n\nimport Button from '@material-ui/core/Button';\n\nimport {\n    required,\n    lessThanDate,\n    greaterThanDate\n} from '../../validation/validateFields';\n\nimport { TEACHER_SCHEDULE_FORM } from '../../constants/reduxForms';\nimport { useTranslation } from 'react-i18next';\nimport * as moment from 'moment';\nimport { setTeacherServiceViewType } from '../../services/scheduleService';\n\nlet TeacherScheduleForm = props => {\n    const { t } = useTranslation('formElements');\n    const { handleSubmit } = props;\n    const isSchedule = false;\n\n    useEffect(() => {\n        props.initialize({\n            startDay: moment(new Date(), 'DD/MM/YYYY').format('DD/MM/YYYY'),\n            endDay: moment(new Date(), 'DD/MM/YYYY')\n                .add(7, 'd')\n                .format('DD/MM/YYYY')\n        });\n    }, [isSchedule]);\n    return (\n        <Card class={'form-card teacher-schedule-form'}>\n            <form onSubmit={handleSubmit}>\n                <div className=\"form-line-block\">\n                    <h2 className=\"form-title\">\n                        {t('common:select_dates_for_teacher_schedule')}\n                    </h2>\n                    <Field\n                        className=\"time-input\"\n                        name=\"startDay\"\n                        component={renderMonthPicker}\n                        label={t('class_from_label') + ':'}\n                        validate={[required, lessThanDate]}\n                    />\n                    <Field\n                        className=\"time-input\"\n                        name=\"endDay\"\n                        component={renderMonthPicker}\n                        label={t('class_to_label') + ':'}\n                        validate={[required, greaterThanDate]}\n                    />\n                    <div className=\"form-buttons-container\">\n                        <Button\n                            className=\"buttons-style\"\n                            type=\"submit\"\n                            variant=\"contained\"\n                            color=\"primary\"\n                        >\n                            <MdPlayArrow\n                                title={t('full_schedule_label')}\n                                className=\"svg-btn\"\n                            />\n                        </Button>\n                        <Button\n                            className=\"view-type-icon first-view-type-button\"\n                            variant=\"contained\"\n                            color=\"secondary\"\n                            title={t('common:block_view')}\n                            onClick={() =>\n                                setTeacherServiceViewType('blocks-view')\n                            }\n                        >\n                            <MdViewModule className=\"svg-btn\" />\n                        </Button>\n                        <Button\n                            className=\"view-type-icon\"\n                            variant=\"contained\"\n                            color=\"secondary\"\n                            title={t('common:list_view')}\n                            onClick={() =>\n                                setTeacherServiceViewType('list-view')\n                            }\n                        >\n                            <MdViewHeadline className=\"svg-btn\" />\n                        </Button>\n                    </div>\n                </div>\n            </form>\n        </Card>\n    );\n};\n\nconst mapStateToProps = state => ({\n    classScheduleOne: state.classActions.classScheduleOne\n});\n\nexport default connect(mapStateToProps)(\n    reduxForm({\n        form: TEACHER_SCHEDULE_FORM\n    })(TeacherScheduleForm)\n);\n","import React, { useEffect } from 'react';\nimport { connect } from 'react-redux';\n\nimport './TeacherSchedule.scss';\n\nimport TeacherScheduleForm from '../TeacherScheduleForm/TeacherScheduleForm';\nimport {\n    clearTeacherScheduleFormService,\n    getTeacherScheduleService\n} from '../../services/scheduleService';\n\nimport { renderTeacherRangeSchedule } from '../../helper/renderScheduleTable';\nconst TeacherSchedule = props => {\n    const handleFormReset = () => {\n        clearTeacherScheduleFormService();\n    };\n    const submit = values => {\n        getTeacherScheduleService(values);\n    };\n\n    useEffect(() => {\n        renderTeacherRangeSchedule(\n            props.schedule,\n            props.viewTeacherScheduleResults\n        );\n    }, [props.viewTeacherScheduleResults]);\n\n    return (\n        <>\n            <TeacherScheduleForm onSubmit={submit} onReset={handleFormReset} />\n            <section>\n                {renderTeacherRangeSchedule(\n                    props.schedule,\n                    props.viewTeacherScheduleResults\n                )}\n            </section>\n        </>\n    );\n};\nconst mapStateToProps = state => ({\n    loading: state.loadingIndicator.loading,\n    schedule: state.schedule.teacherRangeSchedule,\n    viewTeacherScheduleResults: state.schedule.viewTeacherScheduleResults\n});\nexport default connect(mapStateToProps)(TeacherSchedule);\n","export const isObjectEmpty=(object)=> {\n    return (\n        Object.prototype.toString.call(object) === '[object Object]' &&\n        JSON.stringify(object) === '{}'\n    );\n}","import { store } from '../index';\nimport {\n    DISABLED_TEACHERS_URL,\n    TEACHER_URL,\n    TEACHERS_WITHOUT_ACCOUNT_URL\n} from '../constants/axios';\nimport { TEACHER_FORM } from '../constants/reduxForms';\n\nimport axios from '../helper/axios';\n\nimport i18n from '../helper/i18n';\n\nimport {\n    addTeacher,\n    deleteTeacher,\n    selectTeacherCard,\n    setDisabledTeachers,\n    showAllTeachers,\n    updateTeacherCard\n} from '../redux/actions';\nimport { errorHandler, successHandler } from '../helper/handlerAxios';\nimport { resetFormHandler } from '../helper/formHelper';\nimport { setLoadingService } from './loadingService';\nimport { isObjectEmpty } from '../helper/ObjectRevision';\n\nexport const showAllTeachersService = () => {\n    axios\n        .get(TEACHER_URL)\n        .then(response => {\n            store.dispatch(showAllTeachers(response.data));\n            setLoadingService(false);\n        })\n        .catch(error => errorHandler(error));\n};\n\n\n\nexport const getTeachersWithoutAccount = () => {\n    axios\n        .get(TEACHERS_WITHOUT_ACCOUNT_URL)\n        .then(response => {\n            store.dispatch(showAllTeachers(response.data));\n        })\n        .catch(error => errorHandler(error));\n};\n\nexport const createTeacherService = values => {\n    let result= {... values };\n   if(isObjectEmpty(values.department)||values.department.id===null){\n       const {department,...res}=values;\n       result= { ...res };\n   }\n    axios\n        .post(TEACHER_URL, result)\n        .then(response => {\n            store.dispatch(addTeacher(response.data));\n            resetFormHandler(TEACHER_FORM);\n            successHandler(\n                i18n.t('serviceMessages:back_end_success_operation', {\n                    cardType: i18n.t('formElements:teacher_a_label'),\n                    actionType: i18n.t('serviceMessages:created_label')\n                })\n            );\n        })\n        .catch(error => errorHandler(error));\n};\n\nconst cardTeacher = teacher => {\n    return {\n        teacher: {\n            id: teacher.id,\n            name: teacher.name,\n            surname: teacher.surname,\n            patronymic: teacher.patronymic,\n            position: teacher.position,\n            email:teacher.email,\n            department: teacher.department\n        }\n    };\n};\n\nexport const updateTeacherService = data => {\n    let result={...data.teacher};\n    if(isObjectEmpty(result.department)||result.department.id===null){\n        const {department,...res}=result;\n        result={...res};\n    }\n    return axios\n        .put(TEACHER_URL, result)\n        .then(response => {\n            store.dispatch(updateTeacherCard(response.data));\n            if (response.data.disable) {\n                store.dispatch(deleteTeacher(response.data.id));\n            }\n            showAllTeachersService();\n            getDisabledTeachersService();\n\n            selectTeacherCardService(null);\n            resetFormHandler(TEACHER_FORM);\n            successHandler(\n                i18n.t('serviceMessages:back_end_success_operation', {\n                    cardType: i18n.t('formElements:teacher_a_label'),\n                    actionType: i18n.t('serviceMessages:updated_label')\n                })\n            );\n        })\n        .catch(error => errorHandler(error));\n};\n\nexport const handleTeacherService = values => {\n    const teacher = cardTeacher(values);\n\n    if (values.id) {\n        updateTeacherService(teacher);\n    } else {\n        createTeacherService(values);\n    }\n};\n\nexport const removeTeacherCardService = id => {\n    axios\n        .delete(TEACHER_URL + `/${id}`)\n        .then(response => {\n            store.dispatch(deleteTeacher(id));\n            getDisabledTeachersService();\n            successHandler(\n                i18n.t('serviceMessages:back_end_success_operation', {\n                    cardType: i18n.t('formElements:teacher_a_label'),\n                    actionType: i18n.t('serviceMessages:deleted_label')\n                })\n            );\n        })\n        .catch(error => errorHandler(error));\n};\n\nexport const selectTeacherCardService = teacherCardId => {\n    store.dispatch(selectTeacherCard(teacherCardId));\n};\n\nexport const getDisabledTeachersService = () => {\n    axios\n        .get(DISABLED_TEACHERS_URL)\n        .then(res => {\n            store.dispatch(setDisabledTeachers(res.data));\n        })\n        .catch(error => errorHandler(error));\n};\n\nexport const setDisabledTeachersService = teacher => {\n    teacher.disable = true;\n    updateTeacherService({ teacher });\n};\n\nexport const setEnabledTeachersService = teacher => {\n    teacher.disable = false;\n    updateTeacherService({ teacher });\n};\n","import axios from '../helper/axios';\nimport { store } from '../index';\n\nimport {\n    LESSON_TYPES_URL,\n    LESSON_URL,\n    COPY_LESSON_URL\n} from '../constants/axios';\nimport { LESSON_FORM } from '../constants/reduxForms';\n\nimport { handleSnackbarOpenService } from './snackbarService';\nimport { setLoadingService } from './loadingService';\n\nimport {\n    deleteLessonCard,\n    selectGroupId,\n    selectLessonCard,\n    setLessonsCards,\n    setLessonTypes,\n    setUniqueError,\n    storeLessonCard,\n    updateLessonCard\n} from '../redux/actions/index';\n\nimport { snackbarTypes } from '../constants/snackbarTypes';\n\nimport { checkUniqLesson } from '../validation/storeValidation';\nimport i18n from '../helper/i18n';\nimport { errorHandler, successHandler } from '../helper/handlerAxios';\nimport { resetFormHandler } from '../helper/formHelper';\nimport { getTeacherById } from './teacherService';\n\nexport const getLessonsByGroupService = groupId => {\n    axios\n        .get(LESSON_URL + `?groupId=${Number(groupId)}`)\n        .then(response => {\n            store.dispatch(setLessonsCards(response.data));\n            setLoadingService(false);\n        })\n        .catch(err => {\n            errorHandler(err);\n            setLoadingService(false);\n        });\n};\n\nexport const getLessonTypesService = () => {\n    axios\n        .get(LESSON_TYPES_URL)\n        .then(response => {\n            store.dispatch(setLessonTypes(response.data));\n        })\n        .catch(err => {\n            errorHandler(err);\n        });\n};\nconst cardObjectHandler = (card, groupId, semester) => {\n    const groupData = (card.groups.map(group => group.id).includes(groupId) && card.groups.length !== 1) ? { groups: card.groups } : { groups: [{ id: groupId }] };\n    return {\n        ...groupData,\n        id: Number(card.lessonCardId),\n        hours: Number(card.hours),\n        subject: {\n            id: Number(card.subject)\n        },\n        lessonType: card.type,\n        subjectForSite: card.subjectForSite,\n        teacher: { id: Number(card.teacher) },\n        linkToMeeting: card.linkToMeeting,\n        grouped: card.grouped,\n        semester\n    };\n};\n\nconst updateLessonHandler = (data, groupId) => {\n    let res = { ...data };\n    const { groups, ...result } = res;\n    res = { ...result };\n    res.group = { id: groupId };\n    return axios\n        .put(LESSON_URL, res)\n        .then(response => {\n            store.dispatch(updateLessonCard(response.data));\n            selectLessonCardService(null);\n            resetFormHandler(LESSON_FORM);\n\n            successHandler(\n                i18n.t('serviceMessages:back_end_success_operation', {\n                    cardType: i18n.t('formElements:lesson_label'),\n                    actionType: i18n.t('serviceMessages:updated_label')\n                })\n            );\n        })\n        .catch(err => {\n            errorHandler(err);\n        });\n};\n\nconst createLessonHandler = (data, isCopy) => {\n    return axios\n        .post(LESSON_URL, data)\n        .then(response => {\n            if (!isCopy) {\n                store.dispatch(storeLessonCard(response.data));\n            }\n            resetFormHandler(LESSON_FORM);\n            successHandler(\n                i18n.t('serviceMessages:back_end_success_operation', {\n                    cardType: i18n.t('formElements:lesson_label'),\n                    actionType: i18n.t('serviceMessages:created_label')\n                })\n            );\n        })\n        .catch(err => {\n            errorHandler(err);\n        });\n};\n\nexport const handleLessonCardService = (card, groupId, semester) => {\n\n    let cardObj = cardObjectHandler(card, groupId, semester);\n    if (!checkUniqLesson(cardObj)) {\n        handleSnackbarOpenService(\n            true,\n            snackbarTypes.ERROR,\n            i18n.t('common:lesson_service_is_not_unique')\n        );\n        setUniqueErrorService(true);\n        return;\n    }\n\n    axios\n        .get(`teachers/${cardObj.teacher.id}`)\n        .then(res => {\n            cardObj = { ...cardObj, teacher: res.data };\n            cardObj.id ? updateLessonHandler(cardObj, groupId) : createLessonHandler(cardObj, false);\n        })\n        .catch(error => errorHandler(error));\n};\nexport const removeLessonCardService = lessonCardId => {\n    axios\n        .delete(LESSON_URL + `/${lessonCardId}`)\n        .then(res => {\n            store.dispatch(deleteLessonCard(lessonCardId));\n            successHandler(\n                i18n.t('serviceMessages:back_end_success_operation', {\n                    cardType: i18n.t('formElements:lesson_label'),\n                    actionType: i18n.t('serviceMessages:deleted_label')\n                })\n            );\n        })\n        .catch(err => {\n            errorHandler(err);\n        });\n};\n\nexport const selectLessonCardService = lessonCardId => {\n    store.dispatch(selectLessonCard(lessonCardId));\n};\n\nexport const copyLessonCardService = lessonGroupObj => {\n    const groupList = [];\n    lessonGroupObj.group.map(groupItem => groupList.push(groupItem.id));\n    axios\n        .post(\n            COPY_LESSON_URL + `?lessonId=${lessonGroupObj.lesson.id}`,\n            groupList\n        )\n        .then(response => {\n            successHandler(\n                i18n.t('serviceMessages:back_end_success_operation', {\n                    cardType: i18n.t('formElements:lesson_label'),\n                    actionType: i18n.t('serviceMessages:copied_label')\n                })\n            );\n        })\n        .catch(err => {\n            errorHandler(err);\n        });\n};\n\nexport const selectGroupIdService = groupId => {\n    store.dispatch(selectGroupId(groupId));\n};\n\nexport const setUniqueErrorService = isUniqueError => {\n    store.dispatch(setUniqueError(isUniqueError));\n};\n","import * as actionTypes from './actionsType';\n\nexport const storeLessonCard = res => {\n    return {\n        type: actionTypes.ADD_LESSON_CARD,\n        result: res\n    };\n};\n\nexport const setLessonsCards = res => {\n    return {\n        type: actionTypes.SET_LESSONS_CARDS,\n        result: res\n    };\n};\n\nexport const setLessonTypes = res => {\n    return {\n        type: actionTypes.SET_LESSON_TYPES,\n        result: res\n    };\n};\n\nexport const deleteLessonCard = res => {\n    return {\n        type: actionTypes.DELETE_LESSON_CARD,\n        result: res\n    };\n};\n\nexport const selectLessonCard = res => {\n    return {\n        type: actionTypes.SELECT_LESSON_CARD,\n        result: res\n    };\n};\n\nexport const updateLessonCard = res => {\n    return {\n        type: actionTypes.UPDATE_LESSON_CARD,\n        result: res\n    };\n};\n\nexport const selectGroupId = res => {\n    return {\n        type: actionTypes.SELECT_GROUP_ID,\n        result: res\n    };\n};\n\nexport const setUniqueError = res => {\n    return {\n        type: actionTypes.SET_UNIQUE_ERROR,\n        result: res\n    };\n};\n","import { store } from '../index';\nimport { DISABLED_ROOMS_URL, ROOM_URL } from '../constants/axios';\nimport { ROOM_FORM } from '../constants/reduxForms';\nimport axios from '../helper/axios';\n\nimport {\n    showListOfRooms,\n    deleteRoom,\n    addRoom,\n    selectOneRoom,\n    updateOneRoom,\n    clearRoomOne,\n    setDisabledRooms\n} from '../redux/actions/rooms';\n\nimport { errorHandler, successHandler } from '../helper/handlerAxios';\nimport { resetFormHandler } from '../helper/formHelper';\n\nimport i18n from '../helper/i18n';\n\nexport const showListOfRoomsService = () => {\n    axios\n        .get(ROOM_URL)\n        .then(response => {\n            let bufferArray = [];\n            const results = response.data;\n            for (const key in results) {\n                bufferArray.push({\n                    id: key,\n                    ...results[key]\n                });\n            }\n            store.dispatch(showListOfRooms(bufferArray));\n        })\n        .catch(error => errorHandler(error));\n};\n\nexport const deleteRoomCardService = id => {\n    axios\n        .delete(ROOM_URL + `/${id}`)\n        .then(res => {\n            store.dispatch(deleteRoom(id));\n            getDisabledRoomsService();\n            showListOfRoomsService();\n            successHandler(\n                i18n.t('serviceMessages:back_end_success_operation', {\n                    cardType: i18n.t('formElements:room_label'),\n                    actionType: i18n.t('serviceMessages:deleted_label')\n                })\n            );\n        })\n        .catch(error => errorHandler(error));\n};\n\nexport const getDisabledRoomsService = () => {\n    axios\n        .get(DISABLED_ROOMS_URL)\n        .then(res => {\n            store.dispatch(setDisabledRooms(res.data));\n        })\n        .catch(error => errorHandler(error));\n};\n\nexport const setDisabledRoomsService = room => {\n    room.disable = true;\n    put(room);\n};\n\nexport const setEnabledRoomsService = room => {\n    room.disable = false;\n    put(room);\n};\n\nconst put = values => {\n    axios\n        .put(ROOM_URL, values)\n        .then(result => {\n            store.dispatch(updateOneRoom(result.data));\n            resetFormHandler(ROOM_FORM);\n            getDisabledRoomsService();\n            showListOfRoomsService();\n            successHandler(\n                i18n.t('serviceMessages:back_end_success_operation', {\n                    cardType: i18n.t('formElements:room_label'),\n                    actionType: i18n.t('serviceMessages:updated_label')\n                })\n            );\n        })\n        .catch(error => errorHandler(error));\n};\nconst post = values => {\n    axios\n        .post(ROOM_URL, values)\n        .then(res => {\n            store.dispatch(addRoom(res.data));\n            resetFormHandler(ROOM_FORM);\n            successHandler(\n                i18n.t('serviceMessages:back_end_success_operation', {\n                    cardType: i18n.t('formElements:room_label'),\n                    actionType: i18n.t('serviceMessages:created_label')\n                })\n            );\n        })\n        .catch(error => errorHandler(error));\n};\n\nexport const createRoomService = values => {\n    if (values.id) {\n        const newValue = {\n            id: values.id,\n            name: values.name,\n            type: { id: +values.type, description: values.typeDescription }\n        };\n        put(newValue);\n    } else {\n        const newValue = {\n            name: values.name,\n            type: { id: +values.type, description: values.typeDescription }\n        };\n\n        post(newValue);\n    }\n};\n\nexport const selectOneRoomService = roomId => {\n    store.dispatch(selectOneRoom(roomId));\n};\n\nexport const clearRoomOneService = () => {\n    store.dispatch(clearRoomOne());\n    resetFormHandler(ROOM_FORM);\n};\n","import * as actionsType from './actionsType';\n\nexport const addRoom = room => {\n    return {\n        type: actionsType.ADD_ROOM,\n        result: room\n    };\n};\n\nexport const deleteRoom = id => {\n    return {\n        type: actionsType.DELETE_ROOM,\n        result: id\n    };\n};\n\nexport const showListOfRooms = rooms => {\n    return {\n        type: actionsType.SHOW_LIST_OF_ROOMS,\n        result: rooms\n    };\n};\n\nexport const  setDisabledRooms = rooms => {\n    return {\n        type: actionsType.SET_DISABLED_ROOMS,\n        result: rooms\n    };\n};\n\nexport const selectOneRoom = id => {\n    return {\n        type: actionsType.SELECT_ONE_ROOM,\n        result: id\n    };\n};\n\nexport const updateOneRoom = room => {\n    return {\n        type: actionsType.UPDATE_ONE_ROOM,\n        result: room\n    };\n};\n\nexport const clearRoomOne = () => ({\n    type: actionsType.CLEAR_ROOM_ONE\n});\n\n\n","import React from 'react';\n\nimport { colors } from '../../constants/schedule/colors';\nimport { cssClasses } from '../../constants/schedule/cssClasses';\nimport { checkAvailabilityScheduleService } from '../../services/scheduleService';\nimport { setLoadingService } from '../../services/loadingService';\nimport './Board.scss';\n\nconst Board = props => {\n    const itemGroupId = props.itemGroupId;\n    const { day, classDay, classes,group } = props;\n    const drop = e => {\n        e.preventDefault();\n        const card_id = e.dataTransfer.getData('card_id');\n\n        const card = document.getElementById(card_id);\n        if (card) card.style.display = 'block';\n\n        const arr = e.target.id.split('-');\n        const day = arr[3];\n        const classId = arr[5];\n        const week = arr[7];\n\n        const item = JSON.parse(card.childNodes[0].value);\n        let itemId = item.id;\n\n        let obj = {\n            lessonId: item.lesson.id,\n            dayOfWeek: day.toUpperCase(),\n            periodId: +classId,\n            evenOdd: week.toUpperCase(),\n            semesterId: props.currentSemester.id\n        };\n\n        checkAvailabilityScheduleService(obj);\n\n        setLoadingService(true);\n        if (itemId) obj = { ...obj, id: itemId };\n\n        props.setModalData({ item: obj, groupId: item.lesson.group.id });\n        props.openDialog();\n    };\n\n    const dragOver = e => {\n        const target = e.target;\n        const children = target.childNodes;\n        const arr = target.id.split('-');\n        const borderGroupId = +arr[1];\n\n        if (\n            borderGroupId !== itemGroupId &&\n            target.classList.contains(cssClasses.SCHEDULE_BOARD)\n        ) {\n            target.style.backgroundColor = colors.DANGER;\n        } else if (\n            target.classList.contains(cssClasses.SCHEDULE_BOARD) &&\n            children[1]\n        ) {\n            children[1].style.backgroundColor = colors.DANGER;\n            target.style.backgroundColor = colors.DANGER;\n        } else if (\n            !children[1] &&\n            target.classList.contains(cssClasses.SCHEDULE_BOARD)\n        ) {\n            target.style.backgroundColor = colors.ALLOW;\n            e.preventDefault();\n        }\n    };\n\n    const dragLeave = e => {\n        const target = e.target;\n        const children = target.childNodes;\n        const parent = target.parentNode;\n\n        const arr = target.id.split('-');\n        const borderGroupId = +arr[1];\n\n        if (borderGroupId === itemGroupId && !target.childNodes[1]) {\n            target.style.backgroundColor = colors.POSSIBILITY;\n        } else if (\n            target.classList.contains(cssClasses.SCHEDULE_BOARD) &&\n            children[1]\n        ) {\n            target.style.backgroundColor = colors.NOTHING;\n            children[1].style.backgroundColor = colors.NOTHING;\n        } else if (\n            parent &&\n            parent.classList.contains(cssClasses.SCHEDULE_BOARD)\n        ) {\n            parent.style.backgroundColor = colors.NOTHING;\n            parent.parentNode.style.backgroundColor = colors.NOTHING;\n        } else {\n            target.style.backgroundColor = colors.NOTHING;\n        }\n    };\n    const addClassDayBoard = () => {\n        if (classDay !== null && classDay !== undefined) {\n            const dayClassWeek = document.getElementsByClassName(classDay);\n            dayClassWeek[0].classList.add('day-class-week');\n            dayClassWeek[1].classList.add('day-class-week');\n        }\n    };\n    const addClass = () => {\n        if (classes !== null && classes !== undefined) {\n            const classesTmp = document.getElementById(classes);\n            classesTmp.classList.add('classes');\n        }\n    };\n    const addDay = () => {\n        if (day !== null && day !== undefined) {\n            const tmp = document.getElementById(day.toUpperCase());\n            tmp.classList.add('day');\n        }\n    };\n    const addGroup = () => {\n        if (group !== null && group !== undefined) {\n            const tmp = document.getElementById(group);\n            tmp.classList.add('group');\n        }\n    };\n    const addEffect = () => {\n        if (props.children[1]) {\n            addClassDayBoard();\n            addClass();\n            addDay();\n            addGroup();\n        }\n    };\n    const removeClassDayBoard = () => {\n        if (classDay !== null && classDay !== undefined) {\n            const dayClassWeek = document.getElementsByClassName(classDay);\n            dayClassWeek[0].classList.remove('day-class-week');\n            dayClassWeek[1].classList.remove('day-class-week');\n        }\n    };\n    const removeClass = () => {\n        if (classes !== null && classes !== undefined) {\n            const classesTmp = document.getElementById(classes);\n            classesTmp.classList.remove('classes');\n        }\n    };\n    const removeDay = () => {\n        if (day !== null && day !== undefined) {\n            const tmp = document.getElementById(day.toUpperCase());\n            tmp.classList.remove('day');\n        }\n    };\n    const removeGroup = () => {\n        if (group !== null && group !== undefined) {\n            const tmp = document.getElementById(group);\n            tmp.classList.remove('group');\n        }\n    };\n    const removeEffect = () => {\n        if (props.children[1]) {\n            removeClassDayBoard();\n            removeClass();\n            removeDay();\n            removeGroup();\n        }\n    };\n    return (\n        <>\n\n            <div\n\n                id={props.id}\n                onDrop={drop}\n                onDragOver={dragOver}\n                onDragLeave={dragLeave}\n                className={props.className}\n                onMouseOver={addEffect}\n                onMouseLeave={removeEffect}\n            >\n                {props.children}\n            </div>\n        </>\n\n    );\n};\n\nexport default Board;\n","import React from 'react';\nimport { MdDelete, MdEdit } from 'react-icons/md';\n\nimport Card from '../../share/Card/Card';\nimport { FaUserPlus } from 'react-icons/fa';\nimport { getTeacherFullName, getTeacherName } from '../../helper/renderTeacher';\nimport groups from '../../redux/reducers/groups';\n\nconst ScheduleItem = props => {\n    let lesson = props.lesson;\n    let itemId;\n\n    const item = props.item || null;\n    const t = props.translation;\n    const { fStrLetterCapital } = props;\n\n    if (item) {\n        lesson = item.lesson;\n        itemId = item.id;\n    }\n\n    const addition = props.addition;\n\n    const itemNodeId = `card-${lesson.id}-group-${lesson.group.id}-${addition}`;\n    const deleteNodeId = `delete-${lesson.id}-${lesson.group.id}-${addition}`;\n\n    const getTitleLesson = () => {\n\n        if (lesson.grouped) {\n            console.log(lesson)\n            //const groupsFilter = props.lessons.filter(les => les.grouped===true&&les.subjectForSite === lesson.subjectForSite);\n            // const groups = groupsFilter.map(item => item.subjectForSite === lesson.subjectForSite &&\n            //     item.lessonType === lesson.lessonType &&\n            //     lesson.teacher.id === item.teacher.id);\n            // console.log(groups)\n        }\n        return null\n\n    };\n\n    const isGroupped = grouped =>\n        grouped ? (\n            <FaUserPlus\n                title={t('formElements:grouped_label')}\n                className='svg-btn copy-btn align-left info-btn'\n            />\n        ) : (\n            ''\n        );\n\n    return (\n        <Card id={itemNodeId} class={props.class} draggable={true}>\n            {getTitleLesson()}\n            <input\n                type='hidden'\n                value={JSON.stringify({\n                    lesson: lesson,\n                    id: itemId\n                })}\n            />\n            {props.inBoard ? (\n                <>\n                    <div className='cards-btns delete-item' id={deleteNodeId}>\n                        <MdDelete\n                            title={t('common:delete_schedule_item')}\n                            className='svg-btn delete-btn'\n                            onClick={() =>\n                                props.deleteItem(itemId, item.lesson.group.id)\n                            }\n                        />\n                        <MdEdit\n                            title={t('common:edit_schedule_item')}\n                            className='svg-btn edit-btn'\n                            onClick={() => props.editItem(item)}\n                        />\n                    </div>\n                </>\n            ) : (\n                ''\n            )}\n\n            <p>\n                {fStrLetterCapital(lesson.subjectForSite)} (\n                {t(\n                    `formElements:lesson_type_${lesson.lessonType.toLowerCase()}_label`\n                )}\n                )\n            </p>\n            <p>{getTeacherName(lesson.teacher)}</p>\n            {props.inBoard ? (\n                <p>\n                    {isGroupped(lesson.grouped)}\n                    <b>{item.room.name}</b>\n                </p>\n            ) : (\n                <p>\n                    {isGroupped(lesson.grouped)}\n                    <b>1</b> {t('formElements:hours_label')}\n                </p>\n            )}\n        </Card>\n    );\n};\n\nexport default ScheduleItem;\n","export const firstStringLetterCapital = str => {\n    return str.replace(/^\\w/, c => c.toUpperCase());\n};\n","import React from 'react';\n\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport { styled } from '@material-ui/core/styles';\nimport TextField from '@material-ui/core/TextField';\n\nimport Board from '../Board/Board';\nimport ScheduleItem from '../ScheduleItem/ScheduleItem';\n\nimport { selectGroupIdService } from '../../services/lessonService';\n\nimport { firstStringLetterCapital } from '../../helper/strings';\n\nconst GroupField = styled(TextField)({\n    width: '150px'\n});\n\nconst ScheduleLessonsList = props => {\n    const { groups, groupId } = props;\n\n    let lessons = props.lessons;\n    const items = props.items;\n\n    const t = props.translation;\n\n    const handleGroupSelect = group => {\n        if (group) selectGroupIdService(group.id);\n    };\n\n    const groupFinderHandle = groupId => {\n        if (groupId) return groups.find(group => group.id === groupId);\n        else return '';\n    };\n\n    const defaultProps = {\n        options: groups,\n        getOptionLabel: option => (option ? option.title : '')\n    };\n\n    const firstStringLetterCapitalHandle = str => {\n        return firstStringLetterCapital(str);\n    };\n\n    const lessonItems = lesson => {\n        let hours = lesson.hours;\n        const lessonItem = [];\n        let els = [];\n        let hoursInSchedule = 0;\n\n        if (items.length > 0) {\n            els = items.filter(item => item.lesson.id === lesson.id);\n        }\n\n        els.forEach(() => {\n            hoursInSchedule += 1;\n        });\n\n        for (let i = 0; i < hours - hoursInSchedule; i++) {\n            console.log(lessons)\n            lessonItem.push(\n                <section key={lesson.id + i}>\n                    <ScheduleItem\n                        index={i}\n                        lesson={lesson}\n                        lessons={lessons}\n                        fStrLetterCapital={firstStringLetterCapitalHandle}\n                        translation={t}\n                        classScheduler={props.classScheduler}\n                    />\n                </section>\n            );\n        }\n        return lessonItem;\n    };\n\n    return (\n        <>\n            {t('common:select_group_schedule')}\n            <Autocomplete\n                {...defaultProps}\n                id=\"group\"\n                clearOnEscape\n                openOnFocus\n                value={groupFinderHandle(groupId)}\n                onChange={(event, newValue) => {\n                    handleGroupSelect(newValue);\n                }}\n                renderInput={params => (\n                    <GroupField\n                        {...params}\n                        label={t('formElements:group_label')}\n                        margin=\"normal\"\n                    />\n                )}\n            />\n            {lessons.length > 0 ? (\n                <Board className=\"board lesson-board\">\n                    {lessons.map(lesson => lessonItems(lesson))}\n                </Board>\n            ) : groupId ? (\n                t('lesson_no_lesson_for_group_label')\n            ) : (\n                ''\n            )}\n        </>\n    );\n};\n\nexport default ScheduleLessonsList;\n","import React, { useState } from 'react';\n\nimport PropTypes from 'prop-types';\n\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport Dialog from '@material-ui/core/Dialog';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport { makeStyles } from '@material-ui/core/styles';\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\nimport { CircularProgress } from '@material-ui/core';\n\nimport '../../share/modals/dialog.scss';\nimport './ScheduleDialog.scss';\n\nconst useStyles = makeStyles(() => ({\n    roomField: {\n        '&': {\n            margin: '0 auto',\n            width: 250\n        }\n    }\n}));\n\nconst ScheduleDialog = props => {\n    const {\n        onClose,\n        itemData,\n        open,\n        rooms,\n        availability,\n        translation,\n        isLoading\n    } = props;\n\n    const [room, setRoom] = useState('');\n    const [sure, setSure] = useState(true);\n\n    const classes = useStyles();\n\n    const handleClose = () => {\n        onClose();\n    };\n\n    const chooseClickHandle = () => {\n        if (!room) return;\n\n        if (\n            !room.available ||\n            !availability.teacherAvailable ||\n            !availability.classSuitsToTeacher\n        ) {\n            setSure(false);\n            return;\n        }\n        onClose({ itemData, room });\n        setRoom(null);\n    };\n\n    const groupByAvailability = arr => {\n        arr.sort((x, y) => {\n            return x === y ? 0 : x ? 1 : -1;\n        });\n        return arr;\n    };\n\n    const defaultProps = {\n        options: availability.rooms\n            ? groupByAvailability(availability.rooms)\n            : rooms,\n        getOptionLabel: option =>\n            option\n                ? option.available\n                    ? option.name + ` (${translation('common:available')})`\n                    : option.name + ` (${translation('common:unavailable')})`\n                : ''\n    };\n\n    return (\n        <Dialog\n            disableBackdropClick={true}\n            onClose={handleClose}\n            aria-labelledby='simple-dialog-title'\n            open={open}\n        >\n            {sure ? (\n                <>\n                    {isLoading ? (\n                        <div className='circular-progress-dialog'>\n                            <CircularProgress />\n                        </div>\n                    ) : (\n                        <>\n                            <DialogTitle id='simple-dialog-title'>\n                                {translation('common:schedule_dialog_title')}\n                            </DialogTitle>\n                            <div className='availability-info'>\n                                {!availability.classSuitsToTeacher ? (\n                                    <p className='availability-warning'>\n                                        {translation(\n                                            'common:class_does_not_suit_for_teacher'\n                                        )}\n                                    </p>\n                                ) : (\n                                    ''\n                                )}\n                                {!availability.teacherAvailable ? (\n                                    <p className='availability-warning'>\n                                        {translation(\n                                            'common:teacher_is_unavailable'\n                                        )}{' '}\n                                    </p>\n                                ) : (\n                                    ''\n                                )}\n                            </div>\n                            <Autocomplete\n                                {...defaultProps}\n                                id='group'\n                                clearOnEscape\n                                openOnFocus\n                                className={classes.roomField}\n                                onChange={(event, newValue) => {\n                                    setRoom(newValue);\n                                }}\n                                renderInput={params => (\n                                    <TextField\n                                        {...params}\n                                        label={translation(\n                                            'formElements:room_label'\n                                        )}\n                                        margin='normal'\n                                    />\n                                )}\n                            />\n                            <div className='buttons-container'>\n                                <Button\n                                    className='dialog-button'\n                                    variant='contained'\n                                    color='primary'\n                                    onClick={() => chooseClickHandle()}\n                                >\n                                    {translation(\n                                        'formElements:choose_button_title'\n                                    )}\n                                </Button>\n                                <Button\n                                    className='dialog-button'\n                                    variant='contained'\n                                    onClick={() => onClose()}\n                                >\n                                    {translation(\n                                        'formElements:cancel_button_title'\n                                    )}\n                                </Button>\n                            </div>\n                        </>\n                    )}\n                </>\n            ) : (\n                <>\n                    <DialogTitle id='simple-dialog-title'>\n                        <p className='availability-warning'>\n                            {!room.available\n                                ? translation('common:room_is_unavailable') +\n                                '. '\n                                : ''}\n                        </p>\n                        <p className='availability-warning'>\n                            {!availability.teacherAvailable\n                                ? translation('common:teacher_is_unavailable') +\n                                '. '\n                                : ''}\n                        </p>\n\n                        <p className='availability-warning'>\n                            {!availability.classSuitsToTeacher\n                                ? translation(\n                                'common:class_does_not_suit_for_teacher'\n                            ) + '. '\n                                : ''}\n                        </p>\n\n                        {translation('common:are_you_sure')}\n                    </DialogTitle>\n                    <div className='buttons-container'>\n                        <Button\n                            className='dialog-button'\n                            variant='contained'\n                            color='primary'\n                            onClick={() => {\n                                onClose({ itemData, room });\n                                setSure(true);\n                            }}\n                        >\n                            {translation('common:yes_button_title')}\n                        </Button>\n                        <Button\n                            className='dialog-button'\n                            variant='contained'\n                            onClick={() => setSure(true)}\n                        >\n                            {translation('common:no_button_title')}\n                        </Button>\n                    </div>\n                </>\n            )}\n        </Dialog>\n    );\n};\n\nScheduleDialog.propTypes = {\n    onClose: PropTypes.func.isRequired,\n    open: PropTypes.bool.isRequired,\n    rooms: PropTypes.array.isRequired,\n    availability: PropTypes.object.isRequired\n};\n\nexport default ScheduleDialog;\n","import React, { useEffect, useRef, useState } from 'react';\nimport { IoMdMore } from 'react-icons/all';\n\nimport Board from '../Board/Board';\nimport ScheduleItem from '../ScheduleItem/ScheduleItem';\nimport ScheduleDialog from '../ScheduleDialog/ScheduleDialog';\n\nimport { firstStringLetterCapital } from '../../helper/strings';\n\nimport {\n    addItemToScheduleService,\n    deleteItemFromScheduleService,\n    checkAvailabilityChangeRoomScheduleService,\n    editRoomItemToScheduleService\n} from '../../services/scheduleService';\n\nimport {\n    getLessonsByGroupService,\n    selectGroupIdService\n} from '../../services/lessonService';\nimport { setLoadingService } from '../../services/loadingService';\n\nimport { cssClasses } from '../../constants/schedule/cssClasses';\nimport { colors } from '../../constants/schedule/colors';\n\nimport { makeStyles } from '@material-ui/core/styles';\nimport './Schedule.scss';\nimport i18n from 'i18next';\n\nconst Schedule = props => {\n    const { groups, itemGroupId, groupId } = props;\n    const [open, setOpen] = useState(false);\n    const [itemData, setItemData] = useState(null);\n    const prevGroupId = usePrevious(groupId);\n\n    function usePrevious(value) {\n        const ref = useRef();\n        useEffect(() => {\n            ref.current = value;\n        });\n        return ref.current;\n    }\n\n    useEffect(() => {\n        if (groupId !== null) {\n            const el = document.getElementById(`group-${groupId}`);\n            el.scrollIntoView({ block: 'center', inline: 'center' });\n            const parent = el.parentNode;\n            parent.classList.add('selected-group');\n        }\n        if (prevGroupId) {\n            const prevEl = document.getElementById(`group-${prevGroupId}`);\n            const parent = prevEl.parentNode;\n            parent.classList.remove('selected-group');\n        }\n    }, [groupId]);\n\n    const setNewItemHandle = (item, room, groupId) => {\n        getLessonsByGroupService(groupId);\n        selectGroupIdService(groupId);\n        if (item.id) deleteItemFromScheduleService(item.id);\n\n        addItemToScheduleService({ ...item, roomId: room.id });\n    };\n\n    const setEditItemHandle = (itemId, roomId, groupId) => {\n        getLessonsByGroupService(groupId);\n        selectGroupIdService(groupId);\n        editRoomItemToScheduleService({ itemId, roomId });\n    };\n\n    const handleClickOpen = () => {\n        setOpen(true);\n    };\n\n    const handleClose = value => {\n        setOpen(false);\n        if (value) {\n            setLoadingService(true);\n            let el = '';\n            if (value.itemData.item.id) {\n                setEditItemHandle(\n                    value.itemData.item.id,\n                    value.room.id,\n                    value.itemData.groupId\n                );\n\n                el = document.getElementById(\n                    'card-' +\n                    value.itemData.item.lesson.id +\n                    '-group-' +\n                    value.itemData.groupId +\n                    '-in-day-' +\n                    value.itemData.item.dayOfWeek.toLowerCase() +\n                    '-class-' +\n                    value.itemData.item.period.id +\n                    '-week-' +\n                    value.itemData.item.evenOdd.toLowerCase()\n                );\n            } else {\n                setNewItemHandle(\n                    value.itemData.item,\n                    value.room,\n                    value.itemData.groupId\n                );\n                el = document.getElementById(\n                    'group-' +\n                    value.itemData.groupId +\n                    '-day-' +\n                    value.itemData.item.dayOfWeek.toLowerCase() +\n                    '-class-' +\n                    value.itemData.item.periodId +\n                    '-week-' +\n                    value.itemData.item.evenOdd.toLowerCase()\n                );\n            }\n            el.scrollIntoView();\n            setTimeout(() => {\n                el.style.backgroundColor = colors.ALLOW;\n            }, 1000);\n\n            setTimeout(() => {\n                el.style.backgroundColor = colors.NOTHING;\n            }, 3000);\n        }\n    };\n\n    const items = props.items;\n\n    const currentSemester = props.currentSemester;\n    const days = currentSemester.semester_days;\n    const classes = currentSemester.semester_classes;\n\n    const t = props.translation;\n\n    //const dayContainerHeight = classes.length * 185.5 + 4.6 * classes.length;\n    const dayContainerHeight = classes.length * 150;\n\n    const useStyles = makeStyles({\n        dayContainer: {\n            // height: dayContainerHeight,\n            // maxHeight: dayContainerHeight\n        },\n        day: {\n            height: dayContainerHeight,\n            maxHeight: dayContainerHeight\n        }\n    });\n    const elClasses = useStyles();\n\n    const firstStringLetterCapitalHandle = str => {\n        return firstStringLetterCapital(str);\n    };\n\n    const deleteItemFromScheduleHandler = (itemId, groupId) => {\n        deleteItemFromScheduleService(itemId);\n        getLessonsByGroupService(groupId);\n        selectGroupIdService(groupId);\n    };\n    const editItemOnScheduleHandler = item => {\n        setItemData({ item: item, groupId: item.lesson.group.id });\n        getLessonsByGroupService(item.lesson.group.id);\n        selectGroupIdService(item.lesson.group.id);\n\n        let itemId = item.id;\n\n        let obj = {\n            dayOfWeek: item.dayOfWeek,\n            periodId: +item.period.id,\n            evenOdd: item.evenOdd,\n            semesterId: item.lesson.semester.id\n        };\n        checkAvailabilityChangeRoomScheduleService(obj);\n        setLoadingService(true);\n        if (itemId) obj = { ...obj, id: itemId };\n        setOpen(true);\n    };\n\n    const conditionFunc = (item, lesson, group) => {\n        return (\n            `group-${\n                item.lesson.group.id\n            }-day-${item.dayOfWeek.toLowerCase()}-class-${\n                item.period.id\n            }-week-${item.evenOdd.toLowerCase()}` ===\n            `group-${group.id}-day-${lesson.day.name}-class-${lesson.classNumber.id}-week-${lesson.week}`\n        );\n    };\n\n    const addDeleteBtnToItem = (item, group, lesson) => {\n        const addition = `in-day-${lesson.day.name}-class-${lesson.classNumber.id}-week-${lesson.week}`;\n        const itemNodeId = `card-${item.lesson.id}-group-${group.id}-${addition}`;\n        const deleteNodeId = `delete-${item.lesson.id}-${group.id}-${addition}`;\n        setTimeout(() => {\n            const itemNode = document.getElementById(itemNodeId);\n            const deleteNode = document.getElementById(deleteNodeId);\n            if (deleteNode && itemNode) {\n                itemNode.addEventListener('mouseenter', () => {\n                    deleteNode.style.display = 'block';\n                });\n                itemNode.addEventListener('mouseleave', () => {\n                    deleteNode.style.display = 'none';\n                });\n            }\n        }, 1000);\n    };\n\n    const itemInBoard = (group, lesson, index) => {\n        for (let item of items) {\n            if (conditionFunc(item, lesson, group)) {\n                const addition = `in-day-${lesson.day.name}-class-${lesson.classNumber.id}-week-${lesson.week}`;\n                addDeleteBtnToItem(item, group, lesson);\n                return (\n                    <section\n                        key={group.id + index + item.id}\n                        className={cssClasses.IN_BOARD_SECTION}\n                    >\n                        <ScheduleItem\n                            inBoard={true}\n                            addition={addition}\n                            class={cssClasses.IN_BOARD_CARD}\n                            item={item}\n                            deleteItem={deleteItemFromScheduleHandler}\n                            editItem={editItemOnScheduleHandler}\n                            fStrLetterCapital={firstStringLetterCapitalHandle}\n                            translation={t}\n                        />\n                    </section>\n                );\n            }\n        }\n    };\n\n    const allLessons = [];\n    days.forEach(day => {\n        classes.forEach(classNumber => {\n            for (let i = 0; i < 2; i++) {\n                if ((i + 1) % 2 === 0) {\n                    allLessons.push({\n                        day: { name: day.toLowerCase() },\n                        classNumber,\n                        week: 'even'\n                    });\n                } else {\n                    allLessons.push({\n                        day: { name: day.toLowerCase() },\n                        classNumber,\n                        week: 'odd'\n                    });\n                }\n            }\n        });\n    });\n    const getDayColour = (index) => {\n        return index % 2 ? 'violet-day' : 'blue-day';\n    };\n\n    return (\n        <section className='cards-container schedule'>\n\n            <ScheduleDialog\n                translation={t}\n                itemData={itemData}\n                rooms={props.rooms}\n                availability={props.availability}\n                open={open}\n                isLoading={props.isLoading}\n                onClose={handleClose}\n            />\n            <aside className='day-classes-aside'>\n                <section className='card empty-card'>Група\n                </section>\n                {days.map((day, index) => (\n\n                    <section\n                        className={\n                            elClasses.dayContainer +\n                            ' cards-container day-container'\n                        }\n                        key={day}\n                    >\n                        <section\n                            id={day}\n                            className={`${elClasses.day} ${getDayColour(index)} schedule-day card`\n                            }\n                        >\n                            {t(`day_of_week_${day}`)}\n                        </section>\n                        <section className='class-section'>\n                            {classes.map(classScheduler => (\n                                <>\n                                    <p className={`day-class-week-general ${day}-${classScheduler.id}`}>\n                                    </p>\n                                    <section\n                                        id={`${classScheduler.id}-${day}`}\n                                        className='card schedule-class'\n                                        key={classScheduler.id}\n                                    >\n                                        {classScheduler.class_name}\n                                    </section>\n                                    <p className={`day-class-week-general ${day}-${classScheduler.id}`}>\n                                    </p>\n                                </>\n\n                            ))}\n                        </section>\n                    </section>\n                ))}\n            </aside>\n\n            <section className='groups-section '>\n                {groups.map((group) => (\n                    <section\n                        key={'group-' + group.id}\n                        className='group-section'\n                        id={`${group.id}`}\n                    >\n\n                        <div\n                            className={`group-title card`}\n                            id={`group-${group.id}`}\n                        >\n\n\n                            {group.title}\n                        </div>\n                        {allLessons.map((lesson, index) => (\n                            <div\n                                key={group + '-' + index}\n                                className={`board-div`}\n                            >\n                                <Board\n                                    group={group.id}\n                                    day={lesson.day.name}\n                                    classes={`${lesson.classNumber.id}-${(lesson.day.name).toUpperCase()}`}\n                                    classDay={`${(lesson.day.name).toUpperCase()}-${lesson.classNumber.id}`}\n                                    currentSemester={currentSemester}\n                                    setModalData={setItemData}\n                                    openDialog={handleClickOpen}\n                                    itemGroupId={itemGroupId}\n                                    id={`group-${group.id}-day-${lesson.day.name}-class-${lesson.classNumber.id}-week-${lesson.week}`}\n                                    className={`board card ${cssClasses.SCHEDULE_BOARD} group-${group.id} schedule-board `}\n                                >\n                                    <IoMdMore\n                                        className='more-icon'\n                                        title={\n                                            `${t(\n                                                `formElements:day_label`\n                                            )}: ` +\n                                            t(\n                                                `day_of_week_${lesson.day.name.toUpperCase()}`\n                                            ).toLowerCase() +\n                                            `\\n${t(`week_label`)}: ` +\n                                            t(`week_${lesson.week}_title`) +\n                                            `\\n${t('class_schedule')}: ` +\n                                            lesson.classNumber.class_name\n                                        }\n                                    />\n                                    {itemInBoard(group, lesson, index)}\n                                </Board>\n                            </div>\n                        ))}\n                        <div\n                            className={`group-title card`}\n                            id={`group-${group.id}`}\n                        >\n                            {group.title}\n                        </div>\n                    </section>\n                ))}\n\n            </section>\n        </section>\n    );\n};\n\nexport default Schedule;\n","import React, { useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport { useTranslation } from 'react-i18next';\nimport Button from '@material-ui/core/Button';\n\nimport { showAllGroupsService } from '../../services/groupService';\nimport { getLessonsByGroupService } from '../../services/lessonService';\nimport {\n    setLoadingService,\n    setScheduleLoadingService\n} from '../../services/loadingService';\nimport { getClassScheduleListService } from '../../services/classService';\nimport {\n    getScheduleItemsService,\n    clearSchedule\n} from '../../services/scheduleService';\nimport { showListOfRoomsService } from '../../services/roomService';\n\nimport ScheduleLessonsList from '../../components/ScheduleLessonsList/ScheduleLessonsList';\nimport Schedule from '../../components/Schedule/Schedule';\n\nimport { CircularProgress } from '@material-ui/core';\n\nimport './SchedulePage.scss';\n\nconst SchedulePage = props => {\n    const { t } = useTranslation('common');\n\n    document.title = t('schedule_title');\n\n    const { groups, groupId } = props;\n\n    const itemGroupId = props.itemGroupId;\n\n    const scheduleItems = props.scheduleItems;\n\n    let lessons = props.lessons;\n\n    const isLoading = props.loading;\n\n    useEffect(() => {\n        setLoadingService(true);\n        setScheduleLoadingService(true);\n        getScheduleItemsService();\n    }, []);\n\n    useEffect(() => {\n        showAllGroupsService();\n    }, []);\n    // useEffect(() => showAllPublicGroupsService(props.currentSemester.id), [props.currentSemester.id]);\n\n    useEffect(() => {\n        if (groupId) {\n            setLoadingService(true);\n            getLessonsByGroupService(groupId);\n        }\n    }, [groupId]);\n\n    useEffect(() => getClassScheduleListService(), []);\n\n    useEffect(() => showListOfRoomsService(), []);\n    const handleClearSchedule = () => {\n        if (props.currentSemester.id) {\n            clearSchedule(props.currentSemester.id);\n            if (groupId) {\n                setLoadingService(true);\n                getLessonsByGroupService(groupId);\n            }\n        }\n    };\n\n    return (\n        <>\n\n            <section className='cards-container schedule-page'>\n                <section className='flexbox card '>\n                    {props.scheduleLoading ? (\n                        <CircularProgress />\n                    ) : (\n                        <>\n                            {!props.currentSemester.id ? (\n                                <h2 className='no-current-semester'>\n                                    {t('no_current_semester')}\n                                </h2>\n                            ) : (\n                                <Schedule\n                                    groupId={groupId}\n                                    currentSemester={props.currentSemester}\n                                    groups={groups}\n                                    itemGroupId={itemGroupId}\n                                    items={scheduleItems}\n                                    translation={t}\n                                    rooms={props.rooms}\n                                    availability={props.availability}\n                                    isLoading={isLoading}\n                                />\n                            )\n                            }\n                        </>\n                    )}\n                </section>\n                <aside className='lesson-list card'>\n                    {isLoading ? (\n                        <CircularProgress />\n                    ) : (\n                        <>\n                            <Button\n                                className='buttons-style'\n                                variant='contained'\n                                color='primary'\n                                onClick={() => handleClearSchedule()}\n                            >\n                                {t('clear_schedule_label')}\n                            </Button>\n                            <ScheduleLessonsList\n                                items={scheduleItems}\n                                groups={groups}\n                                lessons={lessons}\n                                groupId={groupId}\n                                translation={t}\n                                classScheduler={\n                                    props.currentSemester.semester_classes\n                                }\n                            />\n                        </>\n                    )}\n                </aside>\n            </section>\n            <section className='for-phones-and-tablets card'>\n                <h1>{t('use_pc')}</h1>\n            </section>\n        </>\n    );\n};\n\nconst mapStateToProps = state => ({\n    groups: state.groups.groups,\n    lessons: state.lesson.lessons,\n    groupId: state.lesson.groupId,\n    loading: state.loadingIndicator.loading,\n    scheduleLoading: state.loadingIndicator.scheduleLoading,\n    scheduleItems: state.schedule.items,\n    itemGroupId: state.schedule.itemGroupId,\n    availability: state.schedule.availability,\n    currentSemester: state.schedule.currentSemester,\n    semester: state.schedule.semester,\n    rooms: state.rooms.rooms\n});\n\nexport default connect(mapStateToProps)(SchedulePage);\n","import React from \"react\";\n\nimport TextField from \"@material-ui/core/TextField\";\n\nconst renderTextField = ({\n  label,\n  input,\n  meta: { touched, invalid, error },\n  ...custom\n}) => {\n  return (\n    <TextField\n      label={label}\n      placeholder={label}\n      error={touched && invalid}\n      helperText={touched && error}\n      {...input}\n      {...custom}\n    />\n  );\n};\n\nexport default renderTextField;\n","import * as actionTypes from './actionsType';\n\nexport const addDepartment = res => {\n    return {\n        type: actionTypes.ADD_DEPARTMENT,\n        result: res\n    };\n};\nexport const getAllDepartments=res=>{\n    return{\n        type:actionTypes.GET_ALL_DEPARTMENTS,\n        result:res\n    }\n}\nexport const getDisabledDepartments=res=>{\n    return{\n        type:actionTypes.GET_DISABLED_DEPARTMENTS,\n        result:res\n    }\n}\nexport const setDisabledDepartment=res=>{\n    return{\n        type:actionTypes.SET_DISABLED_DEPARTMENT,\n        result:res\n    }\n}\nexport const setEnabledDepartment=res=>{\n    return{\n        type:actionTypes.SET_ENABLED_DEPARTMENT,\n        result:res\n    }\n}\nexport const clearDepartmentForm=()=>{\n    return{\n        type:actionTypes.CLEAR_DEPARTMENT_FORM\n    }\n}\nexport const deleteDepartment=res=>{\n    return{\n        type:actionTypes.DELETE_DEPARTMENT,\n        result:res\n    }\n}\nexport const getDepartItemById=res=>{\n    return {\n        type:actionTypes.GET_DEPARTMENT_BY_ID,\n        result:res\n    }\n}\nexport const updateDepart=res=>{\n    return {\n        type:actionTypes.UPDATE_DEPARTMENT,\n        result:res\n    }\n}","import axios from '../helper/axios';\nimport { DEPARTMENT_URL, SUBJECT_URL } from '../constants/axios';\nimport { store } from '../index';\nimport { addSubject } from '../redux/actions';\nimport { resetFormHandler } from '../helper/formHelper';\nimport { DEPARTMENT_FORM, SUBJECT_FORM } from '../constants/reduxForms';\nimport { errorHandler, successHandler } from '../helper/handlerAxios';\nimport i18n from '../helper/i18n';\nimport {\n    addDepartment,\n    clearDepartmentForm,\n    deleteDepartment,\n    getAllDepartments, getDepartItemById,\n    getDisabledDepartments, setDisabledDepartment, setEnabledDepartment, updateDepart\n} from '../redux/actions/departments';\n\nexport const createDepartmentService = data => {\n    axios\n        .post(DEPARTMENT_URL, data)\n        .then(response => {\n            store.dispatch(addDepartment(response.data));\n            resetFormHandler(DEPARTMENT_FORM);\n            successHandler(\n                i18n.t('serviceMessages:back_end_success_operation', {\n                    cardType: i18n.t('formElements:department_label'),\n                    actionType: i18n.t('serviceMessages:created_label')\n                })\n            );\n        })\n        .catch(error => errorHandler(error));\n};\n\nexport const getAllDepartmentsService = () => {\n    axios\n        .get(DEPARTMENT_URL)\n        .then(response => {\n            store.dispatch(getAllDepartments(response.data));\n        })\n        .catch(error => errorHandler(error));\n};\nexport const getDisabledDepartmentsService = () => {\n    axios\n        .get(`${DEPARTMENT_URL}/disabled`)\n        .then(response => {\n            store.dispatch(getDisabledDepartments(response.data));\n        })\n        .catch(error => errorHandler(error));\n};\nexport const setDisabledDepartmentService = (data) => {\n    axios\n        .put(`${DEPARTMENT_URL}`, data)\n        .then(response => {\n            store.dispatch(setDisabledDepartment(response.data));\n        })\n        .catch(error => errorHandler(error));\n};\nexport const setEnabledDepartmentService = (data) => {\n    axios\n        .put(`${DEPARTMENT_URL}`, data)\n        .then(response => {\n            store.dispatch(setEnabledDepartment(response.data));\n        })\n        .catch(error => errorHandler(error));\n};\nexport const updateDepartmentService = (data) => {\n    axios\n        .put(`${DEPARTMENT_URL}`, data)\n        .then(response => {\n            store.dispatch(updateDepart(response.data));\n            resetFormHandler(DEPARTMENT_FORM);\n            successHandler(\n                i18n.t('serviceMessages:back_end_success_operation', {\n                    cardType: i18n.t('formElements:department_label'),\n                    actionType: i18n.t('serviceMessages:updated_label')\n                })\n            );\n        })\n        .catch(error => errorHandler(error));\n};\nexport const deleteDepartmentsService = (id) => {\n    axios\n        .delete(`${DEPARTMENT_URL}/${id}`)\n        .then(response => {\n            store.dispatch(deleteDepartment(response.data));\n        })\n        .catch(error => errorHandler(error));\n};\nexport const clearDepartment = () => {\n    store.dispatch(clearDepartmentForm());\n    resetFormHandler(DEPARTMENT_FORM);\n};\nexport const getDepartmentByIdService = (id) => {\n    store.dispatch(getDepartItemById(Number(id)));\n};\n","export const setDisableButton = (pristine, submitting, id) => {\n    if (id !== undefined) {\n        return false;\n    }\n    if (!pristine) {\n        return false;\n    }\n    if (submitting) {\n        return true;\n    }\n    if (id === undefined) {\n        return true;\n    }\n};\nexport const getClearOrCancelTitle = (id, t) => {\n    return id === undefined ? t('clear_button_label') : t('cancel_button_title');\n};","import React, { useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport { Field, reduxForm } from 'redux-form';\n\nimport renderTextField from '../../share/renderedFields/input';\nimport { required } from '../../validation/validateFields';\n\nimport Button from '@material-ui/core/Button';\nimport { styled } from '@material-ui/core/styles';\n\nimport Card from '../../share/Card/Card';\n\nimport { TEACHER_FORM } from '../../constants/reduxForms';\nimport { useTranslation } from 'react-i18next';\n\nimport './AddTeacherForm.scss';\nimport Select from 'react-select';\nimport { ReduxFormSelect } from '../../helper/ReduxFormSelect';\nimport renderSelectField from '../../share/renderedFields/select';\nimport { getDepartmentByIdService } from '../../services/departmentService';\nimport { getClearOrCancelTitle, setDisableButton } from '../../helper/disableComponent';\n\nlet AddTeacher = props => {\n    const { t } = useTranslation('formElements');\n    const { handleSubmit, pristine, submitting, reset,departments,teacher } = props;\n\n    const teacherId = teacher.id;\n\n    useEffect(() => {\n        if (teacherId) {\n            initializeFormHandler(teacher);\n        } else {\n            props.initialize();\n        }\n    }, [teacherId]);\n\n    const initializeFormHandler = teacher => {\n        const department=teacher.department?teacher.department.id:0;\n        props.initialize({\n            id: teacher.id,\n            surname: teacher.surname,\n            name: teacher.name,\n            patronymic: teacher.patronymic,\n            position: teacher.position,\n            email:teacher.email,\n            department\n        });\n    };\n\n    return (\n        <Card class=\"form-card teacher-form\">\n            <form className=\"createTeacherForm w-100\" onSubmit={handleSubmit}>\n                <h2 className=\"form-title\">\n                    {teacherId ? t('edit_title') : t('create_title')}{' '}\n                    {t('teacher_a_label')}\n                </h2>\n\n                <Field\n                    className=\"form-field\"\n                    name=\"surname\"\n                    id=\"surname\"\n                    component={renderTextField}\n                    type=\"text\"\n                    placeholder={t('teacher_surname')}\n                    label={t('teacher_surname')}\n                    validate={[required]}\n                />\n\n                <Field\n                    className=\"form-field\"\n                    name=\"name\"\n                    id=\"name\"\n                    component={renderTextField}\n                    type=\"text\"\n                    placeholder={t('teacher_first_name')}\n                    label={t('teacher_first_name')}\n                    validate={[required]}\n                />\n\n                <Field\n                    className=\"form-field\"\n                    name=\"patronymic\"\n                    id=\"patronymic\"\n                    component={renderTextField}\n                    type=\"text\"\n                    placeholder={t('teacher_patronymic')}\n                    label={t('teacher_patronymic')}\n                    validate={[required]}\n                />\n\n                <Field\n                    className=\"form-field\"\n                    name=\"position\"\n                    id=\"position\"\n                    component={renderTextField}\n                    type=\"text\"\n                    placeholder={t('teacher_position')}\n                    label={t('teacher_position')}\n                    validate={[required]}\n                />\n                <Field\n                    className=\"form-field\"\n                    name=\"email\"\n                    id=\"email\"\n                    component={renderTextField}\n                    type=\"email\"\n                    placeholder={t('email_field')}\n                    label={t('email_field')}\n                />\n                <Field\n                    name=\"department\"\n                    className=\"week-days\"\n                    component={renderSelectField}\n                    label={t('department_teachers_label')}\n                    type=\"text\"\n                    onChange={({target})=> {\n                        getDepartmentByIdService(target.value)\n                    }}\n                >\n                    <option />\n                    {departments.map((item) => (\n                        <option key={item.id} value={item.value}>\n                            {item.label}\n                        </option>\n                    ))}\n                </Field>\n\n                <div className=\"form-buttons-container\">\n                    <Button\n                        className=\"buttons-style\"\n                        variant=\"contained\"\n                        color=\"primary\"\n                        disabled={pristine || submitting}\n                        type=\"submit\"\n                    >\n                        {t('save_button_label')}\n                    </Button>\n                    <Button\n                        className=\"buttons-style\"\n                        variant=\"contained\"\n                        disabled={setDisableButton(pristine,submitting,teacher.id)}\n                        onClick={() => {\n                            reset();\n                            props.onSetSelectedCard(null);\n                        }}\n                    >\n                        {getClearOrCancelTitle(teacher.id,t)}\n                    </Button>\n                </div>\n            </form>\n        </Card>\n    );\n};\n\nconst mapStateToProps = state => ({ teacher: state.teachers.teacher });\n\nAddTeacher = reduxForm({\n    form: TEACHER_FORM\n})(AddTeacher);\n\nexport default connect(mapStateToProps)(AddTeacher);\n","import React from 'react';\n\nimport PropTypes from 'prop-types';\n\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport Dialog from '@material-ui/core/Dialog';\nimport Button from '@material-ui/core/Button';\n\nimport './dialog.scss';\n\nimport i18n from '../../helper/i18n';\nimport { disabledCard } from '../../constants/disabledCard';\n\nexport const ConfirmDialog = props => {\n    const { onClose, whatDelete, cardId, isHide, open } = props;\n\n    const handleClose = () => {\n        onClose(cardId);\n    };\n\n    return (\n        <Dialog\n            disableBackdropClick={true}\n            onClose={handleClose}\n            aria-labelledby=\"confirm-dialog-title\"\n            open={open}\n        >\n            <DialogTitle id=\"confirm-dialog-title\">\n                <>\n                    {isHide ? (\n                        <>\n                            {isHide === disabledCard.HIDE ? (\n                                <>{i18n.t('common:do_you_wanna_disable')}</>\n                            ) : (\n                                <>{i18n.t('common:do_you_wanna_show')}</>\n                            )}\n                        </>\n                    ) : (\n                        <>\n                            {i18n.t('common:do_you_wanna')}{' '}\n                            <span className=\"delete-word\">\n                                {i18n.t('common:delete_word')}\n                            </span>{' '}\n                        </>\n                    )}\n\n                    {i18n.t('common:this_card_type', {\n                        cardType: i18n.t(`formElements:${whatDelete}_element`)\n                    })}\n                </>\n            </DialogTitle>\n            <div className=\"buttons-container\">\n                <Button\n                    className=\"dialog-button\"\n                    variant=\"contained\"\n                    color=\"primary\"\n                    onClick={() => onClose(cardId)}\n                >\n                    {i18n.t('common:yes_button_title')}\n                </Button>\n                <Button\n                    className=\"dialog-button\"\n                    variant=\"contained\"\n                    onClick={() => onClose('')}\n                >\n                    {i18n.t('common:no_button_title')}\n                </Button>\n            </div>\n        </Dialog>\n    );\n};\n\nConfirmDialog.propTypes = {\n    onClose: PropTypes.func.isRequired,\n    open: PropTypes.bool.isRequired\n};\n\nexport default ConfirmDialog;\n","export const cardType = {\n    LESSON: 'Lesson',\n    TEACHER: 'Teacher',\n    CLASS: 'Class',\n    GROUP: 'Group',\n    ROOM: 'Room',\n    TYPE: 'Type',\n    TEMPORARY_SCHEDULE: 'temporary_schedule',\n    SUBJECT: 'Subject',\n    SEMESTER: 'Semester'\n};\n","export const search = (items, term, arr) => {\n\n    if (term.length === 0) return items;\n    \n    return items.filter( item => {\n        for (let i = 0; i < arr.length; i++) {\n            if (String(item[arr[i]]).toLowerCase().indexOf(term.toLowerCase()) > -1) return true;\n        }\n        return false\n    })\n}","import React, { useState } from 'react';\nimport { FaSearch } from 'react-icons/fa';\nimport { TextField } from '@material-ui/core';\nimport { useTranslation } from 'react-i18next';\n\nimport './SearchPanel.scss';\nimport Card from '../../share/Card/Card';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Switch from '@material-ui/core/Switch';\n\nconst SearchPanel = ({ SearchChange, showDisabled, showArchived, forLessons }) => {\n\n    const { t } = useTranslation('formElements');\n    const [term, setTerm] = useState('');\n\n    const [state, setState] = React.useState({\n        checkedB: false,\n        checkedArchived: false\n    });\n\n    const handleChange = event => {\n        switch (event.target.name) {\n            case 'checkedArchived':\n                setState({\n                    ...state,\n                    checkedB: false,\n                    [event.target.name]: event.target.checked\n                });\n                showArchived();\n                break;\n            default:\n                setState({\n                    ...state,\n                    checkedArchived: false,\n                    [event.target.name]: event.target.checked\n                });\n\n                break;\n        }\n        showDisabled();\n\n    };\n\n    const onSearchChange = e => {\n        const term = e.target.value;\n        setTerm(term);\n        SearchChange(term);\n    };\n\n    return (\n        <Card class='search-group'>\n            {!forLessons && <FormControlLabel\n                control={\n                    <Switch\n                        checked={state.checkedB}\n                        onChange={handleChange}\n                        name='checkedB'\n                        color='primary'\n                    />\n                }\n                label={\n                    !state.checkedB\n                        ? t('common:show_disabled')\n                        : t('common:show_enabled')\n                }\n            />}\n            {!forLessons && showArchived ? (\n                <FormControlLabel\n                    control={\n                        <Switch\n                            checked={state.checkedArchived}\n                            onChange={handleChange}\n                            name='checkedArchived'\n                            color='secondary'\n                        />\n                    }\n                    label={\n                        !state.checkedArchived\n                            ? t('show_archived')\n                            : t('show_regular')\n                    }\n                />\n            ) : (\n                ''\n            )}\n\n            <TextField\n                className='form-field'\n                label={<FaSearch />}\n                placeholder={t('type_to_search')}\n                value={term}\n                onChange={onSearchChange}\n            />\n        </Card>\n    );\n};\n\nexport default SearchPanel;\n","import React from 'react'\nimport { FaSadCry } from 'react-icons/fa'\nimport { useTranslation } from 'react-i18next'\n\nimport './NotFound.scss'\n\nconst NotFound = ({name}) => {\n    const {t} = useTranslation('formElements')\n\n    return (\n        <div className='not-found__wrapper'>\n            <div>\n                <FaSadCry className='not-found__icon'/>\n            </div>\n            <p className='not-found__text'>{t('there_is_no')} {name}</p>\n        </div>\n    )\n}\n\nexport default NotFound\n","import { connect } from 'react-redux';\nimport React, { useEffect } from 'react';\nimport { Field, reduxForm } from 'redux-form';\nimport Button from '@material-ui/core/Button';\nimport { useTranslation } from 'react-i18next';\n\nimport './AddGroupForms.scss';\nimport Card from '../../share/Card/Card';\nimport { GROUP_FORM } from '../../constants/reduxForms';\nimport renderTextField from '../../share/renderedFields/input';\nimport {\n    required,\n    uniqueGroup,\n    minLengthValue\n} from '../../validation/validateFields';\nimport { links } from '../../constants/links';\nimport { getClearOrCancelTitle, setDisableButton } from '../../helper/disableComponent';\n\nlet AddGroup = props => {\n    const { t } = useTranslation('formElements');\n    const { handleSubmit, pristine, onReset, submitting,match,group } = props;\n\n    useEffect(() => {\n        if (group&&match.url.includes(links.Edit)&&!match.url.includes(links.Student)) {\n            if (group.id) {\n                props.initialize({\n                    id: group.id,\n                    title: group.title\n                });\n            } else {\n                props.initialize();\n            }\n        }\n    }, [group.id]);\n\n    return (\n        <Card class=\"form-card group-form\">\n            <h2 className=\"group-form__title\">\n                {group.id ? t('edit_title') : t('create_title')}\n                {t('group_y_label')}\n            </h2>\n            <form onSubmit={handleSubmit}>\n                <Field\n                    className=\"form-field\"\n                    name=\"title\"\n                    id=\"title\"\n                    label={t('group_label') + ':'}\n                    component={renderTextField}\n                    validate={[required, minLengthValue, uniqueGroup]}\n                />\n                <div className=\"form-buttons-container group-btns\">\n                    <Button\n                        variant=\"contained\"\n                        className=\"buttons-style \"\n                        color=\"primary\"\n                        disabled={pristine || submitting}\n                        type=\"submit\"\n                    >\n                        {t('save_button_label')}\n                    </Button>\n                    <Button\n                        type=\"button\"\n                        className=\"buttons-style\"\n                        variant=\"contained\"\n                        disabled={setDisableButton(pristine,submitting,group.id)}\n                        onClick={onReset}\n                    >\n                        {getClearOrCancelTitle(group.id,t)}\n                    </Button>\n                </div>\n            </form>\n        </Card>\n    );\n};\n\nconst mapStateToProps = state => ({\n    group: state.groups.group\n});\n\nexport default connect(mapStateToProps)(\n    reduxForm({\n        form: GROUP_FORM\n    })(AddGroup)\n);\n","import React from 'react';\n\nimport MuiAlert from '@material-ui/lab/Alert';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport { snackbarTypes } from '../../constants/snackbarTypes';\n\nconst Alert = props => {\n    return <MuiAlert elevation={6} variant='filled' {...props} />;\n};\n\nconst SnackbarComponent = props => {\n    const message = props.message;\n    const type = props.type;\n    const isOpen = props.isOpen;\n    const handleSnackbarClose = props.handleSnackbarClose;\n    return (\n        <Snackbar\n            open={isOpen}\n            autoHideDuration={props.type === snackbarTypes.ERROR ? null : 3000}\n            onClose={handleSnackbarClose}\n        >\n            <Alert onClose={handleSnackbarClose} severity={type}>\n                {message}\n            </Alert>\n\n        </Snackbar>\n    );\n};\n\nexport default SnackbarComponent;\n","import { store } from '../index';\nimport axios from '../helper/axios';\nimport { DISABLED_SUBJECTS_URL, SUBJECT_URL } from '../constants/axios';\nimport { SUBJECT_FORM } from '../constants/reduxForms';\nimport {\n    addSubject,\n    clearSubject,\n    deleteSubject,\n    selectSubject,\n    setDisabledSubjects,\n    showAllSubjects,\n    updateSubject\n} from '../redux/actions/index';\nimport i18n from '../helper/i18n';\nimport { errorHandler, successHandler } from '../helper/handlerAxios';\nimport { resetFormHandler } from '../helper/formHelper';\n\nexport const selectSubjectService = subjectId =>\n    store.dispatch(selectSubject(subjectId));\n\nexport const handleSubjectService = values =>\n    values.id ? updateSubjectService(values) : createSubjectService(values);\n\nexport const clearSubjectService = () => {\n    store.dispatch(clearSubject());\n    resetFormHandler(SUBJECT_FORM);\n};\n\nexport const showAllSubjectsService = () => {\n    axios\n        .get(SUBJECT_URL)\n        .then(response => {\n            store.dispatch(showAllSubjects(response.data));\n        })\n        .catch(error => errorHandler(error));\n};\n\nexport const removeSubjectCardService = subjectId => {\n    axios\n        .delete(SUBJECT_URL + `/${subjectId}`)\n        .then(response => {\n            store.dispatch(deleteSubject(subjectId));\n            getDisabledSubjectsService();\n            successHandler(\n                i18n.t('serviceMessages:back_end_success_operation', {\n                    cardType: i18n.t('formElements:subject_label'),\n                    actionType: i18n.t('serviceMessages:deleted_label')\n                })\n            );\n        })\n        .catch(error => errorHandler(error));\n};\n\nexport const createSubjectService = data => {\n    axios\n        .post(SUBJECT_URL, data)\n        .then(response => {\n            store.dispatch(addSubject(response.data));\n            resetFormHandler(SUBJECT_FORM);\n            successHandler(\n                i18n.t('serviceMessages:back_end_success_operation', {\n                    cardType: i18n.t('formElements:subject_label'),\n                    actionType: i18n.t('serviceMessages:created_label')\n                })\n            );\n        })\n        .catch(error => errorHandler(error));\n};\n\nexport const updateSubjectService = data => {\n    return axios\n        .put(SUBJECT_URL, data)\n        .then(response => {\n            store.dispatch(updateSubject(response.data));\n            selectSubjectService(null);\n            showAllSubjectsService();\n            getDisabledSubjectsService();\n            resetFormHandler(SUBJECT_FORM);\n            successHandler(\n                i18n.t('serviceMessages:back_end_success_operation', {\n                    cardType: i18n.t('formElements:subject_label'),\n                    actionType: i18n.t('serviceMessages:updated_label')\n                })\n            );\n        })\n        .catch(error => errorHandler(error));\n};\n\nexport const getDisabledSubjectsService = () => {\n    axios\n        .get(DISABLED_SUBJECTS_URL)\n        .then(res => {\n            store.dispatch(setDisabledSubjects(res.data));\n        })\n        .catch(error => errorHandler(error));\n};\n\nexport const setDisabledSubjectsService = subject => {\n    subject.disable = true;\n    updateSubjectService(subject);\n};\n\nexport const setEnabledSubjectsService = subject => {\n    subject.disable = false;\n    updateSubjectService(subject);\n};\n","import * as actionTypes from './actionsType';\n\nexport const showAllSubjects = res => {\n    return {\n        type: actionTypes.SHOW_ALL_SUBJECTS,\n        result: res\n    };\n};\n\nexport const setDisabledSubjects = res => {\n    return {\n        type: actionTypes.SET_DISABLED_SUBJECTS,\n        result: res\n    };\n};\n\nexport const addSubject = res => {\n    return {\n        type: actionTypes.ADD_SUBJECT,\n        result: res\n    };\n};\n\nexport const deleteSubject = res => {\n    return {\n        type: actionTypes.DELETE_SUBJECT,\n        result: res\n    };\n};\n\nexport const selectSubject = res => {\n    return {\n        type: actionTypes.SELECT_SUBJECT,\n        result: res\n    };\n};\n\nexport const updateSubject = res => {\n    return {\n        type: actionTypes.UPDATE_SUBJECT,\n        result: res\n    };\n};\n\nexport const clearSubject = () => {\n    return{\n        type: actionTypes.CLEAR_SUBJECT\n    }\n\n};\n\n","import axios from '../helper/axios';\nimport { STUDENT_URL, SUBJECT_URL } from '../constants/axios';\nimport { store } from '../index';\nimport { addSubject, deleteSubject, selectGroup, updateSubject } from '../redux/actions';\nimport { resetFormHandler } from '../helper/formHelper';\nimport { STUDENT_FORM, SUBJECT_FORM } from '../constants/reduxForms';\nimport { errorHandler, successHandler } from '../helper/handlerAxios';\nimport i18n from '../helper/i18n';\nimport {\n    addStudent,\n    deleteStudent,\n    setStudent, showAllStudents,\n    showAllStudentsByGroupId,\n    updateStudent\n} from '../redux/actions/students';\nimport { getDisabledSubjectsService, selectSubjectService, showAllSubjectsService } from './subjectService';\n\nexport const createStudentService = data => {\n\n    axios\n        .post(STUDENT_URL, data)\n        .then(response => {\n            store.dispatch(addStudent(response.data));\n            resetFormHandler(STUDENT_FORM);\n            successHandler(\n                i18n.t('serviceMessages:back_end_success_operation', {\n                    cardType: i18n.t('formElements:student_a_label'),\n                    actionType: i18n.t('serviceMessages:created_label')\n                })\n            );\n        })\n        .catch(error => errorHandler(error));\n};\nexport const getAllStudentsByGroupId = groupId => {\n    axios\n        .get(STUDENT_URL)\n        .then(response => {\n            let result=response.data.filter(({ group })=>group.id===groupId)\n            store.dispatch(showAllStudentsByGroupId(result));\n        })\n        .catch(error => errorHandler(error));\n};\nexport const getAllStudentsService = () => {\n    axios\n        .get(STUDENT_URL)\n        .then(response => {\n            store.dispatch(showAllStudents(response.data));\n        })\n        .catch(error => errorHandler(error));\n};\nexport const deleteStudentService = student => {\n    axios\n        .delete(STUDENT_URL + `/${student.id}`)\n        .then(response => {\n            store.dispatch(deleteStudent(student.id));\n            getAllStudentsByGroupId(student.group.id)\n            successHandler(\n                i18n.t('serviceMessages:back_end_success_operation', {\n                    cardType: i18n.t('formElements:student_a_label'),\n                    actionType: i18n.t('serviceMessages:deleted_label')\n                })\n            );\n        })\n        .catch(error => errorHandler(error));\n};\nexport const updateStudentService = data => {\n    return axios\n        .put(STUDENT_URL, data)\n        .then(response => {\n            store.dispatch(updateStudent(response.data));\n            selectStudentService(null);\n            getAllStudentsByGroupId(data.prevGroup.id)\n            resetFormHandler(STUDENT_FORM);\n            successHandler(\n                i18n.t('serviceMessages:back_end_success_operation', {\n                    cardType: i18n.t('formElements:student_a_label'),\n                    actionType: i18n.t('serviceMessages:updated_label')\n                })\n            );\n        })\n        .catch(error => errorHandler(error));\n};\nexport const selectStudentService = studentId =>\n    store.dispatch(setStudent(studentId));","import * as actionTypes from './actionsType';\n\nexport const addStudent = res => {\n    return {\n        type: actionTypes.ADD_STUDENT,\n        result: res\n    };\n};\nexport const showAllStudents=res=>{\n    return{\n        type:actionTypes.SHOW_ALL_STUDENTS,\n        result:res\n    };\n}\nexport const showAllStudentsByGroupId=res=>{\n    return{\n        type:actionTypes.SHOW_ALL_STUDENTS_BY_GROUP_ID,\n        result:res\n    };\n}\nexport const deleteStudent=res=>{\n    return{\n        type:actionTypes.DELETE_STUDENT,\n        result:res\n    }\n}\nexport const setStudent=res=>{\n    return{\n        type:actionTypes.SET_STUDENT,\n        result:res\n    }\n}\nexport const updateStudent = res => {\n    return {\n        type: actionTypes.UPDATE_STUDENT,\n        result: res\n    };\n};","import { useHistory } from 'react-router-dom/cjs/react-router-dom';\nimport { links } from '../constants/links';\n\n export const  goToGroupPage =(history) =>{\n        history.push(links.GroupList);\n    }\n","import React, { useEffect } from 'react';\n\nimport PropTypes from 'prop-types';\n\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport Dialog from '@material-ui/core/Dialog';\nimport Button from '@material-ui/core/Button';\n\nimport '../dialog.scss';\nimport './showDataDialog.scss'\nimport './addStudentDialog.scss'\nimport { connect } from 'react-redux';\nimport { useTranslation } from 'react-i18next';\nimport Card from '../../Card/Card';\nimport { Field, reduxForm } from 'redux-form';\nimport renderTextField from '../../renderedFields/input';\nimport { required } from '../../../validation/validateFields';\nimport { STUDENT_FORM, TEACHER_FORM } from '../../../constants/reduxForms';\nimport { FaWindowClose } from 'react-icons/fa';\nimport renderSelectField from '../../renderedFields/select';\nimport { useHistory } from 'react-router-dom/cjs/react-router-dom';\nimport { goToGroupPage } from '../../../helper/pageRedirection';\n let AddStudentDialog =( props) => {\n    const { t } = useTranslation('formElements');\n    const { handleSubmit, pristine, submitting, reset,open,groups,student,match} = props;\n    const studentId = student.id;\n    const history =useHistory();\n    useEffect(() => {\n        if (studentId) {\n            initializeFormHandler(student);\n        } else {\n            props.initialize();\n        }\n    },[studentId]);\n\n\n    const initializeFormHandler = student => {\n        props.initialize({\n            id: student.id,\n            surname: student.surname,\n            name: student.name,\n            patronymic: student.patronymic,\n            email:student.email,\n            group:student.group.id\n        });\n    };\n    return (\n        <Dialog\n            disableBackdropClick={true}\n            aria-labelledby=\"confirm-dialog-title\"\n            open={open}\n        >\n\n            <FaWindowClose\n                title={t('close_label')}\n                className=\"close-dialog\"\n                variant=\"contained\"\n                onClick={() => {\n                    //reset();\n                    props.onSetSelectedCard(null);\n                    goToGroupPage(history);\n                }}\n\n            />\n            <DialogTitle id=\"confirm-dialog-title\">\n                <Card class=\"form-card teacher-form\">\n\n                    <form className=\"createTeacherForm w-100\" onSubmit={handleSubmit}>\n\n                        <h2 className=\"form-title\">\n                            {studentId ? t('edit_title') : t('create_title')}{' '}\n                            {t('student_a_label')}\n                        </h2>\n\n\n                        <Field\n                            className=\"form-field\"\n                            name=\"surname\"\n                            id=\"surname\"\n                            component={renderTextField}\n                            type=\"text\"\n                            placeholder={t('surname_placeholder')}\n                            label={t('surname_placeholder')}\n                            validate={[required]}\n                        />\n\n                        <Field\n                            className=\"form-field\"\n                            name=\"name\"\n                            id=\"name\"\n                            component={renderTextField}\n                            type=\"text\"\n                            placeholder={t('name_placeholder')}\n                            label={t('name_placeholder')}\n                            validate={[required]}\n                        />\n\n                        <Field\n                            className=\"form-field\"\n                            name=\"patronymic\"\n                            id=\"patronymic\"\n                            component={renderTextField}\n                            type=\"text\"\n                            placeholder={t('patronymic_placeholder')}\n                            label={t('patronymic_placeholder')}\n                            validate={[required]}\n                        />\n\n\n                        <Field\n                            className=\"form-field\"\n                            name=\"email\"\n                            id=\"email\"\n                            component={renderTextField}\n                            type=\"email\"\n                            placeholder={t('email_field')}\n                            label={t('email_field')}\n                            validate={[required]}\n                        />\n                        {studentId?\n\n                            <Field\n                                className='form-field'\n                                component={renderSelectField}\n                                name='group'\n                                label={t('type_label')}\n                                validate={[required]}>\n                                defaultValue={student.group.id}\n                                {groups.map(group => (\n                                    <option key={group.id} value={group.id}>\n                                        {group.title}\n                                    </option>\n                                ))}\n                            </Field>\n                            :null\n                        }\n\n\n                        <div className=\"form-buttons-container\">\n                            <Button\n                                className=\"buttons-style\"\n                                variant=\"contained\"\n                                color=\"primary\"\n                                disabled={pristine || submitting}\n                                type=\"submit\"\n                            >\n                                {t('save_button_label')}\n                            </Button>\n                            <Button\n                                className=\"buttons-style\"\n                                variant=\"contained\"\n                                disabled={pristine || submitting}\n                                onClick={() => {\n                                   reset();\n                                   goToGroupPage(history);\n                                    //props.onSetSelectedCard(null);\n                                }}\n                            >\n                                {studentId?t('cancel_button_label'):t('clear_button_label')}\n                            </Button>\n                        </div>\n                    </form>\n                </Card>\n            </DialogTitle>\n        </Dialog>\n    );\n};\n\nAddStudentDialog.propTypes = {\n    onClose: PropTypes.func.isRequired,\n    open: PropTypes.bool.isRequired\n};\nconst mapStateToProps = state => ({\n    student: state.students.student,\n    groups: state.groups.groups,\n    group: state.groups.group,\n});\n\n\n\nAddStudentDialog = reduxForm({\n    form: STUDENT_FORM\n})(AddStudentDialog);\nexport default connect(mapStateToProps, {})(AddStudentDialog);\n","import React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { makeStyles, useTheme } from '@material-ui/core/styles';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableFooter from '@material-ui/core/TableFooter';\nimport TablePagination from '@material-ui/core/TablePagination';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\nimport IconButton from '@material-ui/core/IconButton';\nimport FirstPageIcon from '@material-ui/icons/FirstPage';\nimport KeyboardArrowLeft from '@material-ui/icons/KeyboardArrowLeft';\nimport KeyboardArrowRight from '@material-ui/icons/KeyboardArrowRight';\nimport LastPageIcon from '@material-ui/icons/LastPage';\nimport { getTeacherFullName } from './renderTeacher';\nimport { useTranslation } from 'react-i18next';\nimport { FaEnvelope } from 'react-icons/fa';\nimport TableHead from '@material-ui/core/TableHead';\nimport { Checkbox, withStyles } from '@material-ui/core';\nimport { FaEdit } from 'react-icons/all';\nimport { Delete } from '@material-ui/icons';\nimport ConfirmDialog from '../share/modals/dialog';\nimport  AddStudentDialog  from '../share/modals/modal/AddStudentDialog';\nimport { selectStudentService } from '../services/studentService';\nimport './renderStudentTable.scss'\nimport { links } from '../constants/links';\nimport { connect } from 'react-redux';\nimport {Link} from 'react-router-dom';\n\nconst useStyles1 = makeStyles((theme) => ({\n    root: {\n        flexShrink: 0,\n        marginLeft: theme.spacing(2.5),\n    },\n}));\n\nfunction RenderStudentTableActions(props) {\n    const classes = useStyles1();\n    const theme = useTheme();\n    const { count, page, rowsPerPage, onPageChange } = props;\n\n    const handleFirstPageButtonClick = (event) => {\n        onPageChange(event, 0);\n    };\n\n    const handleBackButtonClick = (event) => {\n        onPageChange(event, page - 1);\n    };\n\n    const handleNextButtonClick = (event) => {\n        onPageChange(event, page + 1);\n    };\n\n    const handleLastPageButtonClick = (event) => {\n        onPageChange(event, Math.max(0, Math.ceil(count / rowsPerPage) - 1));\n    };\n\n    return (\n        <div className={classes.root}>\n            <IconButton\n                onClick={handleFirstPageButtonClick}\n                disabled={page === 0}\n                aria-label=\"first page\"\n            >\n                {theme.direction === 'rtl' ? <LastPageIcon /> : <FirstPageIcon />}\n            </IconButton>\n            <IconButton onClick={handleBackButtonClick} disabled={page === 0} aria-label=\"previous page\">\n                {theme.direction === 'rtl' ? <KeyboardArrowRight /> : <KeyboardArrowLeft />}\n            </IconButton>\n            <IconButton\n                onClick={handleNextButtonClick}\n                disabled={page >= Math.ceil(count / rowsPerPage) - 1}\n                aria-label=\"next page\"\n            >\n                {theme.direction === 'rtl' ? <KeyboardArrowLeft /> : <KeyboardArrowRight />}\n            </IconButton>\n            <IconButton\n                onClick={handleLastPageButtonClick}\n                disabled={page >= Math.ceil(count / rowsPerPage) - 1}\n                aria-label=\"last page\"\n            >\n                {theme.direction === 'rtl' ? <FirstPageIcon /> : <LastPageIcon />}\n            </IconButton>\n        </div>\n    );\n}\n\nRenderStudentTableActions.propTypes = {\n    count: PropTypes.number.isRequired,\n    onPageChange: PropTypes.func.isRequired,\n    page: PropTypes.number.isRequired,\n    rowsPerPage: PropTypes.number.isRequired,\n};\n\n\nconst useStyles2 = makeStyles({\n    table: {\n        minWidth: 500,\n    },\n});\nconst StyledTableCell = withStyles((theme) => ({\n    head: {\n        backgroundColor: theme.palette.common.white,\n        color: theme.palette.common.black,\n    },\n    body: {\n        fontSize: 14,\n    },\n}))(TableCell);\n\n\nconst StyledTableRow = withStyles((theme) => ({\n    root: {\n        '&:nth-of-type(odd)': {\n            backgroundColor: theme.palette.action.hover,\n        },\n    },\n}))(TableRow);\n\nexport default function RenderStudentTable(props) {\n    const ALL_ROWS=-1;\n    const classes = useStyles2();\n    const {students,onDeleteStudent,onSubmit,group,\n           match,student,checkBoxStudents,handleCheckElement,\n           handleAllChecked,handleAllClear,handleChangeCheckedAllBtn,\n        handleClearCheckedAllBtn,checkedAllBtn,handleAllCheckedBtn}=props;\n    const [page, setPage] = React.useState(0);\n    const [rowsPerPage, setRowsPerPage] = React.useState(5);\n    const [openDeleteDialog,setOpenDeleteDialog]=useState(false);\n    const [openEditDialog,setOpenEditDialog]=useState(false);\n    const { t } = useTranslation('formElements');\n    useEffect(()=>{\n        if(match.path.includes(links.Student)&&match.path.includes(links.Edit)) {\n            handleEdit(student.id)\n        }\n    },[props.group.id])\n    useEffect(()=>{\n        if(match.path.includes(links.Student)&&match.path.includes(links.Delete)) {\n            setOpenDeleteDialog(true)\n        }\n    },[props.group.id]);\n\n    const emptyRows = rowsPerPage - Math.min(rowsPerPage, students.length - page * rowsPerPage);\n\n\n\n    const handleChangeRowsPerPage = (event) => {\n        setRowsPerPage(parseInt(event.target.value, 10));\n        setPage(0);\n        handleAllClear();\n        handleClearCheckedAllBtn();\n\n    };\n    const sendMail = (email) => {\n        const mailto =\n            `mailto:${email}`;\n        window.location.href = mailto;\n    }\n    const deleteStudent = (student) => {\n        setOpenDeleteDialog(false);\n        onDeleteStudent(student);\n    }\n    const handleEdit=(studentId)=>{\n        setOpenEditDialog(true);\n        selectStudentService(studentId)\n    }\n    const handleCloseEditDialog=()=>{\n        setOpenEditDialog(false);\n        selectStudentService(null)\n    }\n    const handleSubmit=(data)=>{\n        setOpenEditDialog(false);\n        const sendObject={...data,prevGroup:group}\n        onSubmit(sendObject);\n    }\n    const getCorrectRowCount = (pageItemsCount) => {\n        const resRows=checkBoxStudents.length-pageItemsCount*page;\n       if  (pageItemsCount>resRows||pageItemsCount===ALL_ROWS){\n         return   resRows;\n       }\n       return pageItemsCount;\n    }\nconst handleAllOnPageClick = (event) => {\n        const rowsCount=getCorrectRowCount(rowsPerPage)\n        handleChangeCheckedAllBtn();\n        handleAllChecked(event,rowsCount,page,rowsPerPage);\n}\n    const detectCheckingCheckAllBtn=()=>{\n        const rowsCount=getCorrectRowCount(rowsPerPage);\n        handleAllCheckedBtn (rowsCount,page,rowsPerPage);\n    }\n    const handleChangePage = (event, newPage) => {\n        setPage(newPage);\n\n\n    };\n    const handleCheckElem = (event) => {\n        handleCheckElement(event);\n        detectCheckingCheckAllBtn();\n    }\n    useEffect(()=>{\n        detectCheckingCheckAllBtn()\n    },[page])\n\n\n\n    return (\n        <TableContainer component={Paper}>\n            <Table className={classes.table} aria-label=\"custom pagination table\">\n\n                <TableHead>\n\n                    <TableRow>\n                        <StyledTableCell className=\"check-box\">\n                            <span className={'checked-all'}>\n                            <input\n                                id={'checked-all-input'}\n                                type=\"checkbox\"\n                                checked={checkedAllBtn}\n                                onClick={handleAllOnPageClick}\n                                value=\"checkedAll\"\n                                title={`${t('select_all')}`}\n                            />\n                            </span>\n                        </StyledTableCell>\n                        <StyledTableCell>{t('student_label')}</StyledTableCell>\n                        <StyledTableCell>\n                            <FaEnvelope\n                                className=\"svg-btn send-message\"\n                                title={`${t('send_letter_title')}`}\n                            />\n                        </StyledTableCell>\n                        <StyledTableCell>{t('student_actions')}</StyledTableCell>\n                    </TableRow>\n                </TableHead>\n\n                <TableBody>\n                    {(rowsPerPage > 0\n                            ? checkBoxStudents.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\n                            : checkBoxStudents\n                    ).map((student) => (\n                        <StyledTableRow key={student.id}>\n                            <StyledTableCell component=\"th\" scope=\"row\" align=\"center\">\n                                <input\n                                    key={student.id}\n                                    onClick={handleCheckElem}\n                                    type=\"checkbox\"\n                                    checked={student.checked}\n                                    value={student.id}\n                                    className={'checked-box'}\n                                    title={`${t(\"select_student\")} ${getTeacherFullName(student)}`}\n                                />\n                            </StyledTableCell>\n                            <StyledTableCell component=\"th\" scope=\"row\" align=\"center\">\n                                {getTeacherFullName(student)}\n                            </StyledTableCell>\n                            <StyledTableCell component=\"th\" scope=\"row\" align=\"center\">\n                                <span>\n                                   <button className=\"send-letter-button\"\n                                       title={`${t('send_letter_title')} ${student.email}`}\n                                       onClick={()=>sendMail(student.email)}\n                                   >\n                                       {student.email}\n                                   </button>\n                                </span>\n\n                            </StyledTableCell>\n                            <StyledTableCell component=\"th\" scope=\"row\" align=\"center\">\n                                <span className=\"edit-cell\">\n                                     <Link to={`${links.GroupList}${links.Group}/${group.id}${links.Student}/${student.id}${links.Edit}`}>\n                                    <FaEdit\n                                        className=\"edit-button\"\n                                        title={t('edit_title')}\n                                        onClick={() => handleEdit(student.id)}\n                                    />\n                                     </Link>\n                                     <Link to={`${links.GroupList}${links.Group}/${group.id}${links.Student}/${student.id}${links.Delete}`}>\n                                <Delete\n                                    title={t('delete-title')}\n                                    className=\"delete-button\"\n                                    onClick={()=>setOpenDeleteDialog(true)}\n                                />\n                                     </Link>\n                                </span>\n\n                            </StyledTableCell>\n\n                            <AddStudentDialog\n                                open={openEditDialog}\n                                onSubmit={handleSubmit}\n                                onSetSelectedCard={handleCloseEditDialog}\n                                match={match}\n                            />\n\n                            <ConfirmDialog\n                                selectedValue={''}\n                                cardId={student}\n                                whatDelete={'student'}\n                                open={openDeleteDialog}\n                                onClose={deleteStudent}\n                            />\n                        </StyledTableRow>\n                    ))}\n\n                    {emptyRows > 0 && (\n                        <StyledTableRow style={{ height: 53 * emptyRows }}>\n                            <TableCell colSpan={6} />\n                        </StyledTableRow>\n                    )}\n                </TableBody>\n                <TableFooter>\n                    <StyledTableRow>\n                        <TablePagination\n                            labelRowsPerPage={`${t('rows_per_page')}`}\n                            rowsPerPageOptions={[5, 10, 25, { label: `${t('all_page')}`, value: ALL_ROWS }]}\n                            colSpan={3}\n                            count={students.length}\n                            rowsPerPage={rowsPerPage}\n                            page={page}\n                            SelectProps={{\n                                inputProps: { 'aria-label': 'rows per page' },\n                                native: true,\n                            }}\n                            onPageChange={handleChangePage}\n                            onRowsPerPageChange={handleChangeRowsPerPage}\n                            ActionsComponent={RenderStudentTableActions}\n                        />\n                    </StyledTableRow>\n                </TableFooter>\n            </Table>\n        </TableContainer>\n    );\n}\n\nconst mapStateToProps = state => ({\n    student:state.students.student\n});\n\n connect(mapStateToProps, {})(RenderStudentTable);","import axios from '../helper/axios';\nimport { STUDENTS_TO_GROUP_FILE } from '../constants/axios';\nimport i18n from '../helper/i18n';\nimport { successHandler } from '../helper/handlerAxios';\n\nexport const uploadStudentsToGroupFile = (file, groupId) => {\n    const formData = new FormData();\n    formData.append('file', file);\n    axios\n        .post(`${STUDENTS_TO_GROUP_FILE}${groupId}`, formData)\n        .then((res) => {\n            let students = res.data.length;\n            students += students !== 1 ? ` ${i18n.t('formElements:students_file_label')}` : ` ${i18n.t('formElements:student_file_label')}`;\n            successHandler(\n                i18n.t('serviceMessages:file_backend_success_operation', {\n                    cardType: students,\n                    actionType: i18n.t('serviceMessages:file_label')\n                })\n            );\n        })\n        .catch((err) => alert('File Upload Error'));\n};","import React, { useState } from 'react';\nimport { uploadStudentsToGroupFile } from '../../services/uploadFile';\nimport { Dialog, DialogTitle } from '@material-ui/core';\nimport './UploadFile.scss';\nimport { FaWindowClose } from 'react-icons/fa';\nimport { useTranslation } from 'react-i18next';\nimport Button from '@material-ui/core/Button';\nimport { setLoadingService } from '../../services/loadingService';\n\nexport const UploadFile = (props) => {\n    const { t } = useTranslation('formElements');\n    const [selectedFile, setSelectedFile] = useState(null);\n    const fileInputRef = React.useRef();\n    const { group: { id }, open, handleCloseDialogFile } = props;\n\n    const changeHandler = (event) => {\n        setSelectedFile(event.target.files[0]);\n    };\n\n    const handleSubmission = () => {\n        setLoadingService(true);\n        uploadStudentsToGroupFile(selectedFile, id);\n        fileInputRef.current.value = '';\n        setSelectedFile(null);\n    };\n\n    const setDisabledSendButton = () => {\n        return selectedFile === null;\n    };\n    return (\n        <Dialog\n\n            disableBackdropClick={true}\n            aria-labelledby='confirm-dialog-title'\n            open={open}\n        >\n            <DialogTitle className='upload-dialog' id='confirm-dialog-title'>\n                <FaWindowClose\n                    title={t('close_label')}\n                    className='close-dialog'\n                    variant='contained'\n                    onClick={handleCloseDialogFile}\n\n                />\n                <div>\n                    <input type='file' name='file' accept='.txt, .csv' onChange={changeHandler} ref={fileInputRef} />\n                    {selectedFile ? (\n                        <div>\n                            <p>{`${t('common:name_label')}: ${selectedFile.name}`}</p>\n                            <p>{`${t('common:type_label')}: ${selectedFile.type}`}</p>\n                            <p>{`${t('common:byte_size_label')}: ${selectedFile.size}`}</p>\n                            {/*<p>{`${t('common:last_modified_date')}: ${selectedFile.lastModifiedDate.toLocaleDateString()}`}</p>*/}\n                        </div>\n                    ) : (\n                        <p>{t('common:select_file_label')}</p>\n                    )}\n                    <div>\n                        <Button\n                            className='dialog-button'\n                            variant='contained'\n                            onClick={handleSubmission}\n                            color='primary'\n                            title={t('common:upload_title')}\n                            disabled={setDisabledSendButton()}\n                        >\n                            {t('common:upload_title')}\n                        </Button>\n                    </div>\n                </div>\n            </DialogTitle>\n\n        </Dialog>\n    );\n};\n","import React, { useEffect, useState } from 'react';\n\nimport PropTypes from 'prop-types';\n\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport Dialog from '@material-ui/core/Dialog';\nimport Button from '@material-ui/core/Button';\n\nimport '../dialog.scss';\nimport './showDataDialog.scss';\n\nimport i18n from '../../../helper/i18n';\nimport { connect } from 'react-redux';\nimport { useTranslation } from 'react-i18next';\nimport RenderStudentTable from '../../../helper/renderStudentTable';\nimport { getAllStudentsByGroupId, updateStudentService } from '../../../services/studentService';\nimport Select from 'react-select';\nimport { isObjectEmpty } from '../../../helper/ObjectRevision';\nimport { successHandler } from '../../../helper/handlerAxios';\nimport { UploadFile } from '../../../components/UploadFile/UploadFile';\n\n\nexport const ShowStudentsDialog = props => {\n    const { onClose, cardId, open, onDeleteStudent, students, onSubmit, match, student, groups, group } = props;\n    const [checkBoxStudents, setCheckBoxStudents] = useState([]);\n    const [checkedAll, setCheckedAll] = useState(false);\n    const [openUploadFile, setOpenUploadFile] = useState(false);\n    const [showStudentList, setShowStudentList] = useState(false);\n    const setDefaultGroupOption = () => {\n        return { value: `${group.id}`, label: `${group.title}`, ...group };\n    };\n    const [groupOption, setGroupOption] = useState({});\n    const [defaultGroup, setDefaultGroup] = useState({});\n    useEffect(() => {\n        if (group.id !== null)\n            setDefaultGroup(setDefaultGroupOption());\n    }, [group.id]);\n    const { t } = useTranslation('formElements');\n    useEffect(() => {\n        getAllStudentsByGroupId(props.group.id);\n\n\n    }, [open]);\n    useEffect(() => {\n        getAllStudentsByGroupId(props.group.id);\n\n\n    }, [openUploadFile]);\n    useEffect(() => {\n        parseStudentToCheckBox();\n    }, [props.students]);\n\n    const setGroupsOption = () => {\n        return groups !== undefined ? groups.map(item => {\n            return { value: item.id, label: `${item.title}`, ...item };\n        }) : null;\n\n    };\n\n    const groupsOption = setGroupsOption();\n    const handleClose = () => {\n        onClose(cardId);\n    };\n\n\n    const parseStudentToCheckBox = () => {\n        const studentsCheckBox = [...students];\n        const res = studentsCheckBox.map((item) => {\n            return { ...item, checked: false };\n        });\n        setCheckBoxStudents(res);\n    };\n    const handleCheckElement = (event) => {\n        let studentsTmp = [...checkBoxStudents];\n        studentsTmp.forEach(student => {\n            if (student.id === Number(event.target.value))\n                student.checked = event.target.checked;\n        });\n        setCheckBoxStudents(studentsTmp);\n    };\n    const handleAllChecked = (event, pageItemsCount, page, rowsPerPage) => {\n        let studentsTmp = [...checkBoxStudents];\n        for (let i = (page) * rowsPerPage; i < pageItemsCount + (page) * rowsPerPage; i++) {\n            studentsTmp[i].checked = event.target.checked;\n        }\n        setCheckBoxStudents(studentsTmp);\n    };\n    const handleAllCheckedBtn = (pageItemsCount, page, rowsPerPage) => {\n        let studentsTmp = [...checkBoxStudents];\n        let start = (page) * rowsPerPage;\n        let finish = pageItemsCount + (page) * rowsPerPage;\n        while (start < finish) {\n            if (studentsTmp[start].checked) {\n                start++;\n            } else {\n                break;\n            }\n        }\n        setCheckedAll(start === finish && start !== 0);\n    };\n    const handleAllClear = () => {\n        let studentsTmp = [...checkBoxStudents];\n        studentsTmp.forEach(student => {\n            if (student.checked) {\n                student.checked = false;\n            }\n        });\n        setCheckBoxStudents(studentsTmp);\n    };\n    const handleChangeCheckedAllBtn = () => {\n        setCheckedAll(prevState => !prevState);\n    };\n    const handleClearCheckedAllBtn = () => {\n        setCheckedAll(false);\n    };\n\n\n    const setCurrentGroupOption = (group) => {\n        if (group.id === defaultGroup.id) {\n            getExistingGroupStudent();\n        }\n        setGroupOption(group);\n    };\n    const isChecked = ({ checked }) => {\n        return checked;\n    };\n    const setSelectDisabled = () => {\n        let resChecked = true;\n        for (let i = 0; i < checkBoxStudents.length; i++) {\n            if (isChecked(checkBoxStudents[i])) {\n                resChecked = false;\n                break;\n            }\n        }\n        return resChecked;\n    };\n    const isChooseCurrentGroup = () => {\n        if (isObjectEmpty(groupOption)) {\n            return true;\n        }\n        return groupOption.id === defaultGroup.id;\n    };\n    const setDisabledMoveToGroupBtn = () => {\n        return isChooseCurrentGroup();\n    };\n    const changeStudentItem = (group, student) => {\n        let resData = {};\n        if (student.checked) {\n            const { checked, ...res } = student;\n            resData = { ...res, group: { id: group.id } };\n        }\n        return resData;\n    };\n    const getExistingGroupStudent = () => {\n        return successHandler(\n            i18n.t('serviceMessages:students_exist_in_this_group', {\n                cardType: i18n.t('common:student_title'),\n                actionType: i18n.t('serviceMessages:student_label')\n            })\n        );\n    };\n    const clearSelection = () => {\n        // handleClearCheckedAllBtn();\n        onClose('');\n        setGroupOption({});\n        setShowStudentList(false);\n    };\n    const handleSubmitGroupStudents = () => {\n        if (isObjectEmpty(groupOption)) {\n            getExistingGroupStudent();\n            return;\n        }\n\n        const { value, label, ...res } = groupOption;\n        const currentStudents = [...checkBoxStudents];\n        const resData = [];\n        const prevGroup = { id: defaultGroup.id };\n        for (let i = 0; i < currentStudents.length; i++) {\n            const resItem = changeStudentItem(res, currentStudents[i]);\n            if (!isObjectEmpty(resItem)) {\n                resData.push(resItem);\n            }\n        }\n        ;\n        resData.forEach(item => updateStudentService({ ...item, prevGroup }));\n\n        clearSelection();\n    };\n    const cancelChoosing = () => {\n        clearSelection();\n    };\n    const getDialog = () => {\n        setShowStudentList(true);\n    };\n    const handleOpenDialogFile = () => {\n        setOpenUploadFile(true);\n    };\n    const handleCloseDialogFile = () => {\n        setOpenUploadFile(false);\n    };\n    return (\n        <>\n\n            <Dialog\n                disableBackdropClick={true}\n                onClose={handleClose}\n                aria-labelledby='confirm-dialog-title'\n                open={open}\n            >\n\n                <DialogTitle id='confirm-dialog-title'>\n                    <>\n\n                        <>\n\n\n                            {students.length === 0 ?\n\n                                <>\n\n                                    <h2 className='title-align'>{`${t('group_label')} - `}<span>{`${props.group.title}`}</span>\n                                    </h2>\n                                    {t('no_exist_students_in_group')}\n                                </>\n\n                                :\n                                <span className='table-student-data'>\n                                    <h3 className='title-align'><span>{students.length !== 1 ? `${t('students_label')} ` : `${t('student_label')} `}</span>{`${t('group_students')} `}<span>{`${props.group.title}`}</span></h3>\n\n                                    <RenderStudentTable group={props.group} onDeleteStudent={onDeleteStudent}\n                                                        students={students} onSubmit={onSubmit}\n                                                        match={match}\n                                                        student={props.student}\n                                                        checkBoxStudents={checkBoxStudents}\n                                                        handleCheckElement={handleCheckElement}\n                                                        handleAllChecked={handleAllChecked}\n                                                        handleAllClear={handleAllClear}\n                                                        handleChangeCheckedAllBtn={handleChangeCheckedAllBtn}\n                                                        handleClearCheckedAllBtn={handleClearCheckedAllBtn}\n                                                        checkedAllBtn={checkedAll}\n                                                        handleAllCheckedBtn={handleAllCheckedBtn}\n                                    />\n                            </span>\n                            }\n                        </>\n                    </>\n                </DialogTitle>\n                <div className='buttons-container'>\n                    {<UploadFile group={group} open={openUploadFile} handleCloseDialogFile={handleCloseDialogFile} />}\n                    <Button\n                        className={students.length !== 0 ? 'student-dialog-button-data' : 'student-dialog-button-no-data'}\n                        variant='contained'\n                        onClick={handleOpenDialogFile}\n                        color='primary'\n                        title={i18n.t('upload_from_file')}\n                    >\n                        {i18n.t('common:upload_from_file_title')}\n                    </Button>\n                    {students.length !== 0 ?\n                        <Button\n                            className='student-dialog-button-data'\n                            variant='contained'\n                            onClick={getDialog}\n                            color='primary'\n                            disabled={setSelectDisabled()}\n                            title={i18n.t('choose_group_title')}\n                        >\n                            {i18n.t('choose_group_title')}\n                        </Button>\n                        : null}\n                    <Button\n                        className={students.length !== 0 ? 'student-dialog-button-data' : 'student-dialog-button-no-data'}\n                        variant='contained'\n                        onClick={() => onClose('')}\n                        color='primary'\n                        title={i18n.t('close_title')}\n                    >\n                        {i18n.t('common:close_title')}\n                    </Button>\n                </div>\n            </Dialog>\n\n\n            {showStudentList && <Dialog\n                disableBackdropClick={true}\n                onClose={handleClose}\n                aria-labelledby='confirm-dialog-title'\n                open={open}\n            >\n\n                <DialogTitle id='confirm-dialog-title' className={'group-students'}>\n                    <>\n                        <h6>\n                            <Select\n                                className={'group-select'}\n                                defaultValue={defaultGroup}\n                                options={groupsOption}\n                                onChange={setCurrentGroupOption}\n                            />\n                        </h6>\n                    </>\n                    <div className='buttons-container'>\n                        <Button\n\n                            variant='contained'\n                            onClick={handleSubmitGroupStudents}\n                            color='primary'\n                            title={i18n.t('move_to_group_title')}\n                        >\n                            {i18n.t('common:move_to_group_title')}\n                        </Button>\n                        <Button\n\n                            variant='contained'\n                            onClick={cancelChoosing}\n                            color='primary'\n                            title={i18n.t('cancel_title')}\n                        >\n                            {i18n.t('cancel_title')}\n                        </Button>\n                    </div>\n                </DialogTitle>\n\n            </Dialog>}\n        </>\n    );\n};\n\nShowStudentsDialog.propTypes = {\n    onClose: PropTypes.func.isRequired,\n    open: PropTypes.bool.isRequired\n};\nconst mapStateToProps = state => ({\n    //currentGroup:state.groups.currentGroup\n});\n\nexport default connect(mapStateToProps, {})(ShowStudentsDialog);\n\n","export const getShortTitle=(title,MAX_LENGTH)=>{\n    return title.length>MAX_LENGTH? `${ title.slice(0, MAX_LENGTH) }...`:title;\n}","import { connect } from 'react-redux';\nimport { FaEdit, FaUserPlus, FaUsers } from 'react-icons/fa';\nimport { MdDelete } from 'react-icons/md';\nimport { useTranslation } from 'react-i18next';\nimport React, { useEffect, useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport './GroupList.scss';\nimport { search } from '../../helper/search';\nimport NotFound from '../../share/NotFound/NotFound';\nimport ConfirmDialog from '../../share/modals/dialog';\nimport SearchPanel from '../../share/SearchPanel/SearchPanel';\nimport AddGroup from '../../components/AddGroupForm/AddGroupForm';\nimport SnackbarComponent from '../../share/Snackbar/SnackbarComponent';\nimport { handleSnackbarCloseService } from '../../services/snackbarService';\nimport {\n    clearGroupService,\n    getDisabledGroupsService,\n    handleGroupService,\n    removeGroupCardService,\n    selectGroupService,\n    setDisabledGroupService,\n    setEnabledGroupService,\n    showAllGroupsService\n} from '../../services/groupService';\nimport { GiSightDisabled, IoMdEye } from 'react-icons/all';\nimport { disabledCard } from '../../constants/disabledCard';\nimport NavigationPage from '../../components/Navigation/NavigationPage';\nimport { navigation, navigationNames } from '../../constants/navigation';\n\n\nimport {\n    createStudentService,\n    deleteStudentService,\n    getAllStudentsByGroupId, selectStudentService,\n    updateStudentService\n} from '../../services/studentService';\nimport { ShowStudentsDialog } from '../../share/modals/modal/showStudentsDialog';\nimport AddStudentDialog from '../../share/modals/modal/AddStudentDialog';\nimport { links } from '../../constants/links';\nimport './GroupList.scss';\nimport { useHistory } from 'react-router-dom/cjs/react-router-dom';\nimport '../../router/Router.scss';\nimport { goToGroupPage } from '../../helper/pageRedirection';\nimport { getShortTitle } from '../../helper/shortTitle';\n\nlet GroupList = props => {\n\n    const { isSnackbarOpen, snackbarType, snackbarMessage, students, groups, group, match, student } = props;\n    const { t } = useTranslation('formElements');\n\n    const [open, setOpen] = useState(false);\n    const [groupId, setGroupId] = useState(-1);\n    const [term, setTerm] = useState('');\n    const [hideDialog, setHideDialog] = useState(null);\n    const [addStudentDialog, setAddStudentDialog] = useState(false);\n\n    const [disabled, setDisabled] = useState(false);\n    const [showStudents, setShowStudents] = useState(false);\n\n    const SearchChange = setTerm;\n    const history = useHistory();\n    // useEffect(()=>getAllStudentsByGroupId(groupId),[groupId])\n    useEffect(()=>{\n        getDisabledGroupsService();\n    },[])\n    useEffect(() => {\n        if (match.path.includes(links.Edit)) {\n            selectGroupService(match.params.id);\n        }\n\n    }, [props.groups.length]);\n    useEffect(() => {\n        if (match.path.includes(links.Delete)) {\n            handleClickOpen(props.match.params.id);\n        }\n\n    }, [props.groups.length]);\n    useEffect(() => {\n        if (match.path.includes(links.AddStudent)) {\n            handleAddUser(match.params.id);\n        }\n\n    }, [props.groups.length]);\n    useEffect(() => {\n        if (match.path.includes(links.SetDisable)) {\n            handleSetDisable(props.match.params.id);\n        }\n\n    }, []);\n    useEffect(() => {\n        if (match.path.includes(links.ShowStudents)) {\n            onShowStudentByGroup(Number(match.params.id));\n        }\n    }, [props.students.length]);\n    useEffect(() => {\n        if (match.path.includes(links.Student) && match.path.includes(links.Edit)) {\n            onShowStudentByGroup(Number(match.params.id));\n            selectStudentService(Number(match.params.idStudent));\n        }\n    }, [props.students.length]);\n    useEffect(() => {\n        if (match.path.includes(links.Student) && match.path.includes(links.Delete)) {\n            onShowStudentByGroup(Number(match.params.id));\n            selectStudentService(Number(match.params.idStudent));\n        }\n    }, [props.students.length]);\n\n    useEffect(() => showAllGroupsService(), []);\n    // useEffect(() => getDisabledGroupsService(), []);\n    const handleFormReset = () => {\n        clearGroupService();\n    };\n    const submit = values => handleGroupService(values);\n    const handleEdit = groupId => selectGroupService(groupId);\n    const visibleGroups = disabled\n        ? search(props.disabledGroups, term, ['title'])\n        : search(props.groups, term, ['title']);\n\n    const handleClickOpen = groupId => {\n        setGroupId(groupId);\n        setOpen(true);\n    };\n\n    const handleSnackbarClose = (event, reason) => {\n        if (reason === 'clickaway') return;\n        handleSnackbarCloseService();\n    };\n    const handleAddUser = id => {\n        setGroupId(id);\n        setAddStudentDialog(true);\n    };\n\n    const handleClose = groupId => {\n        setOpen(false);\n        if (!groupId) {\n            goToGroupPage(history);\n            return;\n        }\n        if (hideDialog) {\n            if (disabled) {\n                const group = props.disabledGroups.find(\n                    group => group.id === groupId\n                );\n                setEnabledGroupService(group);\n            } else {\n                const group = groups.find(group => Number(group.id) === Number(groupId));\n                setDisabledGroupService(group);\n            }\n        } else {\n            removeGroupCardService(groupId);\n        }\n        setHideDialog(null);\n        goToGroupPage(history);\n    };\n\n    const showDisabledHandle = () => {\n        setDisabled(!disabled);\n    };\n    const studentSubmit = (data) => {\n        if (data.id !== undefined) {\n            const sendData = { ...data, group: { id: data.group } };\n            updateStudentService(sendData);\n        } else {\n            const sendData = { ...data, group: { id: groupId } };\n            createStudentService(sendData);\n        }\n        setAddStudentDialog(false);\n        goToGroupPage(history);\n    };\n\n    const selectStudentCard = () => {\n        setAddStudentDialog(false);\n    };\n    const onCloseShowStudents = () => {\n        setShowStudents(false);\n        goToGroupPage(history);\n    };\n    const onShowStudentByGroup = (groupId) => {\n        setShowStudents(true);\n        selectGroupService(groupId);\n        getAllStudentsByGroupId(groupId);\n    };\n    const onDeleteStudent = (student) => {\n        if (student !== '') {\n            deleteStudentService(student);\n        }\n    };\n    const handleSetDisable = (groupId) => {\n        setHideDialog(\n            disabledCard.HIDE\n        );\n        handleClickOpen(groupId);\n    };\n    const getGroupTitle = (title) => {\n        const MAX_LENGTH = 5;\n        return getShortTitle(title, MAX_LENGTH);\n    };\n\n    return (\n\n        <>\n            <NavigationPage name={navigationNames.GROUP_LIST} val={navigation.GROUPS} />\n\n            <ConfirmDialog\n                isHide={hideDialog}\n                cardId={groupId}\n                whatDelete={'group'}\n                open={open}\n                onClose={handleClose}\n            />\n            <AddStudentDialog\n                open={addStudentDialog}\n                onSubmit={studentSubmit}\n                onSetSelectedCard={selectStudentCard}\n            />\n            <ShowStudentsDialog\n                onClose={onCloseShowStudents}\n                open={showStudents}\n                students={students}\n                group={group}\n                onDeleteStudent={onDeleteStudent}\n                onSubmit={studentSubmit}\n                match={match}\n                student={student}\n                groups={groups}\n            />\n\n            <div className='cards-container'>\n                <aside className='search-list__panel'>\n                    <SearchPanel\n                        SearchChange={SearchChange}\n                        showDisabled={showDisabledHandle}\n                    />\n                    {disabled ? (\n                        ''\n                    ) : (\n\n                        <AddGroup\n                            match={match}\n                            className='form'\n                            onSubmit={submit}\n                            onReset={handleFormReset}\n                        />\n                    )}\n                </aside>\n                <div className='group-wrapper group-list'>\n                    {visibleGroups.length === 0 && (\n                        <NotFound name={t('group_y_label')} />\n                    )}\n                    {visibleGroups.map(group => (\n                        <section key={group.id} className='group-card'>\n\n                            <div className='group__buttons-wrapper'>\n                                {!disabled ? (\n                                    <>\n                                        <Link to={`${links.GroupList}${links.Group}/${group.id}${links.SetDisable}`}>\n                                            <GiSightDisabled\n                                                className='group__buttons-hide link-href'\n                                                title={t('common:set_disabled')}\n                                                onClick={() => {\n                                                    handleSetDisable(group.id);\n                                                }}\n                                            />\n                                        </Link>\n                                        <Link to={`${links.GroupList}${links.Group}${links.Edit}/${group.id}`}>\n                                            <FaEdit\n                                                className='group__buttons-edit link-href'\n                                                title={t('common:edit')}\n                                                onClick={() => handleEdit(group.id)}\n                                            />\n                                        </Link>\n                                    </>\n                                ) : (\n                                    <IoMdEye\n                                        className='group__buttons-hide link-href'\n                                        title={t('common:set_enabled')}\n                                        onClick={() => {\n                                            setHideDialog(disabledCard.SHOW);\n                                            handleClickOpen(group.id);\n                                        }}\n                                    />\n                                )}\n                                <Link to={`${links.GroupList}${links.Group}${links.Delete}/${group.id}`}>\n                                    <MdDelete\n                                        className='group__buttons-delete link-href'\n                                        title={t('delete_title')}\n                                        onClick={() => handleClickOpen(group.id)}\n                                    />\n                                </Link>\n                                <Link to={`${links.GroupList}${links.Group}/${group.id}${links.AddStudent}`}>\n                                    <FaUserPlus\n                                        title={t('formElements:student_add_label')}\n                                        className='svg-btn copy-btn align-left info-btn'\n                                        onClick={() => {\n                                            handleAddUser(group.id);\n                                            // setCurrentGroup(group);\n                                        }}\n                                    />\n                                </Link>\n\n                            </div>\n                            <p className='group-card__description'>\n                                {t('group_label') + ':'}\n                            </p>\n                            <h1 className='group-card__number'>\n                                {getGroupTitle(group.title)}\n                            </h1>\n                            <Link to={`${links.GroupList}${links.Group}/${group.id}${links.ShowStudents}`}>\n                            <span className='students-group'>\n                                <FaUsers\n                                    title={t('formElements:show_students')}\n                                    className='svg-btn copy-btn align-left info-btn students'\n                                    onClick={\n                                        () => {\n                                            onShowStudentByGroup(group.id);\n                                        }\n                                    }\n                                />\n                            </span>\n                            </Link>\n\n                        </section>\n                    ))}\n                </div>\n            </div>\n            <SnackbarComponent\n                message={snackbarMessage}\n                type={snackbarType}\n                isOpen={isSnackbarOpen}\n                handleSnackbarClose={handleSnackbarClose}\n            />\n\n        </>\n    );\n};\nconst mapStateToProps = state => ({\n    groups: state.groups.groups,\n    group: state.groups.group,\n    disabledGroups: state.groups.disabledGroups,\n    isSnackbarOpen: state.snackbar.isSnackbarOpen,\n    snackbarType: state.snackbar.snackbarType,\n    snackbarMessage: state.snackbar.message,\n    students: state.students.students,\n    student: state.students.student\n});\n\nexport default connect(mapStateToProps, {})(GroupList);\n","import React, {useEffect} from 'react';\nimport { connect } from 'react-redux';\nimport { Field, reduxForm } from 'redux-form';\nimport renderTextField from '../../share/renderedFields/input';\nimport renderSelectField from '../../share/renderedFields/select';\n\nimport { ROOM_FORM } from '../../constants/reduxForms';\n\nimport { required, uniqueRoomName } from '../../validation/validateFields';\nimport Button from '@material-ui/core/Button';\nimport { styled } from '@material-ui/core/styles';\nimport { useTranslation } from 'react-i18next';\nimport Card from '../../share/Card/Card';\n\nimport './AddRoomForm.scss';\nimport { getClearOrCancelTitle, setDisableButton } from '../../helper/disableComponent';\n\nlet AddRoom = props => {\n    const { t } = useTranslation('formElements')\n    const { handleSubmit, pristine, submitting, onReset,oneRoom } = props;\n\n    useEffect(() => {\n        if (props.oneRoom) {\n            if (props.oneRoom.id) {\n                props.initialize({\n                    name: props.oneRoom.name,\n                    type: props.oneRoom.type.id,\n                    id: props.oneRoom.id\n                });\n            } else {\n                props.initialize();\n            }\n        }\n    }, [props.oneRoom]);\n\n\n\n\n    return (\n        <Card class='form-card room-form'>\n            <form className='createGroupForm w-100' onSubmit={handleSubmit}>\n                <h2 className='form-title'>\n                    {props.oneRoom.id\n                        ? t('edit_title')\n                        : t('create_title')\n                    }{' '}\n                    {t('room_y_label')}\n                </h2>\n                <Field\n                    type='text'\n                    name='name'\n                    component={renderTextField}\n                    placeholder={t('number_label')}\n                    className='form-field'\n                    label={t('room_label')}\n                    validate={[required, uniqueRoomName]}\n                />\n                <Field\n                    className='form-field'\n                    component={renderSelectField}\n                    name='type'\n                    label={t('type_label')}\n                    validate={[required]}>\n                    <option value={''}></option>\n                    {props.roomTypes.map(roomType => (\n                        <option key={roomType.id} value={roomType.id}>\n                            {roomType.description}\n                        </option>\n                    ))}\n                </Field>\n                <div className='form-buttons-container'>\n                    <Button\n                        className='buttons-style'\n                        variant='contained'\n                        color='primary'\n                        disabled={pristine || submitting}\n                        type='submit'>\n                        {t('save_button_label')}\n                    </Button>\n                    <Button\n                        className='buttons-style'\n                        variant='contained'\n                        disabled={setDisableButton(pristine,submitting,oneRoom.id)}\n                        onClick={onReset}>\n                        {getClearOrCancelTitle(oneRoom.id,t)}\n                    </Button>\n                </div>\n            </form>\n        </Card>\n    );\n};\n\nconst mapStateToProps = state => ({\n    oneRoom: state.rooms.oneRoom,\n    roomTypes: state.roomTypes.roomTypes\n});\n\nAddRoom = reduxForm({\n    form: ROOM_FORM\n})(AddRoom);\n\nexport default connect(mapStateToProps)(AddRoom);\n","import { store } from '../index';\nimport { ROOM_FORM_TYPE } from '../constants/reduxForms';\nimport { ROOM_TYPES_URL } from '../constants/axios';\nimport axios from '../helper/axios';\n\nimport {\n    getAllRoomTypes,\n    deleteType,\n    updateOneType,\n    postOneType,\n    getOneNewType\n} from '../redux/actions/roomTypes';\n\nimport i18n from '../helper/i18n';\nimport { errorHandler, successHandler } from '../helper/handlerAxios';\nimport { resetFormHandler } from '../helper/formHelper';\n\nexport const getAllRoomTypesService = () => {\n    axios\n        .get(ROOM_TYPES_URL)\n        .then(res => {\n            store.dispatch(getAllRoomTypes(res.data));\n        })\n        .catch(error => errorHandler(error));\n};\n\nexport const deleteTypeService = roomTypeId => {\n    axios\n        .delete(ROOM_TYPES_URL + `/${roomTypeId}`)\n        .then(response => {\n            store.dispatch(deleteType(roomTypeId));\n            successHandler(\n                i18n.t('serviceMessages:back_end_success_operation', {\n                    cardType:\n                        i18n.t('formElements:room_label') +\n                        ' ' +\n                        i18n.t('formElements:type_label'),\n                    actionType: i18n.t('serviceMessages:deleted_label')\n                })\n            );\n        })\n        .catch(error => errorHandler(error));\n};\n\nexport const addNewTypeService = values => {\n    if (values.id) {\n        putNewType(values);\n    } else {\n        postNewType(values);\n    }\n};\n\nexport const putNewType = values => {\n    axios\n        .put(ROOM_TYPES_URL, values)\n        .then(response => {\n            store.dispatch(updateOneType(response.data));\n            resetFormHandler(ROOM_FORM_TYPE);\n            successHandler(\n                i18n.t('serviceMessages:back_end_success_operation', {\n                    cardType:\n                        i18n.t('formElements:room_label') +\n                        ' ' +\n                        i18n.t('formElements:type_label'),\n                    actionType: i18n.t('serviceMessages:updated_label')\n                })\n            );\n        })\n        .catch(error => errorHandler(error));\n};\n\nexport const postNewType = values => {\n    axios\n        .post(ROOM_TYPES_URL, values)\n        .then(response => {\n            store.dispatch(postOneType(response.data));\n            resetFormHandler(ROOM_FORM_TYPE);\n            successHandler(\n                i18n.t('serviceMessages:back_end_success_operation', {\n                    cardType:\n                        i18n.t('formElements:room_label') +\n                        ' ' +\n                        i18n.t('formElements:type_label'),\n                    actionType: i18n.t('serviceMessages:created_label')\n                })\n            );\n        })\n        .catch(error => errorHandler(error));\n};\n\nexport const getOneNewTypeService = roomId => {\n    store.dispatch(getOneNewType(roomId));\n};\n","import * as actionsType from './actionsType';\nimport roomTypes from '../reducers/roomTypes';\nimport actions from 'redux-form/lib/actions';\n\nexport const postOneType = roomType => {\n    return {\n        type: actionsType.POST_NEW_TYPE,\n        result: roomType\n    };\n};\n\nexport const getAllRoomTypes = roomType => {\n    return {\n        type: actionsType.GET_ALL_ROOM_TYPES,\n        result: roomType\n    };\n};\n\nexport const deleteType = roomType => {\n    return {\n        type: actionsType.DELETE_TYPE,\n        result: roomType\n    };\n\n\n};\n\nexport const updateOneType = roomType => {\n    return {\n        type: actionsType.UPDATE_ONE_TYPE,\n        result: roomType\n    };\n};\n\nexport const getOneNewType = roomType => {\n    return {\n        type: actionsType.GET_ONE_NEW_TYPE,\n        result: roomType\n    }\n}\n\n\n\n\n","import React, { useState, useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport { Field, reduxForm } from 'redux-form';\n\nimport { ROOM_FORM_TYPE } from '../../constants/reduxForms';\n\nimport ConfirmDialog from '../../share/modals/dialog';\nimport { cardType } from '../../constants/cardType';\nimport Card from '../../share/Card/Card';\nimport { useTranslation } from 'react-i18next';\nimport renderTextField from '../../share/renderedFields/input';\nimport Button from '@material-ui/core/Button';\nimport { MdDelete } from 'react-icons/md';\nimport { FaEdit } from 'react-icons/fa';\nimport {\n    deleteTypeService,\n    getOneNewTypeService\n} from '../../services/roomTypesService';\nimport './AddNewRoomType.scss';\n\nlet NewRoomType = props => {\n    const { handleSubmit, pristine, submitting, roomTypes } = props;\n   \n\n    const [open, setOpen] = useState(false);\n    const [typeId, setTypeId] = useState(-1);\n\n    useEffect(() => {\n        let defaultValue = {};\n        if (props.oneType.id) {\n            defaultValue={ description: props.oneType.description,\n                id: props.oneType.id};\n        }\n        props.initialize(defaultValue);\n\n    }, [props.oneType]);   \n\n    const { t } = useTranslation('formElements');\n\n    const handleClickOpen = typeId => {\n        setTypeId(typeId);\n        setOpen(true);\n    };\n\n    const handleClose = typeId => {\n        setOpen(false);\n        if (!typeId) {\n            return;\n        }\n        deleteTypeService(typeId);\n    };\n\n    const handleEdit = roomId => {\n        getOneNewTypeService(roomId);\n    };\n\n    return (\n        <>\n            <ConfirmDialog\n                selectedValue={''}\n                cardId={typeId}\n                whatDelete={cardType.TYPE.toLowerCase()}\n                open={open}\n                onClose={handleClose}\n            />\n            <Card class=\"form-card room-form\">\n                <form className=\"new-type-container\" onSubmit={handleSubmit}>\n                    <Field\n                        type=\"text\"\n                        name=\"description\"\n                        component={renderTextField}\n                        placeholder={t('add_type_label')}\n                        label={t('new_type_label')}\n                        className=\"form-field\"\n                        variant=\"outlined\"\n                    />\n                    <div className='btn-style-wrapper'>\n                        <Button\n                            color=\"primary\"\n                            className=\"btn-style\"\n                            disabled={pristine || submitting}\n                            variant=\"contained\"\n                            type=\"submit\"\n                        >\n                            {t('save_button_label')}\n                        </Button>\n                    </div>\n                </form>\n\n                <ul className=\"new-types\">\n                    {roomTypes.map(roomType => (\n                        <li\n                            key={roomType.id}\n                            value={roomType.description}\n                            className=\"new-types-list\"\n                        >\n                            <span className=\"typeDescription\">\n                                {roomType.description}\n                            </span>\n                            <span className=\"buttons\">\n                                <FaEdit\n                                    className=\"btn edit\"\n                                    onClick={() => handleEdit(roomType.id)}\n                                />\n                                <MdDelete\n                                    className=\"btn delete\"\n                                    onClick={() => handleClickOpen(roomType.id)}\n                                />\n                            </span>\n                        </li>\n                    ))}\n                </ul>\n            </Card>\n        </>\n    );\n};\n\nconst mapStateToProps = state => ({\n    oneType: state.roomTypes.oneType,\n    roomTypes: state.roomTypes.roomTypes\n});\n\nNewRoomType = reduxForm({\n    form: ROOM_FORM_TYPE\n})(NewRoomType);\n\nexport default connect(mapStateToProps)(NewRoomType);\n","import React, { useEffect, useState } from 'react';\nimport { connect } from 'react-redux';\nimport ConfirmDialog from '../../share/modals/dialog';\nimport { cardType } from '../../constants/cardType';\nimport FreeRooms from '../FreeRooms/freeRooms';\nimport AddRoom from '../../components/AddRoomForm/AddRoomForm';\nimport NewRoomType from '../../components/AddNewRoomType/AddNewRoomType';\nimport SearchPanel from '../../share/SearchPanel/SearchPanel';\nimport Card from '../../share/Card/Card';\nimport { FaEdit } from 'react-icons/fa';\nimport { MdDelete } from 'react-icons/md';\nimport './RoomList.scss';\nimport { useTranslation } from 'react-i18next';\nimport { search } from '../../helper/search';\n\nimport {\n    createRoomService,\n    showListOfRoomsService,\n    deleteRoomCardService,\n    selectOneRoomService,\n    clearRoomOneService,\n    getDisabledRoomsService,\n    setDisabledRoomsService,\n    setEnabledRoomsService\n} from '../../services/roomService';\n\nimport {\n    getAllRoomTypesService,\n    addNewTypeService\n} from '../../services/roomTypesService';\n\nimport NotFound from '../../share/NotFound/NotFound';\nimport { GiSightDisabled, IoMdEye } from 'react-icons/all';\n\nimport { disabledCard } from '../../constants/disabledCard';\nimport NavigationPage from '../../components/Navigation/NavigationPage';\nimport { navigation, navigationNames } from '../../constants/navigation';\n\nconst RoomList = props => {\n    const { rooms } = props;\n\n    useEffect(() => {\n        showListOfRoomsService();\n    }, []);\n\n    useEffect(() => {\n        getAllRoomTypesService();\n    }, []);\n\n    useEffect(() => {\n        getDisabledRoomsService();\n    }, []);\n\n    const { t } = useTranslation('formElements');\n    const [open, setOpen] = useState(false);\n    const [roomId, setRoomId] = useState(-1);\n    const [term, setTerm] = useState('');\n    const [hideDialog, setHideDialog] = useState(null);\n\n    const [disabled, setDisabled] = useState(false);\n\n    const createRoom = values => {\n        const description = props.roomTypes.find(\n            type => type.id == values.type\n        );\n        values.typeDescription = description.description;\n        createRoomService(values);\n    };\n\n    const editHandler = roomId => {\n        selectOneRoomService(roomId);\n    };\n\n    const handleFormReset = () => {\n        clearRoomOneService();\n    };\n\n    const handleClickOpen = roomId => {\n        setRoomId(roomId);\n        setOpen(true);\n    };\n\n    const handleClose = roomId => {\n        setOpen(false);\n        if (!roomId) {\n            return;\n        }\n        if (hideDialog) {\n            if (disabled) {\n                const room = props.disabledRooms.find(\n                    room => room.id === roomId\n                );\n                setEnabledRoomsService(room);\n            } else {\n                const room = props.rooms.find(room => room.id === roomId);\n                setDisabledRoomsService(room);\n            }\n        } else {\n            deleteRoomCardService(roomId);\n        }\n        setHideDialog(null);\n    };\n\n    const submitType = values => {\n        addNewTypeService(values);\n    };\n\n    const visibleItems = disabled\n        ? search(props.disabledRooms, term, ['name'])\n        : search(rooms, term, ['name']);\n\n    const SearchChange = term => {\n        setTerm(term);\n    };\n\n    const showDisabledHandle = () => {\n        setDisabled(!disabled);\n    };\n\n    return (\n        <>\n            <NavigationPage name={navigationNames.ROOM_LIST} val={navigation.ROOMS}/>\n            <ConfirmDialog\n                cardId={roomId}\n                whatDelete={cardType.ROOM.toLowerCase()}\n                open={open}\n                isHide={hideDialog}\n                onClose={handleClose}\n            />\n            <div className=\"cards-container\">\n                <aside className=\"search-list__panel\">\n                    <SearchPanel\n                        SearchChange={SearchChange}\n                        showDisabled={showDisabledHandle}\n                    />\n                    {disabled ? (\n                        ''\n                    ) : (\n                        <>\n                            <AddRoom\n                                onSubmit={createRoom}\n                                onReset={handleFormReset}\n                            />\n                            <NewRoomType\n                                className=\"new-type\"\n                                onSubmit={submitType}\n                            />\n                        </>\n                    )}\n                </aside>\n                <section className=\"container-flex-wrap wrapper\">\n                    {visibleItems.length === 0 && (\n                        <NotFound name={t('room_y_label')} />\n                    )}\n                    {visibleItems.map((room, index) => (\n                        <Card key={index} {...room} class=\"room-card done-card\">\n                            <div className=\"cards-btns\">\n                                {!disabled ? (\n                                    <>\n                                        <GiSightDisabled\n                                            className=\"svg-btn copy-btn\"\n                                            title={t('common:set_disabled')}\n                                            onClick={() => {\n                                                setHideDialog(\n                                                    disabledCard.HIDE\n                                                );\n                                                handleClickOpen(room.id);\n                                            }}\n                                        />\n                                        <FaEdit\n                                            className=\"svg-btn\"\n                                            onClick={() => editHandler(room.id)}\n                                        />\n                                    </>\n                                ) : (\n                                    <IoMdEye\n                                        className=\"svg-btn copy-btn\"\n                                        title={t('common:set_enabled')}\n                                        onClick={() => {\n                                            setHideDialog(disabledCard.SHOW);\n                                            handleClickOpen(room.id);\n                                        }}\n                                    />\n                                )}\n\n                                <MdDelete\n                                    className=\"svg-btn\"\n                                    onClick={() => handleClickOpen(room.id)}\n                                />\n                            </div>\n\n                            <span> {t('room_label') + ':'} </span>\n                            <h2 className=\"room-card__number\">{room.name}</h2>\n                            <span>{t('type_label') + ':'}</span>\n                            <h2 className=\"room-card__number\">\n                                {room.type.description}\n                            </h2>\n                        </Card>\n                    ))}\n                </section>\n            </div>\n        </>\n    );\n};\n\nconst mapStateToProps = state => ({\n    classScheduler: state.classActions.classScheduler,\n    rooms: state.rooms.rooms,\n    disabledRooms: state.rooms.disabledRooms,\n    oneRoom: state.rooms.oneRoom,\n    roomTypes: state.roomTypes.roomTypes,\n    oneType: state.roomTypes.oneType\n});\n\nexport default connect(mapStateToProps, {})(RoomList);\n","import { connect } from 'react-redux'\nimport React, { useEffect } from 'react'\nimport { Field, reduxForm } from 'redux-form'\nimport Button from '@material-ui/core/Button'\nimport { useTranslation}  from 'react-i18next'\n\nimport './AddSubjectForm.scss'\nimport Card from '../../share/Card/Card'\nimport { SUBJECT_FORM } from '../../constants/reduxForms'\nimport renderTextField from '../../share/renderedFields/input'\nimport { required, uniqueSubject, maxLengthValue} from '../../validation/validateFields'\nimport { getClearOrCancelTitle, setDisableButton } from '../../helper/disableComponent';\n\nlet AddSubject = props => {\n    const { t } = useTranslation('formElements');\n    const { handleSubmit, pristine, onReset, submitting,subject } = props;\n\n    useEffect(() => {\n        if (props.subject) {\n            if (props.subject.id) {\n                props.initialize({\n                    id: props.subject.id,\n                    name: props.subject.name\n                });\n            } else {\n                props.initialize();\n            }\n        }\n    }, [props.subject]);\n\n    return (\n        <Card class='form-card subject-form'>\n            <h2 style={{ textAlign: 'center' }}>\n                {props.subject.id ? t('edit_title') : t('create_title')}\n                {t('subject_y_label')}\n            </h2>\n            <form onSubmit={handleSubmit}>\n                <Field\n                    className='form-field'\n                    name='name'\n                    component={renderTextField}\n                    label={t('subject_label')+':'}\n                    validate={[required, uniqueSubject, maxLengthValue]}\n                />\n                <div className='form-buttons-container subject-btns'>\n                <Button\n                    variant='contained'\n                    color='primary'\n                    className='buttons-style '\n                    disabled={pristine || submitting}\n                    type='submit'>\n                    {t('save_button_label')}\n                </Button>\n                <Button\n                    type='button'\n                    variant='contained'\n                    className='buttons-style'\n                    disabled={setDisableButton(pristine,submitting,subject.id)}\n                    onClick={onReset}>\n                    {getClearOrCancelTitle(subject.id,t)}\n                </Button>\n                </div>\n            </form>\n        </Card>\n    )\n}\n\nconst mapStateToProps = state => ({\n    subject: state.subjects.subject\n})\n\nexport default connect(mapStateToProps)(\n    reduxForm({\n        form: SUBJECT_FORM\n    })(AddSubject)\n)\n","import { connect } from 'react-redux';\nimport { FaEdit } from 'react-icons/fa';\nimport { MdDelete } from 'react-icons/md';\nimport { useTranslation } from 'react-i18next';\nimport React, { useEffect, useState } from 'react';\n\nimport './SubjectPage.scss';\nimport Card from '../../share/Card/Card';\nimport { search } from '../../helper/search';\nimport NotFound from '../../share/NotFound/NotFound';\nimport ConfirmDialog from '../../share/modals/dialog';\nimport SearchPanel from '../../share/SearchPanel/SearchPanel';\nimport SnackbarComponent from '../../share/Snackbar/SnackbarComponent';\nimport AddSubject from '../../components/AddSubjectForm/AddSubjectForm';\nimport { handleSnackbarCloseService } from '../../services/snackbarService';\nimport {\n    showAllSubjectsService,\n    removeSubjectCardService,\n    handleSubjectService,\n    selectSubjectService,\n    clearSubjectService,\n    setEnabledSubjectsService,\n    setDisabledSubjectsService,\n    getDisabledSubjectsService\n} from '../../services/subjectService';\nimport { disabledCard } from '../../constants/disabledCard';\nimport { GiSightDisabled, IoMdEye } from 'react-icons/all';\nimport NavigationPage from '../../components/Navigation/NavigationPage';\nimport { navigation, navigationNames } from '../../constants/navigation';\n\nconst SubjectPage = props => {\n    const { t } = useTranslation('formElements');\n    const { isSnackbarOpen, snackbarType, snackbarMessage } = props;\n\n    const [open, setOpen] = useState(false);\n    const [subjectId, setSubjectId] = useState(-1);\n    const [term, setTerm] = useState('');\n    const [hideDialog, setHideDialog] = useState(null);\n\n    const [disabled, setDisabled] = useState(false);\n\n    useEffect(() => showAllSubjectsService(), []);\n    useEffect(() => getDisabledSubjectsService(), []);\n\n    const submit = values => handleSubjectService(values);\n    const handleEdit = subjectId => selectSubjectService(subjectId);\n    const handleFormReset = () => clearSubjectService();\n    const visibleSubjects = disabled\n        ? search(props.disabledSubjects, term, ['name'])\n        : search(props.subjects, term, ['name']);\n    const SearchChange = setTerm;\n\n    const handleClickOpen = subjectId => {\n        setSubjectId(subjectId);\n        setOpen(true);\n    };\n\n    const handleSnackbarClose = (event, reason) => {\n        if (reason === 'clickaway') return;\n        handleSnackbarCloseService();\n    };\n\n    const handleClose = subjectId => {\n        setOpen(false);\n        if (!subjectId) return;\n        if (hideDialog) {\n            if (disabled) {\n                const group = props.disabledSubjects.find(\n                    subject => subject.id === subjectId\n                );\n                setEnabledSubjectsService(group);\n            } else {\n                const group = props.subjects.find(\n                    subject => subject.id === subjectId\n                );\n                setDisabledSubjectsService(group);\n            }\n        } else {\n            removeSubjectCardService(subjectId);\n        }\n        setHideDialog(null);\n    };\n\n    const showDisabledHandle = () => {\n        setDisabled(!disabled);\n    };\n\n    return (\n        <>\n            <NavigationPage name={navigationNames.SUBJECT_PAGE} val={navigation.SUBJECTS}/>\n            <ConfirmDialog\n                isHide={hideDialog}\n                cardId={subjectId}\n                whatDelete={'subject'}\n                open={open}\n                onClose={handleClose}\n            />\n            <div className=\"cards-container\">\n                <aside className=\"search-list__panel\">\n                    <SearchPanel\n                        SearchChange={SearchChange}\n                        showDisabled={showDisabledHandle}\n                    />\n                    {disabled ? (\n                        ''\n                    ) : (\n                        <AddSubject\n                            className=\"form\"\n                            onSubmit={submit}\n                            onReset={handleFormReset}\n                        />\n                    )}\n                </aside>\n                <section className=\"container-flex-wrap wrapper\">\n                    {visibleSubjects.length === 0 && (\n                        <NotFound name={t('subject_y_label')} />\n                    )}\n                    {visibleSubjects.map(subject => (\n                        <Card key={subject.id} class=\"subject-card done-card\">\n                            <h2 className=\"subject-card__name\">\n                                {subject.name}\n                            </h2>\n                            <div className=\"cards-btns\">\n                                {disabled ? (\n                                    <IoMdEye\n                                        className=\"svg-btn copy-btn\"\n                                        title={t('common:set_enabled')}\n                                        onClick={() => {\n                                            setHideDialog(disabledCard.SHOW);\n                                            handleClickOpen(subject.id);\n                                        }}\n                                    />\n                                ) : (\n                                    <>\n                                        <GiSightDisabled\n                                            className=\"svg-btn copy-btn\"\n                                            title={t('common:set_disabled')}\n                                            onClick={() => {\n                                                setHideDialog(\n                                                    disabledCard.HIDE\n                                                );\n                                                handleClickOpen(subject.id);\n                                            }}\n                                        />\n                                        <FaEdit\n                                            className=\"svg-btn edit-btn\"\n                                            title={t('edit_title')}\n                                            onClick={() =>\n                                                handleEdit(subject.id)\n                                            }\n                                        />\n                                    </>\n                                )}\n\n                                <MdDelete\n                                    className=\"svg-btn delete-btn\"\n                                    title={t('delete_title')}\n                                    onClick={() => handleClickOpen(subject.id)}\n                                />\n                            </div>\n                            {/* <p className=\"subject-card__description\">\n                                {t('subject_label') + ':'}{' '}\n                            </p> */}\n                        </Card>\n                    ))}\n                </section>\n            </div>\n            <SnackbarComponent\n                message={snackbarMessage}\n                type={snackbarType}\n                isOpen={isSnackbarOpen}\n                handleSnackbarClose={handleSnackbarClose}\n            />\n        </>\n    );\n};\nconst mapStateToProps = state => ({\n    subjects: state.subjects.subjects,\n    disabledSubjects: state.subjects.disabledSubjects,\n    isSnackbarOpen: state.snackbar.isSnackbarOpen,\n    snackbarType: state.snackbar.snackbarType,\n    snackbarMessage: state.snackbar.message\n});\n\nexport default connect(mapStateToProps, {})(SubjectPage);\n","import React from 'react';\n\nimport PropTypes from 'prop-types';\n\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport Dialog from '@material-ui/core/Dialog';\nimport Button from '@material-ui/core/Button';\n\nimport './modal.scss';\n\nexport const ModalWindow = props => {\n    const { onClose, cardId, isHide, open, windowTitle } = props;\n\n    const handleClose = () => {\n        onClose(cardId);\n    };\n    const renderOkButton = () => {\n        if (!props.isOkButton) {\n            return;\n        }\n        return (\n            <Button\n                className=\"dialog-button\"\n                variant=\"contained\"\n                color=\"primary\"\n                //onClick={() => onClose(cardId)}\n            >\n                {props.okButtonLabel}\n            </Button>\n        );\n    };\n    const renderNoButton = () => {\n        if (!props.isNoButton) {\n            return;\n        }\n        return (\n            <Button\n                className=\"dialog-button\"\n                variant=\"contained\"\n                onClick={() => onClose('')}\n            >\n                {props.noButtonLabel}\n            </Button>\n        );\n    };\n\n    const renderModalButtons = () => {\n        if (!props.isOkButton && !props.isNoButton) {\n            return;\n        }\n        return (\n            <div className=\"buttons-container\">\n                {renderOkButton()}\n                {renderNoButton()}\n            </div>\n        );\n    };\n\n    return (\n        <Dialog\n            disableBackdropClick={true}\n            onClose={handleClose}\n            aria-labelledby=\"confirm-dialog-title\"\n            open={open}\n        >\n            <DialogTitle id=\"confirm-dialog-title\">{windowTitle}</DialogTitle>\n            {props.children}\n            {renderModalButtons()}\n        </Dialog>\n    );\n};\n\nModalWindow.propTypes = {\n    onClose: PropTypes.func.isRequired,\n    open: PropTypes.bool.isRequired\n};\n\nexport default ModalWindow;\n","import React from 'react';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\n\nconst renderCheckboxField = ({\n    custom,\n    input,\n    label,\n    name,\n    labelPlacement,\n    checked\n}) => {\n    return (\n        <FormControlLabel\n            labelPlacement={labelPlacement}\n            label={label}\n            name={name}\n            checked={checked}\n            control={<Checkbox color=\"primary\" {...custom} {...input} />}\n        />\n    );\n};\n\nexport default renderCheckboxField;\n","import React, { useRef } from \"react\";\nimport ReactSelect from \"react-select\";\nimport { Dialog, DialogTitle } from '@material-ui/core';\nimport Button from '@material-ui/core/Button';\nimport '../helper/multiselect.scss'\nimport { useTranslation } from 'react-i18next';\nexport const MultiselectForGroups = props => {\n    const { t } = useTranslation('common');\n    const valueRef = useRef(props.value);\n    valueRef.current = props.value;\n    const {open,onClose,onCancel}=props;\n\n    const selectAllOption = {\n        value: \"<SELECT_ALL>\",\n        label: t('all_groups')\n    };\n\n    const isSelectAllSelected = () => {\n        if(props.options!==undefined&&valueRef.current) {\n          return   valueRef.current.length === props.options.length;\n        }\n    }\n    const isOptionSelected = option =>\n        valueRef.current.some(({ value }) => value === option.value) ||\n        isSelectAllSelected();\n\n    const getOptions = () => [selectAllOption, ...props.options];\n\n    const getValue = () =>\n        isSelectAllSelected() ? [selectAllOption] : props.value;\n\n    const onChange = (newValue, actionMeta) => {\n        const { action, option, removedValue } = actionMeta;\n\n        if (action === \"select-option\" && option.value === selectAllOption.value) {\n            props.onChange(props.options, actionMeta);\n        }\n        else if (\n            (action === \"deselect-option\" &&\n                option.value === selectAllOption.value) ||\n            (action === \"remove-value\" &&\n                removedValue.value === selectAllOption.value)\n        ) {\n            props.onChange([], actionMeta);\n        } else if (\n            actionMeta.action === \"deselect-option\" &&\n            isSelectAllSelected()\n        ) {\n            props.onChange(\n                props.options.filter(({ value }) => value !== option.value),\n                actionMeta\n            );\n        } else {\n            props.onChange(newValue || [], actionMeta);\n        }\n    };\n    return (\n\n        <Dialog id=\"select-dialog\"\n\n                disableBackdropClick={true}\n                aria-labelledby=\"confirm-dialog-title\"\n                open={open}\n        >\n            <DialogTitle id=\"select-dialog-title\" className=\"confirm-dialog\">\n\n                <ReactSelect\n                    isOptionSelected={isOptionSelected}\n                    options={getOptions()}\n                    value={getValue()}\n                    onChange={onChange}\n                    hideSelectedOptions={false}\n                    closeMenuOnSelect={false}\n                    isMulti\n                    placeholder={t('choose_groups')}\n                />\n\n\n            </DialogTitle>\n            <div className=\"buttons-container\">\n\n                <Button\n                    className=\"dialog-button\"\n                    variant=\"contained\"\n                    color=\"primary\"\n                    onClick={onClose}\n                >\n                    {t('confirm_groups')}\n                </Button>\n                <Button\n                    className=\"dialog-button\"\n                    variant=\"contained\"\n                    color=\"primary\"\n                    onClick={onCancel}\n                >\n                    {t('cancel_groups')}\n                </Button>\n            </div>\n        </Dialog>\n    );\n};\n","import * as moment from 'moment';\nimport { connect } from 'react-redux';\nimport React, { useEffect, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { Field, reduxForm } from 'redux-form';\nimport Button from '@material-ui/core/Button';\nimport './SemesterForm.scss';\nimport Card from '../../share/Card/Card';\nimport renderCheckboxField from '../../share/renderedFields/checkbox';\nimport { SEMESTER_FORM } from '../../constants/reduxForms';\nimport renderTextField from '../../share/renderedFields/input';\nimport renderMonthPicker from '../../share/renderedFields/timeSemester';\nimport {\n    required,\n    minYearValue,\n    lessThanDate,\n    greaterThanDate\n} from '../../validation/validateFields';\nimport { getClassScheduleListService } from '../../services/classService';\nimport { daysUppercase } from '../../constants/schedule/days';\nimport { getClearOrCancelTitle, setDisableButton } from '../../helper/disableComponent';\nimport { showAllGroupsService } from '../../services/groupService';\nimport { MultiselectForGroups } from '../../helper/MultiselectForGroups';\nimport { useForm } from 'react-hook-form';\nimport formValueSelector from 'redux-form/lib/formValueSelector';\nimport { isObjectEmpty } from '../../helper/ObjectRevision';\n\nlet AddSemesterForm = props => {\n    const clearCheckboxes = () => {\n        setCurrent(false);\n        setByDefault(false);\n        setCheckedDates({\n            MONDAY: false,\n            TUESDAY: false,\n            WEDNESDAY: false,\n            THURSDAY: false,\n            FRIDAY: false,\n            SATURDAY: false,\n            SUNDAY: false\n        });\n    };\n    useEffect(() => getClassScheduleListService(), []);\n    useEffect(() => showAllGroupsService(), []);\n\n    const { t } = useTranslation('formElements');\n    const {\n        handleSubmit,\n        pristine,\n        onReset,\n        submitting,\n        semester,\n        groups,\n        selected,\n        setSelected,\n        selectedGroups,\n        setSelectedGroups\n    } = props;\n    const [openGroupDialog, setOpenGroupDialog] = useState(false);\n    useEffect(() => {\n        const { semester_groups } = semester;\n        if (semester_groups !== undefined && semester_groups !== null) {\n            setSelectedGroups(getGroupOptions(semester_groups));\n        }\n    }, [semester.id]);\n    const getGroupOptions = (groupOptions) => {\n\n        return groupOptions.map(item => {\n            return { id: item.id, value: item.id, label: `${item.title}` };\n        });\n    };\n    const options = getGroupOptions(groups);\n    const semesterOptions = getGroupOptions(groups.filter(x => !selectedGroups.includes(x)));\n    const openDialogForGroup = () => {\n        setOpenGroupDialog(true);\n    };\n    const closeDialogForGroup = () => {\n        setOpenGroupDialog(false);\n    };\n    const clearSelection = () => {\n        setSelected([]);\n    };\n    const onCancel = () => {\n        clearSelection();\n        closeDialogForGroup();\n    };\n\n    const onClose = () => {\n        closeDialogForGroup();\n    };\n    const onSubmit = (values) => {\n        handleSubmit(values);\n    };\n    const { setValue } = useForm();\n\n    let prepSetCheckedClasses = {};\n    useEffect(() => {\n        props.classScheduler.forEach(classItem => {\n            prepSetCheckedClasses[`${classItem.id}`] = false;\n        });\n        setCheckedClasses({ ...prepSetCheckedClasses });\n        clearCheckboxes();\n    }, [props.classScheduler, props.semester.id]);\n    const getToday = () => {\n        return new Date();\n    };\n    const getTomorrow = () => {\n        const tomorrow = new Date(getToday());\n        tomorrow.setDate(tomorrow.getDate() + 1);\n        return tomorrow;\n    };\n    const [current, setCurrent] = React.useState(false);\n    const [byDefault, setByDefault] = React.useState(false);\n    const [startTime, setStartTime] = useState(getToday());\n    const [finishTime, setFinishTime] = useState(getTomorrow());\n    const [startValue, setStartValue] = useState();\n    const [finishValue, setFinishValue] = useState();\n    const [disabledFinishDate, setDisabledFinishDate] = useState(true);\n    const [checkedDates, setCheckedDates] = React.useState({\n        MONDAY: false,\n        TUESDAY: false,\n        WEDNESDAY: false,\n        THURSDAY: false,\n        FRIDAY: false,\n        SATURDAY: false,\n        SUNDAY: false\n    });\n\n    const [checkedClasses, setCheckedClasses] = React.useState(\n        prepSetCheckedClasses\n    );\n\n    const handleChange = (event, setState) => setState(event.target.checked);\n\n    const setMinFinishDate = time => {\n        let new_date = moment(time, 'DD/MM/YYYY').add(1, 'd');\n        setFinishTime(new_date.toDate());\n    };\n    const setEndTime = startTime => {\n        if (disabledFinishDate || moment(startValue).isSameOrBefore(finishValue)) {\n            setFinishValue(setMinFinishDate(startTime));\n            props.change(\n                'endDay',\n                moment(startTime, 'DD/MM/YYYY').add(7, 'd').format('DD/MM/YYYY')\n            );\n        }\n        return;\n    };\n    const setCheckedDaysHandler = React.useCallback(\n        day => {\n            return function(event) {\n                let changedDay = { [day]: event.target.checked };\n                setCheckedDates({\n                    ...checkedDates,\n                    ...changedDay\n                });\n            };\n        },\n        [checkedDates]\n    );\n    const setCheckedClassesHandler = React.useCallback(\n        classid => {\n            return function(event) {\n                let changedClass = { [classid]: event.target.checked };\n                setCheckedClasses({\n                    ...checkedClasses,\n                    ...changedClass\n                });\n            };\n        },\n        [checkedClasses]\n    );\n\n    const setSemesterClasses = () => {\n        const classes = Object.keys(checkedClasses);\n        return classes.map(classItem => {\n            const scheduleItem = props.classScheduler.find(\n                schedule => schedule.id === +classItem\n            );\n            return (\n                <Field\n                    key={props.semester.id + classItem}\n                    name={`semester_classes_markup_${classItem}`}\n                    label={\n                        scheduleItem.class_name +\n                        ' (' +\n                        scheduleItem.startTime +\n                        '-' +\n                        scheduleItem.endTime +\n                        ')'\n                    }\n                    labelPlacement='end'\n                    component={renderCheckboxField}\n                    defaultValue={checkedClasses[classItem]}\n                    checked={checkedClasses[classItem]}\n                    onChange={setCheckedClassesHandler(classItem)}\n                    color='primary'\n                />\n            );\n        });\n    };\n    const setSemesterDays = () => {\n        const days = Object.keys(checkedDates);\n        return days.map(semesterDay => {\n            return (\n                <Field\n                    key={props.semester.id + semesterDay}\n                    name={`semester_days_markup_${semesterDay}`}\n                    label={t(`common:day_of_week_${semesterDay}`)}\n                    labelPlacement='end'\n                    defaultValue={checkedDates[semesterDay]}\n                    component={renderCheckboxField}\n                    checked={checkedDates[semesterDay]}\n                    onChange={setCheckedDaysHandler(semesterDay)}\n                    color='primary'\n                />\n            );\n        });\n    };\n\n    useEffect(() => {\n        let semesterItem = {};\n        clearCheckboxes();\n\n        if (props.semester) {\n            if (props.semester.id) {\n                semesterItem = {\n                    id: props.semester.id,\n                    year: props.semester.year,\n                    description: props.semester.description,\n                    startDay: props.semester.startDay,\n                    endDay: props.semester.endDay,\n                    currentSemester: props.semester.currentSemester,\n                    defaultSemester: props.semester.defaultSemester,\n                    semester_days: props.semester.semester_days,\n                    semester_classes: props.semester.semester_classes,\n                    semester_groups: props.semester.semester_groups\n\n                };\n\n                daysUppercase.forEach(dayItem => {\n                    if (props.semester.semester_days.includes(dayItem)) {\n                        semesterItem[`semester_days_markup_${dayItem}`] = true;\n                    }\n                });\n                const newDays = props.semester.semester_days.reduce(\n                    (result, day) => {\n                        result[day] = true;\n                        return result;\n                    },\n                    {}\n                );\n\n                if (props.classScheduler) {\n                    props.classScheduler.forEach(classFullItem => {\n                        if (\n                            props.semester.semester_classes.findIndex(\n                                classItem => {\n                                    return classFullItem.id === classItem.id;\n                                }\n                            ) >= 0\n                        ) {\n                            semesterItem[\n                                `semester_classes_markup_${classFullItem.id}`\n                                ] = true;\n                        }\n                    });\n                }\n\n                const newClasses = props.semester.semester_classes.reduce(\n                    (result, classItem) => {\n                        result[classItem.id] = true;\n                        return result;\n                    },\n                    {}\n                );\n\n                setCurrent(props.semester.currentSemester);\n                setByDefault(props.semester.defaultSemester);\n\n                setCheckedDates({\n                    MONDAY: false,\n                    TUESDAY: false,\n                    WEDNESDAY: false,\n                    THURSDAY: false,\n                    FRIDAY: false,\n                    SATURDAY: false,\n                    SUNDAY: false,\n                    ...newDays\n                });\n\n                let prepSetCheckedClasses = {};\n                if (props.classScheduler) {\n                    props.classScheduler.forEach(classItem => {\n                        prepSetCheckedClasses[`${classItem.id}`] = false;\n                    });\n                }\n                setCheckedClasses({\n                    ...prepSetCheckedClasses,\n                    ...newClasses\n                });\n            }\n        }\n        props.initialize(semesterItem);\n    }, [props.semester.id]);\n\n    const getChosenSet = () => {\n        const beginGroups = semester.semester_groups.map(item => item.id);\n        const resGroup = selectedGroups.map(item => item.id);\n        return resGroup.filter(x => !beginGroups.includes(x));\n    };\n    const getChosenSetRemove = () => {\n        const beginGroups = semester.semester_groups.map(item => item.id);\n        const resGroup = selectedGroups.map(item => item.id);\n        return beginGroups.filter(x => !resGroup.includes(x));\n    };\n    const isChosenGroup = () => {\n        const semesterCopy = { ...semester };\n        if (semesterCopy.semester_groups.length < 0) {\n            return true;\n        }\n        if(getChosenSet().length > 0){\n            return true;\n        }\n        else return getChosenSetRemove().length>0\n    };\n    const getDisabledSaveButton = () => {\n        if(!isObjectEmpty(semester)&&semester.id!==null) {\n            return (selectedGroups.length > 0 ?\n                    !isChosenGroup() :\n                    selected.length === 0) &&\n                (pristine || submitting);\n        }\n        return (pristine||submitting)\n\n    };\n\n    return (\n\n        <Card class='form-card semester-form'>\n            <h2 style={{ textAlign: 'center' }}>\n                {props.semester.id ? t('common:edit') : t('common:create')}\n                {` ${t('common:semester')}`}\n            </h2>\n            {selectedGroups.length === 0 ?\n                <MultiselectForGroups\n                    open={openGroupDialog}\n                    options={options}\n                    value={selected}\n                    onChange={setSelected}\n                    onCancel={onCancel}\n                    onClose={onClose}\n                /> :\n                <MultiselectForGroups\n                    open={openGroupDialog}\n                    options={semesterOptions}\n                    value={selectedGroups}\n                    onChange={setSelectedGroups}\n                    onCancel={onCancel}\n                    onClose={onClose}\n                />}\n            <form onSubmit={onSubmit}>\n                <div className='semester-checkbox group-options'>\n                    <div>\n                        <Field\n                            name='currentSemester'\n                            label={t('common:current_label')}\n                            labelPlacement='start'\n                            component={renderCheckboxField}\n                            checked={current}\n                            onChange={(e) => handleChange(e, setCurrent)}\n                            color='primary'\n                        />\n                        <Field\n                            name='defaultSemester'\n                            label={t('common:default_label')}\n                            labelPlacement='start'\n                            component={renderCheckboxField}\n                            checked={byDefault}\n                            onChange={(e) => handleChange(e, setByDefault)}\n                            color='primary'\n                        />\n                    </div>\n                    <Button\n                        variant='contained'\n                        color='primary'\n                        className='buttons-style '\n                        onClick={openDialogForGroup}\n                    >\n                        {t('common:choose_groups_button_label')}\n                    </Button>\n                </div>\n                <Field\n                    className='form-field'\n                    name='year'\n                    type='number'\n                    component={renderTextField}\n                    label={t('common:year_label') + ':'}\n                    validate={[required, minYearValue]}\n                />\n                <Field\n                    className='form-field'\n                    name='description'\n                    component={renderTextField}\n                    label={t('common:semester_label') + ':'}\n                    validate={[required]}\n                />\n                <div className='form-time-block'>\n                    <Field\n                        className='time-input'\n                        name='startDay'\n                        component={renderMonthPicker}\n                        label={t('common:class_from_label') + ':'}\n                        validate={[required, lessThanDate]}\n                        minDate={startTime}\n                        onChange={(event, value) => {\n                            if (value) {\n                                setStartValue(value);\n                                setMinFinishDate(value);\n                                setEndTime(value);\n                                setDisabledFinishDate(false);\n                            }\n                        }}\n                    />\n                    <Field\n                        className='time-input'\n                        name='endDay'\n                        component={renderMonthPicker}\n                        label={t('common:class_to_label') + ':'}\n                        validate={[required, greaterThanDate]}\n                        minDate={finishTime}\n                        disabled={disabledFinishDate}\n                        onChange={(event, value) => {\n                            setFinishValue(value);\n                        }}\n                    />\n                </div>\n                <div className=''>\n                    <p>{t('common:days_label') + ': '}</p>\n                    {setSemesterDays()}\n                </div>\n                <div className=''>\n                    <p>{t('common:ClassSchedule_management_title') + ': '}</p>\n                    {setSemesterClasses()}\n                </div>\n                <div className='form-buttons-container semester-btns'>\n                    <Button\n                        variant='contained'\n                        color='primary'\n                        className='buttons-style '\n                        disabled={getDisabledSaveButton()}\n                        type='submit'\n                    >\n                        {t('common:save_button_label')}\n                    </Button>\n                    <Button\n                        type='button'\n                        variant='contained'\n                        className='buttons-style'\n                        disabled={setDisableButton(pristine, submitting, semester.id) && selected.length === 0}\n                        onClick={() => {\n                            onReset();\n                            setSelected([]);\n                        }}\n                    >\n                        {getClearOrCancelTitle(semester.id, t)}\n                    </Button>\n                </div>\n            </form>\n        </Card>\n    );\n};\n\nconst mapStateToProps = state => ({\n    semester: state.semesters.semester,\n    classScheduler: state.classActions.classScheduler,\n    groups: state.groups.groups\n\n});\n\nexport default connect(mapStateToProps)(\n    reduxForm({\n        form: SEMESTER_FORM\n    })(AddSemesterForm)\n);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { Field, reduxForm } from 'redux-form';\n\nimport { makeStyles } from '@material-ui/core/styles';\nimport { useTranslation } from 'react-i18next';\n\nimport Button from '@material-ui/core/Button';\nimport { MdPlayArrow } from 'react-icons/md';\n\nimport renderSelectField from '../../share/renderedFields/select';\n\nimport './SemesterCopyForm.scss';\n\nimport { SEMESTER_COPY_FORM } from '../../constants/reduxForms';\nimport { required } from '../../validation/validateFields';\nconst shortid = require('shortid');\n\nconst useStyles = makeStyles(theme => ({\n    root: {\n        '& > *': {\n            margin: theme.spacing(1)\n        }\n    }\n}));\n\nconst SemesterCopyForm = props => {\n    const classes = useStyles();\n    const { t } = useTranslation('common');\n    const { semesterId, semesters, handleSubmit, pristine, submitting } = props;\n\n    const renderSemesterList = () => {\n        const available_semesters_for_copy = semesters.filter(\n            semester => semester.id !== semesterId\n        );\n        if (available_semesters_for_copy) {\n            if (available_semesters_for_copy.length > 1) {\n                return (\n                    <>\n                        <Field\n                            id=\"toSemesterId\"\n                            name=\"toSemesterId\"\n                            component={renderSelectField}\n                            label={t('formElements:semester_label')}\n                            type=\"text\"\n                            validate={[required]}\n                        >\n                            <option />\n                            {available_semesters_for_copy.map(\n                                (semester, index) => (\n                                    <option\n                                        key={shortid.generate()}\n                                        value={semester.id}\n                                    >\n                                        {semester.description}\n                                    </option>\n                                )\n                            )}\n                        </Field>\n                    </>\n                );\n            } else if (available_semesters_for_copy.length === 1) {\n                return <p>{available_semesters_for_copy[0].description}</p>;\n            }\n        }\n    };\n\n    return (\n        <section className={classes.root}>\n            <p>{t('formElements:semester_copy_hint')}</p>\n            <p className=\"red-color\">\n                {t('formElements:semester_copy_red_hint')}\n            </p>\n            <form onSubmit={handleSubmit}>\n                <div className=\"form-buttons-container\">\n                    {renderSemesterList()}\n                    <Button\n                        className='semester-copy-btn'\n                        variant=\"contained\"\n                        color=\"primary\"\n                        type=\"submit\"\n                        disabled={pristine || submitting}\n                    >\n                        <MdPlayArrow\n                            title={t('teacher_schedule_label')}\n                            className=\"svg-btn\"\n                        />\n                        {props.submitButtonLabel}\n                    </Button>\n                </div>\n            </form>\n        </section>\n    );\n};\n\nconst mapStateToProps = state => ({\n    semesters: state.semesters.semesters\n});\nexport default connect(mapStateToProps)(\n    reduxForm({\n        form: SEMESTER_COPY_FORM\n    })(SemesterCopyForm)\n);\n","import React from 'react';\n\nimport PropTypes from 'prop-types';\n\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport Dialog from '@material-ui/core/Dialog';\nimport Button from '@material-ui/core/Button';\n\nimport './modal.scss';\n\nimport i18n from 'i18next';\nimport { disabledCard } from '../../../constants/disabledCard';\nimport './setDefaultDialog.scss'\nexport const SetChangeDialog = props => {\n    const { onClose, cardId, isHide, open} = props;\n\n    const handleClose = () => {\n        onClose(cardId);\n    };\n    const className=\"set-default\";\n    return (\n        <Dialog\n\n            disableBackdropClick={true}\n            onClose={handleClose}\n            aria-labelledby=\"confirm-dialog-title\"\n            open={open}\n        >\n            <DialogTitle id=\"confirm-dialog-title\">\n                <>\n                    {isHide ? (\n                        <>\n                            {isHide === disabledCard.HIDE ? (\n                                <>{i18n.t('common:do_you_wanna_disable')}</>\n                            ) : (\n                                <>{i18n.t('common:do_you_wanna_show')}</>\n                            )}\n                        </>\n                    ) : (\n                        <>\n                            {i18n.t('common:do_you_wanna')}{' '}\n                            <span className={className}>\n                                {i18n.t(`common:set_default_word`)}\n                            </span>{' '}\n                        </>\n                    )}\n\n                    {i18n.t('common:this_card_type', {\n                        cardType: i18n.t(`formElements:semester_element`)\n                    })}\n                </>\n            </DialogTitle>\n            <div className=\"buttons-container\">\n                <Button\n                    className=\"dialog-button\"\n                    variant=\"contained\"\n                    color=\"primary\"\n                    onClick={() => onClose(cardId)}\n                >\n                    {i18n.t('common:yes_button_title')}\n                </Button>\n                <Button\n                    className=\"dialog-button\"\n                    variant=\"contained\"\n                    onClick={() => onClose('')}\n                >\n                    {i18n.t('common:no_button_title')}\n                </Button>\n            </div>\n        </Dialog>\n    );\n};\n\nSetChangeDialog.propTypes = {\n    onClose: PropTypes.func.isRequired,\n    open: PropTypes.bool.isRequired\n};\n\nexport default SetChangeDialog;\n","import { connect } from 'react-redux';\nimport { FaEdit, FaUsers } from 'react-icons/fa';\nimport { MdDelete, MdDonutSmall, MdEdit } from 'react-icons/md';\nimport { useTranslation } from 'react-i18next';\nimport React, { useEffect, useState } from 'react';\n\nimport './SemesterPage.scss';\nimport Card from '../../share/Card/Card';\nimport { search } from '../../helper/search';\nimport NotFound from '../../share/NotFound/NotFound';\nimport ConfirmDialog from '../../share/modals/dialog';\nimport ModalWindow from '../../share/modals/modal/modal';\nimport SearchPanel from '../../share/SearchPanel/SearchPanel';\nimport SnackbarComponent from '../../share/Snackbar/SnackbarComponent';\nimport { handleSnackbarCloseService } from '../../services/snackbarService';\nimport SemesterForm from '../../components/SemesterForm/SemesterForm';\nimport SemesterCopyForm from '../../components/SemesterCopyForm/SemesterCopyForm';\nimport {\n    clearSemesterService,\n    getDisabledSemestersService,\n    handleSemesterService,\n    removeSemesterCardService,\n    selectSemesterService,\n    setDisabledSemestersService,\n    setEnabledSemestersService,\n    showAllSemestersService,\n    semesterCopy,\n    createArchiveSemesterService,\n    getArchivedSemestersService,\n    viewArchivedSemester, setDefaultSemesterById, setGroupsToSemester\n} from '../../services/semesterService';\nimport { setScheduleTypeService } from '../../services/scheduleService';\nimport { disabledCard } from '../../constants/disabledCard';\nimport { GiSightDisabled, IoMdEye, FaCopy } from 'react-icons/all';\nimport { FaFileArchive } from 'react-icons/fa';\n\nimport GroupSchedulePage from '../../components/GroupSchedulePage/GroupSchedulePage';\nimport NavigationPage from '../../components/Navigation/NavigationPage';\nimport { navigation, navigationNames } from '../../constants/navigation';\nimport SetDefaultDialog from '../../share/modals/modal/setDefaultDialog';\nimport SetChangeDialog from '../../share/modals/modal/setDefaultDialog';\nimport { MultiselectForGroups } from '../../helper/MultiselectForGroups';\nimport { showAllGroupsService } from '../../services/groupService';\nimport { successHandler } from '../../helper/handlerAxios';\nimport i18n from '../../helper/i18n';\n\nconst SemesterPage = props => {\n    const { t } = useTranslation('formElements');\n    const [open, setOpen] = useState(false);\n    const [openDefault, setOpenDefault] = useState(false);\n    const [openModal, setOpenModal] = useState(false);\n    const [openGroupsDialog, setOpenGroupsDialog] = useState(false);\n    const [semesterId, setSemesterId] = useState(-1);\n    const [term, setTerm] = useState('');\n    const { isSnackbarOpen, snackbarType, snackbarMessage, semester, groups } = props;\n    const [selected, setSelected] = useState([]);\n    const [selectedGroups, setSelectedGroups] = useState([]);\n    const [semesterOptions, setSemesterOptions] = useState([]);\n    const [edit, setEdit] = useState(false);\n    const getGroupOptions = (groupOptions) => {\n\n        return groupOptions.map(item => {\n            return { id: item.id, value: item.id, label: `${item.title}` };\n        });\n    };\n    const options = getGroupOptions(groups.filter(x => !selectedGroups.includes(x)));\n    useEffect(() => {\n        if (semester.semester_groups !== undefined && semester.semester_groups.length > 0) {\n            setSemesterOptions(getGroupOptions(semester.semester_groups));\n        }\n    }, [semester.id]);\n    useEffect(() => showAllSemestersService(), []);\n    useEffect(() => {\n        getDisabledSemestersService();\n    }, []);\n    useEffect(() => getArchivedSemestersService(), []);\n    useEffect(() => showAllGroupsService(), []);\n    const [hideDialog, setHideDialog] = useState(null);\n    const [hideDialogModal, setHideDialogModal] = useState(null);\n    const [disabled, setDisabled] = useState(false);\n    const [archived, setArchived] = useState(false);\n\n    setScheduleTypeService('archived');\n\n    const SearchChange = setTerm;\n    const isEqualsArrObjects = (arr1, arr2) => {\n        const a = [...arr1];\n        const b = [...arr2];\n        if (a.length !== b.length)\n            return false;\n\n        for (let i = 0; i < a.length; i++)\n            if (a[i].id !== b[i].id)\n                return false;\n        return true;\n    };\n    const onChangeGroups = () => {\n        const beginGroups = semester.semester_groups !== undefined ? getGroupOptions(semester.semester_groups) : [];\n        const finishGroups = [...semesterOptions];\n        if (isEqualsArrObjects(beginGroups, finishGroups)) {\n            successHandler(\n                i18n.t('serviceMessages:group_exist_in_this_semester', {\n                    cardType: i18n.t('common:group_title'),\n                    actionType: i18n.t('serviceMessages:student_label')\n                })\n            );\n            return;\n        }\n        setGroupsToSemester(semesterId, semesterOptions);\n        setOpenGroupsDialog(false);\n    };\n    const onCancel = () => {\n        setSemesterOptions(getGroupOptions(semester.semester_groups));\n        setOpenGroupsDialog(false);\n    };\n    const handleFormReset = () => {\n        setSelectedGroups([]);\n        clearSemesterService();\n    };\n\n    const submit = (values) => {\n        const groupsForService = selected.length === 0 ? selectedGroups : selected;\n        const semester_groups = groupsForService.map(group => {\n            return { id: group.id,title:group.label };\n        });\n        const data = { ...values, semester_groups };\n        handleSemesterService(data);\n    };\n    const handleEdit = semesterId => selectSemesterService(semesterId);\n    const handleCreateArchive = semesterId =>\n        createArchiveSemesterService(semesterId);\n\n    const searchArr = ['year', 'description', 'startDay', 'endDay'];\n\n    let visibleItems = [];\n    if (disabled) {\n        visibleItems = search(props.disabledSemesters, term, searchArr);\n    } else if (archived) {\n        visibleItems = search(props.archivedSemesters, term, searchArr);\n    } else {\n        visibleItems = search(props.semesters, term, searchArr);\n    }\n\n    const handleClickOpen = semesterId => {\n        setSemesterId(semesterId);\n        setOpen(true);\n    };\n    const handleClickOpenDefault = semesterId => {\n        setSemesterId(semesterId);\n        setOpenDefault(true);\n    };\n    const handleClickOpenModal = semesterId => {\n        setSemesterId(semesterId);\n        setOpenModal(true);\n    };\n\n    const handleSnackbarClose = (event, reason) => {\n        if (reason === 'clickaway') return;\n        handleSnackbarCloseService();\n    };\n\n    const handleCloseModal = (event, reason) => {\n        setOpenModal(false);\n        setHideDialogModal(null);\n        if (reason === 'clickaway') return;\n    };\n\n    const handleClose = semesterId => {\n        const setDelete = open;\n        const setDefault = openDefault;\n        setOpen(false);\n        setOpenDefault(false);\n        if (!semesterId) return;\n        if (hideDialog) {\n            if (disabled) {\n                const semester = props.disabledSemesters.find(\n                    semester => semester.id === semesterId\n                );\n                setEnabledSemestersService(semester);\n            } else {\n                const semester = props.semesters.find(\n                    semester => semester.id === semesterId\n                );\n                setDisabledSemestersService(semester);\n            }\n        } else if (setDelete) {\n            removeSemesterCardService(semesterId);\n        } else if (setDefault) {\n            setDefaultSemesterById(semesterId);\n        }\n        setHideDialog(null);\n    };\n\n    const showDisabledHandle = () => {\n        setDisabled(!disabled);\n        setArchived(false);\n    };\n\n    const showArchivedHandler = () => {\n        setArchived(!archived);\n        !archived === true\n            ? setScheduleTypeService('archived')\n            : setScheduleTypeService('default');\n        setDisabled(false);\n    };\n    const handleSemesterCopySubmit = values => {\n        semesterCopy({\n            fromSemesterId: +semesterId,\n            toSemesterId: +values.toSemesterId\n        });\n        setOpenModal(false);\n        setHideDialogModal(null);\n    };\n\n    const handleSemesterArchivedPreview = semesterId => {\n        viewArchivedSemester(+semesterId);\n    };\n    const setClassNameForDefaultSemester = semester => {\n        const defaultSemesterName = 'default';\n        const className = 'svg-btn edit-btn';\n        return semester.defaultSemester === true ? `${className} ${defaultSemesterName}` : className;\n    };\n\n    return (\n        <>\n            <NavigationPage name={navigationNames.SEMESTER_PAGE} val={navigation.SEMESTERS} />\n            <ConfirmDialog\n                cardId={semesterId}\n                whatDelete={'semester'}\n                isHide={hideDialog}\n                open={open}\n                onClose={handleClose}\n            />\n            <SetChangeDialog\n                cardId={semesterId}\n                isHide={hideDialog}\n                open={openDefault}\n                onClose={handleClose}\n            />\n            <ModalWindow\n                whatDelete={'semester'}\n                isHide={hideDialogModal}\n                open={openModal}\n                onClose={handleCloseModal}\n                windowTitle={t('semester_copy_label')}\n                isOkButton={false}\n                isNoButton={true}\n                noButtonLabel={t('close_label')}\n            >\n                <SemesterCopyForm\n                    semesterId={semesterId}\n                    onSubmit={handleSemesterCopySubmit}\n                    submitButtonLabel={t('copy_label')}\n                />\n            </ModalWindow>\n            <div className='cards-container'>\n                <aside className='search-list__panel'>\n                    <SearchPanel\n                        SearchChange={SearchChange}\n                        showDisabled={showDisabledHandle}\n                        showArchived={showArchivedHandler}\n                    />\n                    {disabled || archived ? (\n                            ''\n                        ) :\n                        <SemesterForm\n                            selectedGroups={selectedGroups}\n                            setSelectedGroups={setSelectedGroups}\n                            selected={selected}\n                            setSelected={setSelected}\n                            className='form'\n                            onSubmit={submit}\n                            onReset={handleFormReset}\n                            semester={edit ? semester : {}}\n\n                        />\n                    }\n                </aside>\n                <section className='container-flex-wrap wrapper'>\n                    {visibleItems.length === 0 && (\n                        <NotFound name={t('semestry_label')} />\n                    )}\n                    {visibleItems.map((semester, index) => {\n                        const sem_days = [];\n\n                        semester.semester_days.forEach(day =>\n                            sem_days.push(t(`common:day_of_week_${day}`))\n                        );\n                        return (\n                            <Card\n                                key={index}\n                                class={`semester-card done-card ${\n                                    semester.currentSemester ? 'current' : ''\n                                }`}\n                            >\n                                <div className='cards-btns'>\n                                    {!disabled && !archived ? (\n                                        <>\n                                            <GiSightDisabled\n                                                className='svg-btn copy-btn'\n                                                title={t('common:set_disabled')}\n                                                onClick={() => {\n                                                    setHideDialog(\n                                                        disabledCard.HIDE\n                                                    );\n                                                    handleClickOpen(\n                                                        semester.id\n                                                    );\n                                                }}\n                                            />\n                                            <FaEdit\n                                                className='svg-btn edit-btn'\n                                                title={t('edit_title')}\n                                                onClick={() => {\n                                                    handleEdit(semester.id);\n                                                    setEdit(true);\n                                                }\n\n                                                }\n                                            />\n                                            <FaCopy\n                                                className='svg-btn copy-btn'\n                                                title={t('copy_label')}\n                                                onClick={() => {\n                                                    handleClickOpenModal(\n                                                        semester.id\n                                                    );\n                                                }}\n                                            />\n                                            {semester.currentSemester ? (\n                                                ''\n                                            ) : (\n                                                <FaFileArchive\n                                                    className='svg-btn archive-btn'\n                                                    title={t(\n                                                        'common:make_archive'\n                                                    )}\n                                                    onClick={() => {\n                                                        handleCreateArchive(\n                                                            semester.id\n                                                        );\n                                                    }}\n                                                />\n                                            )}\n                                        </>\n                                    ) : !archived ? (\n                                        <IoMdEye\n                                            className='svg-btn copy-btn'\n                                            title={t('common:set_enabled')}\n                                            onClick={() => {\n                                                setHideDialog(\n                                                    disabledCard.SHOW\n                                                );\n                                                handleClickOpen(semester.id);\n                                            }}\n                                        />\n                                    ) : (\n                                        <IoMdEye\n                                            className='svg-btn copy-btn'\n                                            title={t('common:preview')}\n                                            onClick={() => {\n                                                handleSemesterArchivedPreview(\n                                                    semester.id\n                                                );\n                                            }}\n                                        />\n                                    )}\n                                    <MdDelete\n                                        className='svg-btn delete-btn'\n                                        title={t('delete_title')}\n                                        onClick={() =>\n                                            handleClickOpen(semester.id)\n                                        }\n                                    />\n\n                                    <MdDonutSmall\n                                        className={setClassNameForDefaultSemester(semester)}\n                                        title={t('set_default_title')}\n                                        onClick={() =>\n                                            handleClickOpenDefault(semester.id)\n                                        }\n                                    />\n\n\n                                </div>\n\n                                <p className='semester-card__description'>\n                                    <small>{t('semester_label') + ':'}</small>\n                                    <b>{semester.description}</b>\n                                    {' ( ' + semester.year + ' )'}\n                                </p>\n                                <p className='semester-card__description'>\n                                    <b>\n                                        {semester.startDay} - {semester.endDay}\n                                    </b>\n                                </p>\n                                <p className='semester-card__description'>\n                                    {t('common:days_label') + ': '}\n                                    {sem_days.join(', ')}\n                                </p>\n                                <p className='semester-card__description'>\n                                    {t(\n                                        'common:ClassSchedule_management_title'\n                                    ) + ': '}\n                                    {semester.semester_classes\n                                        .map(classItem => {\n                                            return classItem.class_name;\n                                        })\n                                        .join(', ')}\n                                </p>\n\n                                <FaUsers\n                                    title={t('formElements:show_groups')}\n                                    className='svg-btn copy-btn  semester-groups'\n                                    onClick={\n                                        () => {\n                                            setSemesterId(semester.id);\n                                            selectSemesterService(semester.id);\n                                            setOpenGroupsDialog(true);\n                                        }\n                                    }\n                                />\n                            </Card>\n\n                        );\n                    })}\n                </section>\n            </div>\n            <SnackbarComponent\n                message={snackbarMessage}\n                type={snackbarType}\n                isOpen={isSnackbarOpen}\n                handleSnackbarClose={handleSnackbarClose}\n            />\n            <GroupSchedulePage scheduleType='archived' />\n            <MultiselectForGroups\n                open={openGroupsDialog}\n                options={options}\n                value={semesterOptions}\n                onChange={setSemesterOptions}\n                onCancel={onCancel}\n                onClose={onChangeGroups}\n            />\n        </>\n    );\n};\nconst mapStateToProps = state => ({\n    semesters: state.semesters.semesters,\n    semester: state.semesters.semester,\n    disabledSemesters: state.semesters.disabledSemesters,\n    archivedSemesters: state.semesters.archivedSemesters,\n    isSnackbarOpen: state.snackbar.isSnackbarOpen,\n    snackbarType: state.snackbar.snackbarType,\n    snackbarMessage: state.snackbar.message,\n    groups: state.groups.groups\n});\n\nexport default connect(mapStateToProps, {})(SemesterPage);\n","import axios from '../helper/axios';\nimport { store } from '../index';\n\nimport {\n    MERGE_USER_AND_TEACHER_URL,\n    USERS_URL,\n    USER_PROFILE,\n    UPDATE_USER_PROFILE\n} from '../constants/axios';\nimport { setUsers, setUser, setTeacher } from '../redux/actions/index';\n\nimport i18n from '../helper/i18n';\nimport { setLoadingService } from './loadingService';\nimport { getTeachersWithoutAccount } from './teacherService';\nimport { errorHandler, successHandler } from '../helper/handlerAxios';\n\nexport const getUsersService = () => {\n    axios\n        .get(USERS_URL)\n        .then(response => {\n            store.dispatch(setUsers(response.data));\n        })\n        .catch(error => errorHandler(error));\n};\n\nexport const getUserProfile = () => {\n    axios\n        .get(USER_PROFILE)\n        .then(response => {\n            store.dispatch(setUser(response.data));\n            if (response.data.teacher_name) {\n                store.dispatch(\n                    setTeacher({\n                        id: 15,\n                        name: response.data.teacher_name,\n                        surname: response.data.teacher_surname,\n                        patronymic: response.data.teacher_patronymic,\n                        position: response.data.teacher_position\n                    })\n                );\n            }\n        })\n        .catch(error => errorHandler(error));\n};\n\nexport const updateUserPassword = values => {\n    axios\n        .put(UPDATE_USER_PROFILE, {\n            current_password: values.current_password,\n            new_password: values.new_password\n        })\n        .then(response => {\n            store.dispatch(setUser(response.data));\n            successHandler(\n                i18n.t('serviceMessages:back_end_success_operation', {\n                    cardType: i18n.t('formElements:teacher_label'),\n                    actionType: i18n.t('serviceMessages:updated')\n                })\n            );\n        })\n        .catch(error => errorHandler(error));\n};\nexport const updateUserTeacher = values => {\n    axios\n        .put(UPDATE_USER_PROFILE, {\n            teacher_name: values.name,\n            teacher_surname: values.surname,\n            teacher_patronymic: values.patronymic,\n            teacher_position: values.position\n        })\n        .then(response => {\n            store.dispatch(setUser(response.data));\n            store.dispatch(\n                setTeacher({\n                    id: 15,\n                    name: response.data.teacher_name,\n                    surname: response.data.teacher_surname,\n                    patronymic: response.data.teacher_patronymic,\n                    position: response.data.teacher_position\n                })\n            );\n            successHandler(\n                i18n.t('serviceMessages:back_end_success_operation', {\n                    cardType: i18n.t('formElements:user_label'),\n                    actionType: i18n.t('serviceMessages:updated')\n                })\n            );\n        })\n        .catch(error => errorHandler(error));\n};\n\nexport const mergeUserAndTeacherService = mergeObj => {\n    axios\n        .put(MERGE_USER_AND_TEACHER_URL, mergeObj)\n        .then(response => {\n            getTeachersWithoutAccount();\n            getUsersService();\n            setLoadingService(false);\n            successHandler(\n                i18n.t('serviceMessages:back_end_success_operation', {\n                    cardType: i18n.t('formElements:user_label'),\n                    actionType: i18n.t('serviceMessages:successfully_merged')\n                })\n            );\n        })\n        .catch(error => {\n            setLoadingService(false);\n            errorHandler(error);\n        });\n};\n","import React, { useEffect, useState } from 'react';\nimport { connect } from 'react-redux';\nimport { useTranslation } from 'react-i18next';\n\nimport {\n    getUsersService,\n    mergeUserAndTeacherService\n} from '../../services/userService';\nimport { getTeachersWithoutAccount } from '../../services/teacherService';\nimport { setLoadingService } from '../../services/loadingService';\n\n\nimport TextField from '@material-ui/core/TextField';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport Button from '@material-ui/core/Button';\nimport { CircularProgress } from '@material-ui/core';\n\nimport Card from '../../share/Card/Card';\n\nimport './MergeRolePage.scss';\nimport NavigationPage from '../../components/Navigation/NavigationPage';\nimport { navigation, navigationNames } from '../../constants/navigation';\n\nconst useStyles = makeStyles(() => ({\n    autoCompleteField: {\n        '&': {\n            display: 'inline-block',\n            margin: '0 10px 10px 0',\n            width: 200\n        }\n    }\n}));\n\nconst MergeRolePage = props => {\n    const { t } = useTranslation('common');\n\n    const [teacher, setTeacher] = useState(null);\n    const [user, setUser] = useState(null);\n\n    const classes = useStyles();\n\n    const teachers = props.teachers;\n    const users = props.users;\n\n    useEffect(() => getTeachersWithoutAccount(), []);\n    useEffect(() => getUsersService(), []);\n\n    const defaultPropsTeachers = {\n        options: teachers,\n        getOptionLabel: option =>\n            option\n                ? option.position +\n                  ' ' +\n                  option.surname +\n                  ' ' +\n                  option.name +\n                  ' ' +\n                  option.patronymic\n                : ''\n    };\n\n    const defaultPropsUsers = {\n        options: users,\n        getOptionLabel: option => (option ? option.email : '')\n    };\n\n    const mergeUserAndTeacherHandle = () => {\n        if (!user || !teacher) return;\n        mergeUserAndTeacherService({ teacherId: teacher.id, userId: user.id });\n        setUser(null);\n        setTeacher(null);\n        setLoadingService(true);\n    };\n\n    return (\n        <>\n            <NavigationPage  val={navigation.USERS}/>\n            <div className=\"merge-role-form\">\n                <Card class=\"merge-role-card\">\n                    <h2 className=\"under-line\">{t('merge_header')}</h2>\n                    {props.loading ? (\n                        <CircularProgress />\n                    ) : (\n                        <>\n                            <div className=\"autocomplete-group\">\n                                <Autocomplete\n                                    {...defaultPropsTeachers}\n                                    clearOnEscape\n                                    openOnFocus\n                                    className={classes.autoCompleteField}\n                                    onChange={(event, newValue) => {\n                                        setTeacher(newValue);\n                                    }}\n                                    renderInput={params => (\n                                        <TextField\n                                            {...params}\n                                            label={t(\n                                                'formElements:teacher_label'\n                                            )}\n                                            margin=\"normal\"\n                                        />\n                                    )}\n                                />\n                                <Autocomplete\n                                    {...defaultPropsUsers}\n                                    clearOnEscape\n                                    openOnFocus\n                                    className={classes.autoCompleteField}\n                                    onChange={(event, newValue) => {\n                                        setUser(newValue);\n                                    }}\n                                    renderInput={params => (\n                                        <TextField\n                                            {...params}\n                                            label={t('formElements:user_label')}\n                                            margin=\"normal\"\n                                        />\n                                    )}\n                                />\n                            </div>\n                            <Button\n                                className=\"merge-btn\"\n                                variant=\"contained\"\n                                color=\"primary\"\n                                onClick={() => mergeUserAndTeacherHandle()}\n                            >\n                                {t('formElements:merge_button')}\n                            </Button>\n                        </>\n                    )}\n                </Card>\n            </div>\n        </>\n    );\n};\nconst mapStateToProps = state => ({\n    teachers: state.teachers.teachers,\n    users: state.users.users,\n    loading: state.loadingIndicator.loading\n});\n\nexport default connect(mapStateToProps)(MergeRolePage);\n","import React from 'react';\nimport { Field, reduxForm } from 'redux-form';\n\nimport { connect } from 'react-redux';\n\nimport './ChangePasswordForm.scss';\n\nimport renderTextField from '../../share/renderedFields/input';\n\nimport Button from '@material-ui/core/Button';\n\nimport { required, password } from '../../validation/validateFields';\n\nimport { PROFILE_FORM } from '../../constants/reduxForms';\nimport { useTranslation } from 'react-i18next';\nimport NavigationPage from '../Navigation/NavigationPage';\nimport { navigation, navigationNames } from '../../constants/navigation';\nimport { Accordion, AccordionDetails, AccordionSummary } from '@material-ui/core';\nimport Typography from '@material-ui/core/Typography';\n\n\nfunction ExpandMoreIcon() {\n    return null;\n}\n\nlet ChangePasswordForm = props => {\n    const { t } = useTranslation('formElements');\n    const { handleSubmit, pristine, onReset, submitting } = props;\n\n    return (\n        <>\n            <Accordion>\n                <AccordionSummary\n                    expandIcon={<ExpandMoreIcon />}\n                    aria-controls='panel1a-content'\n                    id='panel1a-header'\n                >\n                    <Typography>{t('change_password_form_title')}</Typography>\n                </AccordionSummary>\n                <AccordionDetails>\n                    <Typography>\n                        <form onSubmit={handleSubmit}>\n                            <Field\n                                component={renderTextField}\n                                className='form-field'\n                                name='current_password'\n                                id='current_password'\n                                label={t('password_label')}\n                                type='password'\n                                validate={[required, password]}\n                            />\n                            <Field\n                                component={renderTextField}\n                                className='form-field'\n                                name='new_password'\n                                id='new_password'\n                                label={t('new_password_label')}\n                                type='password'\n                                validate={[required, password]}\n                            />\n                            <Field\n                                component={renderTextField}\n                                className='form-field'\n                                name='confirm_password'\n                                id='confirm_password'\n                                label={t('retype_password_label')}\n                                type='password'\n                                validate={[required, password]}\n                            />\n\n                            <div className='form-buttons-container'>\n                                <Button\n                                    className='buttons-style'\n                                    type='submit'\n                                    variant='contained'\n                                    color='primary'\n                                    disabled={pristine || submitting}\n                                >\n                                    {t('save_button_label')}\n                                </Button>\n                                <Button\n                                    className='buttons-style'\n                                    type='button'\n                                    variant='contained'\n                                    disabled={pristine || submitting}\n                                    onClick={onReset}\n                                >\n                                    {t('clear_button_label')}\n                                </Button>\n                            </div>\n                        </form>\n                    </Typography>\n                </AccordionDetails>\n            </Accordion>\n        </>\n    );\n};\n\nconst mapStateToProps = state => ({});\n\nexport default connect(mapStateToProps)(\n    reduxForm({\n        form: PROFILE_FORM\n    })(ChangePasswordForm)\n);\n","import React, { useEffect, Fragment } from 'react';\nimport { connect } from 'react-redux';\nimport Card from '../../share/Card/Card';\nimport './BusyRooms.scss';\nimport { useTranslation } from 'react-i18next';\nimport { getScheduleItemsService } from '../../services/scheduleService';\nimport { getClassScheduleListService } from '../../services/classService';\nimport { CircularProgress } from '@material-ui/core';\nimport { setLoadingService } from '../../services/loadingService';\nimport AdminPage from '../AdminPage/AdminPage';\nimport NavigationPage from '../../components/Navigation/NavigationPage';\nimport { navigation, navigationNames } from '../../constants/navigation';\n\nconst BusyRooms = props => {\n    const { t } = useTranslation('common');\n\n    useEffect(() => getScheduleItemsService(), []);\n    useEffect(() => {\n        getClassScheduleListService();\n        setLoadingService(true);\n    }, []);\n\n    const busyRooms = props.busyRooms[0];\n\n    const isLoading = props.loading;\n\n    let conflictLesson = 'more-then-one-conflict';\n    let grouppedLesson = 'more-then-one';\n\n    let busyRoomsLength;\n\n    if (busyRooms !== undefined) {\n        busyRoomsLength = busyRooms.length;\n    }\n\n    const renderRoomTitle = (name, type) => (\n        <h3 className=\"room-heading\">\n            <span className=\"room-name\">{name}</span>\n            <span className=\"room-type\">{type}</span>\n        </h3>\n    );\n\n    const renderWeekRoomInfo = (schedule, index, type = 'odd') => {\n        return props.currentSemester.semester_classes.map(scheduleClass => {\n            let in_arrayIndex = -1;\n            in_arrayIndex =\n                type === 'odd'\n                    ? schedule.classes[0].odd.findIndex(\n                          classItem => classItem.class_id === scheduleClass.id\n                      )\n                    : schedule.classes[0].even.findIndex(\n                          classItem => classItem.class_id === scheduleClass.id\n                      );\n            let classOne =\n                type === 'odd'\n                    ? schedule.classes[0].odd.find(\n                          classItem => classItem.class_id === scheduleClass.id\n                      )\n                    : schedule.classes[0].even.find(\n                          classItem => classItem.class_id === scheduleClass.id\n                      );\n            if (\n                in_arrayIndex < 0 ||\n                !classOne ||\n                classOne.lessons.length <= 0\n            ) {\n                return (\n                    <div\n                        className=\"class-info\"\n                        key={index + scheduleClass.class_name}\n                    >\n                        <div className=\"class-info-data class-number\">\n                            {scheduleClass.class_name}\n                        </div>\n                        <div className=\"class-info-data\">\n                            <div className=\"green-free\"></div>\n                        </div>\n                    </div>\n                );\n            } else {\n                let intersectClass = '';\n                if (\n                    classOne &&\n                    classOne.lessons &&\n                    classOne.lessons.length > 1\n                ) {\n                    intersectClass = conflictLesson;\n                }\n                let grouppedLessonClass = '';\n                classOne.lessons.map(lessonOne => {\n                    grouppedLessonClass =\n                        lessonOne.groups.length > 1 ? grouppedLesson : '';\n                });\n                return (\n                    <div\n                        className=\"class-info\"\n                        key={index + classOne.class_name + classOne.group_name}\n                    >\n                        <div className=\"class-info-data class-number\">\n                            {classOne.class_name}\n                        </div>\n                        <div\n                            className={`class-info-data group-height ${grouppedLessonClass}${intersectClass}`}\n                        >\n                            {classOne.lessons.map(lessonOne => {\n                                return lessonOne.groups.map(groupItem => {\n                                    const hoverInfo =\n                                        lessonOne.teacher_for_site +\n                                        lessonOne.subject_for_site;\n                                    return (\n                                        <p\n                                            title={hoverInfo}\n                                            key={hoverInfo + lessonOne.name}\n                                        >\n                                            {groupItem.group_name}\n                                        </p>\n                                    );\n                                });\n                            })}\n                        </div>\n                    </div>\n                );\n            }\n        });\n    };\n\n    const renderRoomDay = (schedule, index) => (\n        <section className=\"room-day\" key={index + schedule.day}>\n            <h3 className=\"room-heading\">{t(`day_of_week_${schedule.day}`)}</h3>\n            <section>\n                <Fragment key={index}>\n                    <div className=\"even-odd-week\">\n                        <span className=\"even-odd-heading\">\n                            {t('week_odd_title')}\n                        </span>\n                        {renderWeekRoomInfo(schedule, index, 'odd')}\n                    </div>\n                    <div className=\"even-odd-week\">\n                        <span className=\"even-odd-heading\">\n                            {t('week_even_title')}\n                        </span>\n                        {renderWeekRoomInfo(schedule, index, 'even')}\n                    </div>\n                </Fragment>\n            </section>\n        </section>\n    );\n    return (\n        <div className=\"busy-rooms-container\">\n            {isLoading ? (\n                <h2 className=\"busy-heading\">\n                    <CircularProgress />\n                </h2>\n            ) : (\n                <>\n\n                    {busyRoomsLength > 0 ? (\n                        <>\n                            <NavigationPage val={navigation.BUSY_ROOMS}/>\n                            <h2 className=\"busy-heading\">\n                                {t('busy_rooms_heading')}\n                            </h2>\n                            <section className=\"view-rooms\">\n                                {busyRooms.map(busyRoom => (\n                                    <Card\n                                        class=\"busy-room\"\n                                        key={busyRoom.room_id}\n                                    >\n                                        {renderRoomTitle(\n                                            busyRoom.room_name,\n                                            busyRoom.room_type\n                                        )}\n\n                                        {busyRoom.schedules.map(\n                                            (schedule, index) => {\n                                                return props.currentSemester.semester_days.includes(\n                                                    schedule.day\n                                                )\n                                                    ? renderRoomDay(\n                                                          schedule,\n                                                          index\n                                                      )\n                                                    : '';\n                                            }\n                                        )}\n                                    </Card>\n                                ))}\n                            </section>\n                        </>\n                    ) : (\n                        <>\n                            <h2 className=\"busy-heading\">\n                                <CircularProgress />\n                            </h2>\n                        </>\n                    )}\n                </>\n            )}\n        </div>\n    );\n};\n\nconst mapStateToProps = state => ({\n    busyRooms: state.busyRooms.busyRooms,\n    loading: state.loadingIndicator.loading,\n    currentSemester: state.schedule.currentSemester\n});\n\nexport default connect(mapStateToProps, {})(BusyRooms);\n","import TeacherList from '../containers/TeachersList/TeachersList';\nimport GroupList from '../containers/GroupList/GroupList';\nimport RoomList from '../containers/RoomList/RoomList';\nimport SubjectPage from '../containers/SubjectPage/SubjectPage';\nimport SemesterPage from '../containers/SemesterPage/SemesterPage';\nimport MergeRolePage from '../containers/MergeRolePage/MergeRolePage';\nimport Changes from '../components/ChangePasswordForm/ChangePasswordForm';\nimport BusyRooms from '../containers/BusyRooms/BusyRooms';\nimport React from 'react';\nexport const navigation={\n    \"LESSONS\":0,\n    \"USERS\":1,\n    \"CHANGES\":2,\n    \"BUSY_ROOMS\":3,\n    \"PERIOD\":4,\n    \"DEPARTMENTS\":5,\n    \"GROUPS\":6,\n    \"ROOMS\":7,\n    \"SUBJECTS\":8,\n    \"SEMESTERS\":9,\n    \"TEACHERS\":10,\n}\nexport const navigationNames={\n    TEACHER_LIST:'TeacherList',\n    GROUP_LIST:'GroupList',\n    CLASS_SCHEDULE_TITLE:'ClassScheduleTitle',\n    ROOM_LIST:'RoomList',\n    SUBJECT_PAGE:'SubjectPage',\n    SEMESTER_PAGE:'SemesterPage',\n    DEPARTMENTS:'Departments',\n    LESSON_PAGE:'LessonPage',\n    MERGE_ROLE_PAGE:'MergeRolePage',\n    CHANGES:'Changes',\n    BUSY_ROOMS:'BusyRooms',\n    GENERAL:\"General\"\n}\n","import React, { useRef } from \"react\";\nimport ReactSelect from \"react-select\";\nimport { Dialog, DialogTitle } from '@material-ui/core';\nimport Button from '@material-ui/core/Button';\nimport Select from 'react-select';\nimport i18n from 'i18next';\nimport '../helper/multiselect.scss'\nimport { useTranslation } from 'react-i18next';\nexport const MultiSelect = props => {\n    const { t } = useTranslation('common');\n    const valueRef = useRef(props.value);\n    valueRef.current = props.value;\n    const {open,defaultSemester,semesters}=props;\n\n    const selectAllOption = {\n        value: \"<SELECT_ALL>\",\n        label: t('all_teachers')\n    };\n\n    const isSelectAllSelected = () =>\n        valueRef.current.length === props.options.length;\n\n    const isOptionSelected = option =>\n        valueRef.current.some(({ value }) => value === option.value) ||\n        isSelectAllSelected();\n\n    const getOptions = () => [selectAllOption, ...props.options];\n\n    const getValue = () =>\n        isSelectAllSelected() ? [selectAllOption] : props.value;\n\n    const onChange = (newValue, actionMeta) => {\n        const { action, option, removedValue } = actionMeta;\n\n        if (action === \"select-option\" && option.value === selectAllOption.value) {\n            props.onChange(props.options, actionMeta);\n        }\n        else if (\n            (action === \"deselect-option\" &&\n                option.value === selectAllOption.value) ||\n            (action === \"remove-value\" &&\n                removedValue.value === selectAllOption.value)\n        ) {\n            props.onChange([], actionMeta);\n        } else if (\n            actionMeta.action === \"deselect-option\" &&\n            isSelectAllSelected()\n        ) {\n            props.onChange(\n                props.options.filter(({ value }) => value !== option.value),\n                actionMeta\n            );\n        } else {\n            props.onChange(newValue || [], actionMeta);\n        }\n    };\n   const handleChange = (newValue, actionMeta) => {\n        props.onChangeSemesterValue(newValue);\n    };\n\n    return (\n\n        <Dialog id=\"select-dialog\"\n\n                disableBackdropClick={true}\n                aria-labelledby=\"confirm-dialog-title\"\n                open={open}\n        >\n            <DialogTitle id=\"select-dialog-title\" className=\"confirm-dialog\">\n                <div className=\"teacher-semester\">\n                    <span>{`${t('schedule_for_semester')}:`}</span>\n                    <Select\n                        defaultValue={defaultSemester}\n                        options={semesters}\n                        onChange={handleChange}\n                    />\n\n\n        <ReactSelect\n            classname={\"teacher\"}\n            isOptionSelected={isOptionSelected}\n            options={getOptions()}\n            value={getValue()}\n            onChange={onChange}\n            hideSelectedOptions={false}\n            closeMenuOnSelect={false}\n            isMulti\n            placeholder={t('choose_teachers')}\n        />\n                </div>\n\n\n            </DialogTitle>\n            <div className=\"buttons-container\">\n                <Button\n                    className=\"dialog-button\"\n                    variant=\"contained\"\n                    color=\"primary\"\n                    onClick={props.onCancel}\n                >\n                    {t('cancel_schedule')}\n                </Button>\n                <Button\n                    className=\"dialog-button\"\n                    variant=\"contained\"\n                    color=\"primary\"\n                    onClick={props.onSentTeachers}\n                    disabled={!props.isEnabledSentBtn}\n                >\n                    {t('sent_schedule')}\n                </Button>\n            </div>\n        </Dialog>\n    );\n};\n","import React, { useEffect, useState } from 'react';\n\nimport AddTeacherForm from '../../components/AddTeacherForm/AddTeacherForm';\nimport Card from '../../share/Card/Card';\n\nimport ConfirmDialog from '../../share/modals/dialog';\nimport { cardType } from '../../constants/cardType';\n\nimport { FaEdit } from 'react-icons/fa';\nimport { MdDelete } from 'react-icons/md';\nimport Button from '@material-ui/core/Button';\n\nimport './TeachersList.scss';\n\nimport { connect } from 'react-redux';\nimport {\n    getCurrentSemesterService,\n    getDefaultSemesterService,\n    sendTeachersScheduleService, showAllPublicSemestersService\n} from '../../services/scheduleService';\nimport {\n    getDisabledTeachersService,\n    handleTeacherService,\n    removeTeacherCardService,\n    selectTeacherCardService,\n    setDisabledTeachersService,\n    setEnabledTeachersService,\n    showAllTeachersService\n} from '../../services/teacherService';\n\nimport { useTranslation } from 'react-i18next';\nimport { search } from '../../helper/search';\nimport SearchPanel from '../../share/SearchPanel/SearchPanel';\nimport NotFound from '../../share/NotFound/NotFound';\nimport { GiSightDisabled, IoMdEye } from 'react-icons/all';\nimport { disabledCard } from '../../constants/disabledCard';\nimport { getPublicClassScheduleListService } from '../../services/classService';\nimport NavigationPage from '../../components/Navigation/NavigationPage';\nimport { navigation, navigationNames } from '../../constants/navigation';\nimport Multiselect, { MultiSelect } from '../../helper/multiselect';\nimport Example from '../../helper/multiselect';\nimport { getFirstLetter, getTeacherFullName } from '../../helper/renderTeacher';\nimport { showAllSemestersService } from '../../services/semesterService';\nimport { clearDepartment, getAllDepartmentsService, getDepartmentByIdService } from '../../services/departmentService';\nimport { clearDepartmentForm, getDepartItemById } from '../../redux/actions/departments';\nimport { getShortTitle } from '../../helper/shortTitle';\nimport i18n from 'i18next';\n\nconst TeacherList = props => {\n    const { t } = useTranslation('common');\n\n    const [open, setOpen] = useState(false);\n    const [teacherCardId, setTeacherId] = useState();\n    const [term, setTerm] = useState('');\n    const [disabled, setDisabled] = useState(false);\n    const [hideDialog, setHideDialog] = useState(null);\n    const [openSelect, setOpenSelect] = useState(false);\n\n\n    useEffect(() => showAllTeachersService(), []);\n    useEffect(() => getDisabledTeachersService(), []);\n    useEffect(() => getPublicClassScheduleListService(), []);\n    useEffect(() => getDefaultSemesterService(), []);\n    useEffect(() => getCurrentSemesterService(), []);\n    useEffect(() => showAllPublicSemestersService(), []);\n    useEffect(() => showAllSemestersService(), []);\n    useEffect(() => getAllDepartmentsService(), []);\n    const { teachers, disabledTeachers, currentSemester, semesters, defaultSemester, departments, department } = props;\n\n    const setOptions = () => {\n        return teachers.map(item => {\n            return {\n                id: item.id,\n                value: item.id,\n                label: `${item.surname} ${getFirstLetter(item.name)} ${getFirstLetter(item.patronymic)}`\n            };\n        });\n    };\n    const setSemesterOptions = () => {\n        return semesters !== undefined ? semesters.map(item => {\n            return { id: item.id, value: item.id, label: `${item.description}` };\n        }) : null;\n\n    };\n    const parseDefaultSemester = () => {\n        return { id: defaultSemester.id, value: defaultSemester.id, label: `${defaultSemester.description}` };\n    };\n    const setDepartmentOptions = () => {\n        return departments.map(item => {\n            return { id: item.id, value: item.id, label: `${item.name}` };\n        });\n    };\n\n    const teacherLength = disabled ? disabledTeachers.length : teachers.length;\n    const [selected, setSelected] = useState([]);\n    const [selectedSemester, setSelectedSemester] = useState('');\n    const options = setOptions();\n    const semesterOptions = setSemesterOptions();\n    const departmentOptions = setDepartmentOptions();\n    const teacherSubmit = values => {\n\n        const sendData = { ...values, department: department };\n\n        handleTeacherService(sendData);\n        clearDepartment();\n\n    };\n\n    const selectTeacherCard = teacherCardId => {\n        selectTeacherCardService(teacherCardId);\n    };\n\n    const removeTeacherCard = id => {\n        removeTeacherCardService(id);\n    };\n\n    const handleClickOpen = teacherCardId => {\n        setTeacherId(teacherCardId);\n        setOpen(true);\n    };\n\n    const handleClose = teacherCardId => {\n        setOpen(false);\n        if (!teacherCardId) {\n            return;\n        }\n        if (hideDialog) {\n            if (disabled) {\n                const teacher = disabledTeachers.find(\n                    teacher => teacher.id === teacherCardId\n                );\n                setEnabledTeachersService(teacher);\n            } else {\n                const teacher = teachers.find(\n                    teacher => teacher.id === teacherCardId\n                );\n                setDisabledTeachersService(teacher);\n            }\n        } else {\n            removeTeacherCard(teacherCardId);\n        }\n        setHideDialog(null);\n    };\n    const handleCloseSending = scheduleId => {\n        setOpenSelect(false);\n    };\n    const [teacher, setTeacher] = useState(0);\n\n\n    const visibleItems = disabled\n        ? search(disabledTeachers, term, ['name', 'surname', 'patronymic'])\n        : search(teachers, term, ['name', 'surname', 'patronymic']);\n\n    const SearchChange = term => {\n        setTerm(term);\n    };\n\n    const showDisabledHandle = () => {\n        setDisabled(!disabled);\n    };\n\n    const handleToUpperCase = str => {\n        return str.charAt(0).toUpperCase() + str.slice(1);\n    };\n    const cancelSelection = () => {\n        clearSelection();\n        closeSelectionDialog();\n    };\n    const sendTeachers = () => {\n        closeSelectionDialog();\n        const teachersId = selected.map(item => {\n            return item.id;\n        });\n        const semesterId = selectedSemester === '' ? defaultSemester.id : selectedSemester.id;\n        const { language } = i18n;\n        const data = { semesterId, teachersId, language };\n        sendTeachersScheduleService(data);\n        clearSelection();\n    };\n    const closeSelectionDialog = () => {\n        setOpenSelect(false);\n    };\n    const clearSelection = () => {\n        setSelected([]);\n    };\n    const isChosenSelection = () => {\n        return selected.length !== 0;\n    };\n    const getTeacherTitle = (title) => {\n        const MAX_LENGTH = 30;\n        return getShortTitle(title, MAX_LENGTH);\n    };\n    return (\n        <>\n            <NavigationPage name={navigationNames.TEACHER_LIST} val={navigation.TEACHERS} />\n            <div className='cards-container'>\n\n                <ConfirmDialog\n                    cardId={teacherCardId}\n                    whatDelete={cardType.TEACHER}\n                    open={open}\n                    isHide={hideDialog}\n                    onClose={handleClose}\n                />\n\n\n                <aside className='form-with-search-panel'>\n\n                    <SearchPanel\n                        SearchChange={SearchChange}\n                        showDisabled={showDisabledHandle}\n                    />\n                    <Button\n                        className='send-button'\n                        variant='contained'\n                        color='primary'\n                        onClick={() => {\n                            setOpenSelect(true);\n                        }}\n                    >\n                        {t('send_schedule_for_teacher')}\n                    </Button>\n                    <>\n                        <MultiSelect open={openSelect}\n                                     options={options}\n                                     value={selected}\n                                     onChange={setSelected}\n                                     onCancel={cancelSelection}\n                                     onSentTeachers={sendTeachers}\n                                     isEnabledSentBtn={isChosenSelection()}\n                                     semesters={semesterOptions}\n                                     defaultSemester={parseDefaultSemester()}\n                                     onChangeSemesterValue={setSelectedSemester}\n\n                        />\n                    </>\n\n                    {disabled ? (\n                        ''\n                    ) : (\n                        <AddTeacherForm\n                            departments={departmentOptions}\n                            teachers={teachers}\n                            onSubmit={teacherSubmit}\n                            onSetSelectedCard={selectTeacherCard}\n                        />\n                    )}\n                </aside>\n\n                <section className='container-flex-wrap'>\n                    {visibleItems.length === 0 && (\n                        <NotFound name={t('formElements:teacher_a_label')} />\n                    )}\n                    {teacherLength > 0 ? (\n                        visibleItems.map((teacher, index) => (\n                            <Card\n                                key={index}\n                                {...teacher}\n                                class='teacher-card done-card'\n                            >\n                                <div className='cards-btns'>\n                                    {!disabled ? (\n                                        <>\n                                            <GiSightDisabled\n                                                className='svg-btn copy-btn'\n                                                title={t('common:set_disabled')}\n                                                onClick={() => {\n                                                    setHideDialog(\n                                                        disabledCard.HIDE\n                                                    );\n                                                    handleClickOpen(teacher.id);\n                                                }}\n                                            />\n                                            <FaEdit\n                                                className='svg-btn edit-btn'\n                                                title={t('common:edit_hover_title')}\n                                                onClick={() =>\n                                                    selectTeacherCard(teacher.id)\n                                                }\n                                            />\n                                        </>\n                                    ) : (\n                                        <IoMdEye\n                                            className='svg-btn copy-btn'\n                                            title={t('common:set_enabled')}\n                                            onClick={() => {\n                                                setHideDialog(disabledCard.SHOW);\n                                                handleClickOpen(teacher.id);\n                                            }}\n                                        />\n                                    )}\n                                    <MdDelete\n                                        className='svg-btn delete-btn'\n                                        title={t('common:delete_hover_title')}\n                                        onClick={() => handleClickOpen(teacher.id)}\n                                    />\n                                </div>\n                                <h2 className='teacher-card-name'>\n                                    {getTeacherTitle(getTeacherFullName(teacher))}\n                                </h2>\n                                <p className='teacher-card-title'>\n                                    {`${ teacher.position } ${teacher.department!==null? t('teacher_department') + \" \" + teacher.department.name:\"\"}`}\n                                </p>\n\n                            </Card>\n                        ))\n                    ) : (\n                        <h2>{t('teacher_card_no_cards')}</h2>\n                    )}\n                </section>\n            </div>\n        </>\n    );\n};\nconst mapStateToProps = state => ({\n    teachers: state.teachers.teachers,\n    disabledTeachers: state.teachers.disabledTeachers,\n    classScheduler: state.classActions.classScheduler,\n    currentSemester: state.schedule.currentSemester,\n    defaultSemester: state.schedule.defaultSemester,\n    semesters: state.schedule.semesters,\n    departments: state.departments.departments,\n    department: state.departments.department\n});\n\nexport default connect(mapStateToProps, {})(TeacherList);\n","\nimport { getTeacherForSite } from './renderTeacher';\n\nexport const setValueToTeacherForSiteHandler = (teachers, id, setValue) => {\n    const teacher = teachers.find(teacher => teacher.id === +id);\n    if (!teacher) setValue('teacherForSite', '');\n    else setValue('teacherForSite', getTeacherForSite(teacher));\n};\n\nexport const setValueToSubjectForSiteHandler = (subjects, subjectId, setValue) => {\n    const subject = subjects.find(subject => subject.id === +subjectId);\n    if (!subject) return setValue('subjectForSite', '');\n    else setValue('subjectForSite', subject.name);\n};\n","import Multiselect from 'multiselect-react-dropdown';\nimport React, { useEffect } from 'react';\n\nexport let RenderMultiselect = ({\n                                    input, options, hidePlaceholder, placeholder,\n                                    displayValue, selectedValues, alwaysDisplayedItem,\n                                    meta: { touched, invalid, error }\n                                }) => {\n\n    useEffect(() => {\n        input.onChange([alwaysDisplayedItem]);\n    }, [alwaysDisplayedItem.id]);\n    return (<>\n\n        <Multiselect {...input}\n                     onBlur={() => input.onBlur()}\n                     onSelect={(e) => input.onChange([...e])}\n                     onRemove={(e) => input.onChange([...e])}\n                     options={options}\n                     displayValue={displayValue}\n                     placeholder={placeholder}\n                     hidePlaceholder={hidePlaceholder}\n                     selectedValues={selectedValues}\n                     preSelectedValues={selectedValues}\n                     disablePreSelectedValues={true}\n\n        />\n\n    </>);\n};","import React, { useEffect, useState } from 'react';\n\nimport Card from '../../share/Card/Card';\n\nimport { Field, reduxForm } from 'redux-form';\nimport { connect } from 'react-redux';\n\nimport renderTextField from '../../share/renderedFields/input';\nimport renderSelectField from '../../share/renderedFields/select';\nimport renderCheckboxField from '../../share/renderedFields/checkbox';\nimport Button from '@material-ui/core/Button';\nimport { makeStyles } from '@material-ui/core/styles';\n\nimport { LESSON_FORM } from '../../constants/reduxForms';\nimport './LessonForm.scss';\nimport {\n    lessThanZero,\n    maxLengthValue,\n    required\n} from '../../validation/validateFields';\nimport { useTranslation } from 'react-i18next';\nimport { getLessonsByGroupService, setUniqueErrorService } from '../../services/lessonService';\nimport { handleTeacherInfo } from '../../helper/renderTeacher';\nimport {\n    setValueToSubjectForSiteHandler\n} from '../../helper/reduxFormHelper';\nimport { getClearOrCancelTitle, setDisableButton } from '../../helper/disableComponent';\nimport { clearGroupService, selectGroupService } from '../../services/groupService';\nimport { RenderMultiselect } from '../../share/renderedFields/renderMultiselect';\nimport { Accordion, AccordionDetails, AccordionSummary } from '@material-ui/core';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport Typography from '@material-ui/core/Typography';\n\nconst useStyles = makeStyles(() => ({\n    notSelected: {\n        '&': {\n            textAlign: 'center',\n            margin: 'auto'\n        }\n    }\n}));\n\nlet LessonForm = props => {\n    const { t } = useTranslation('formElements');\n\n    const { handleSubmit, pristine, reset, submitting, groups, group } = props;\n\n    const classes = useStyles();\n\n    const lesson = props.lesson;\n    const lessonId = lesson.id;\n\n    const isUniqueError = props.isUniqueError;\n\n    const teachers = props.teachers;\n\n    const subjects = props.subjects;\n\n    const groupId = props.groupId;\n\n    const [checked, setChecked] = React.useState(false);\n    const handleChange = event => setChecked(event.target.checked);\n    useEffect(() => {\n        selectGroupService(groupId);\n    }, groupId);\n    useEffect(() => {\n        setChecked(false);\n        if (lessonId) {\n            initializeFormHandler(lesson);\n        } else {\n            props.initialize();\n        }\n    }, [lessonId]);\n\n    const initializeFormHandler = lesson => {\n        props.initialize({\n            lessonCardId: lesson.id,\n            teacher: lesson.teacher.id,\n            subject: lesson.subject.id,\n            type: lesson.lessonType,\n            hours: lesson.hours,\n            linkToMeeting: lesson.linkToMeeting,\n            subjectForSite: lesson.subjectForSite,\n            grouped: lesson.grouped,\n            groups: [group]\n        });\n        setChecked(lesson.grouped);\n    };\n\n    return (\n        <Card class='form-card'>\n            {groupId ? (\n                <h2 className='form-title under-line'>\n                    {lessonId ? t('edit_title') : t('create_title')}\n                    {t('lesson_label')}\n                </h2>\n            ) : (\n                ''\n            )}\n            {groupId ? (\n                <form onSubmit={handleSubmit}>\n                    <Field\n                        id='teacher'\n                        name='teacher'\n                        className='form-field'\n                        component={renderSelectField}\n                        label={t('teacher_label')}\n                        {...(!isUniqueError\n                            ? { validate: [required] }\n                            : { error: isUniqueError })}\n                        onChange={() =>\n                            setUniqueErrorService(false)\n                        }\n                    >\n                        <option />\n                        {teachers.map(teacher => (\n                            <option key={teacher.id} value={teacher.id}>\n                                {handleTeacherInfo(teacher)}\n                            </option>\n                        ))}\n                    </Field>\n                    <Field\n                        id='subject'\n                        name='subject'\n                        className='form-field'\n                        component={renderSelectField}\n                        label={t('subject_label')}\n                        {...(!isUniqueError\n                            ? { validate: [required] }\n                            : { error: isUniqueError })}\n                        onChange={event => {\n                            setValueToSubjectForSiteHandler(\n                                subjects,\n                                event.target.value,\n                                props.change\n                            );\n                            setUniqueErrorService(false);\n                        }}\n                    >\n                        <option value={''} />\n                        {subjects.map(subject => (\n                            <option key={subject.id} value={subject.id}>\n                                {subject.name}\n                            </option>\n                        ))}\n                    </Field>\n                    <div className='form-fields-container'>\n                        <Field\n                            id='type'\n                            name='type'\n                            className='form-field'\n                            component={renderSelectField}\n                            label={t('type_label')}\n                            {...(!isUniqueError\n                                ? { validate: [required] }\n                                : { error: isUniqueError })}\n                            onChange={() => {\n                                setUniqueErrorService(false);\n                            }}\n                        >\n                            <option value={''} />\n                            {props.lessonTypes.map((lessonType, index) => (\n                                <option value={lessonType} key={index}>\n                                    {t(\n                                        `formElements:lesson_type_${lessonType.toLowerCase()}_label`\n                                    )}\n                                </option>\n                            ))}\n                        </Field>\n                        <Field\n                            id='hours'\n                            name='hours'\n                            className='form-field'\n                            type='number'\n                            component={renderTextField}\n                            label={t('hours_label')}\n                            validate={[required, lessThanZero]}\n                        />\n                        <Field\n                            id='grouped'\n                            name='grouped'\n                            className='form-field'\n                            label={t('formElements:grouped_label')}\n                            labelPlacement='end'\n                            defaultValue={checked}\n                            component={renderCheckboxField}\n                            checked={checked}\n                            onChange={handleChange}\n                            color='primary'\n                        />\n\n\n                    </div>\n                    <Field\n                        id='linkToMeeting'\n                        name='linkToMeeting'\n                        className='form-field'\n                        rowsMax='1'\n                        margin='normal'\n                        component={renderTextField}\n                        label={t('link_to_meeting_label')}\n                        validate={[maxLengthValue]}\n                        type='url'\n                        placeholder={'Input URL'}\n                    />\n                    <Field\n                        id='subjectForSite'\n                        name='subjectForSite'\n                        className='form-field'\n                        multiline\n                        rowsMax='1'\n                        margin='normal'\n                        component={renderTextField}\n                        label={t('subject_label') + t('for_site_label')}\n                        validate={[required, maxLengthValue]}\n                    />\n                    {!lessonId ?\n                        <Accordion>\n                            <AccordionSummary\n                                expandIcon={<ExpandMoreIcon />}\n                                aria-controls='panel1a-content'\n                                id='panel1a-header'\n                            >\n                                <Typography>{t('copy_for_button_label')}</Typography>\n                            </AccordionSummary>\n                            <AccordionDetails>\n                                <Typography>\n                                    <>\n                                        <p className='group-label'>\n                                            <label htmlFor={'groups'}>{t('copy_groups_label')}</label>\n                                        </p>\n                                        <Field\n                                            id='groups'\n                                            name='groups'\n                                            component={RenderMultiselect}\n                                            options={groups}\n                                            displayValue={'title'}\n                                            className='form-control mt-2'\n                                            placeholder={t('groups_label')}\n                                            hidePlaceholder={true}\n                                            selectedValues={[group]}\n                                            alwaysDisplayedItem={group}\n                                        />\n                                    </>\n                                </Typography>\n                            </AccordionDetails>\n                        </Accordion>\n                        : null}\n                    <div className='form-buttons-container'>\n                        <Button\n                            className='buttons-style'\n                            type='submit'\n                            variant='contained'\n                            color='primary'\n                            disabled={pristine || submitting}\n                            onClick={() => {\n                                setChecked(false);\n                            }}\n                        >\n                            {t('save_button_label')}\n                        </Button>\n                        <Button\n                            className='buttons-style'\n                            type='button'\n                            variant='contained'\n                            disabled={setDisableButton(pristine, submitting, lesson.id)}\n                            onClick={() => {\n                                reset();\n                                setUniqueErrorService(null);\n                                props.onSetSelectedCard(null);\n                            }}\n                        >\n                            {getClearOrCancelTitle(lesson.id, t)}\n                        </Button>\n                    </div>\n                </form>\n            ) : (\n                <div className={classes.notSelected}>\n                    <h2>{t('group_label') + ' ' + t('not_selected_label')}</h2>\n                </div>\n            )}\n        </Card>\n    );\n};\n\nconst mapStateToProps = state => (\n    {\n        lesson: state.lesson.lesson,\n        groups: state.groups.groups,\n        group: state.groups.group,\n        groupId: state.lesson.groupId\n    });\n\nLessonForm = reduxForm({\n    form: LESSON_FORM\n})(LessonForm);\n\nexport default connect(mapStateToProps)(LessonForm);\n","import React from 'react';\nimport MomentUtils from '@date-io/moment';\nimport * as moment from 'moment';\nimport { TimePicker, MuiPickersUtilsProvider } from '@material-ui/pickers';\n\nconst renderTimePicker = ({\n    label,\n    input: { value, ...inputProps },\n    meta: { touched, invalid, error },\n    ...custom\n}) => {\n    return (\n        <MuiPickersUtilsProvider utils={MomentUtils}>\n            <TimePicker\n                clearable\n                ampm={false}\n                value={value ? moment(value, 'HH:mm').toDate() : null}\n                error={touched && invalid}\n                helperText={touched && error ? touched && error : label}\n                format=\"HH:mm\"\n                {...inputProps}\n                {...custom}\n            />\n        </MuiPickersUtilsProvider>\n    );\n};\n\nexport default renderTimePicker;\n","import React, { useEffect } from 'react';\nimport { Field, reduxForm } from 'redux-form';\n\nimport Card from '../../share/Card/Card';\nimport { connect } from 'react-redux';\n\nimport '../LessonForm/LessonForm';\nimport './ClassForm.scss';\n\nimport renderTextField from '../../share/renderedFields/input';\nimport renderTimePicker from '../../share/renderedFields/time';\n\nimport Button from '@material-ui/core/Button';\nimport { makeStyles } from '@material-ui/core/styles';\n\nimport {\n    required,\n    greaterThanTime,\n    lessThanTime,\n    uniqueClassName,\n    timeIntersect\n} from '../../validation/validateFields';\n\nimport { CLASS_FORM } from '../../constants/reduxForms';\nimport * as moment from 'moment';\nimport { CLASS_DURATION } from '../../constants/common';\nimport { useTranslation } from 'react-i18next';\nimport { getClearOrCancelTitle, setDisableButton } from '../../helper/disableComponent';\n\nconst useStyles = makeStyles(theme => ({\n    rootInput: {\n        width: '20em'\n    }\n}));\n\nlet ClassFormFunc = props => {\n    const { t } = useTranslation('formElements');\n    const { handleSubmit, pristine, onReset, submitting,classScheduleOne } = props;\n    const classes = useStyles();\n\n    useEffect(() => {\n        let initialValues = {};\n        if (props.classScheduleOne) {\n            initialValues = props.classScheduleOne;\n        }\n        props.initialize(initialValues);\n    }, [props.classScheduleOne]);\n\n    const setEndTime = startTime =>\n        props.change(\n            'endTime',\n            moment(startTime, 'HH:mm').add(CLASS_DURATION, 'h').format('HH:mm')\n        );\n\n    return (\n        <Card class=\"form-card\">\n            <h2 className=\"form-title\">\n                {props.classScheduleOne.id\n                    ? t('edit_title')\n                    : t('create_title')}{' '}\n                {t('class_y_label')}\n            </h2>\n            <form onSubmit={handleSubmit}>\n                <Field\n                    component={renderTextField}\n                    className=\"form-field\"\n                    name=\"class_name\"\n                    id=\"class_name\"\n                    label={t('class_label')}\n                    type=\"text\"\n                    validate={[required, uniqueClassName]}\n                />\n                <div className=\"form-time-block\">\n                    <Field\n                        component={renderTimePicker}\n                        className=\"time-input\"\n                        name=\"startTime\"\n                        label={t('class_from_label')}\n                        type=\"time\"\n                        validate={[required, lessThanTime, timeIntersect]}\n                        onChange={(event, value) => {\n                            if (value) {\n                                setEndTime(value);\n                            }\n                        }}\n                    />\n                    <Field\n                        component={renderTimePicker}\n                        className=\"time-input\"\n                        name=\"endTime\"\n                        label={t('class_to_label')}\n                        type=\"time\"\n                        validate={[required, greaterThanTime, timeIntersect]}\n                    />\n                </div>\n\n                <div className=\"form-buttons-container\">\n                    <Button\n                        className=\"buttons-style\"\n                        type=\"submit\"\n                        variant=\"contained\"\n                        color=\"primary\"\n                        disabled={pristine || submitting}\n                    >\n                        {t('save_button_label')}\n                    </Button>\n                    <Button\n                        className=\"buttons-style\"\n                        type=\"button\"\n                        variant=\"contained\"\n                        disabled={setDisableButton(pristine,submitting,classScheduleOne.id)}\n                        onClick={onReset}\n                    >\n                        {getClearOrCancelTitle(classScheduleOne.id,t)}\n                    </Button>\n                </div>\n            </form>\n        </Card>\n    );\n};\n\nconst mapStateToProps = state => ({\n    classScheduleOne: state.classActions.classScheduleOne\n});\n\nexport default connect(mapStateToProps)(\n    reduxForm({\n        form: CLASS_FORM\n    })(ClassFormFunc)\n);\n","export const CLASS_DURATION = \"1.3333333333333333333333333333\";\n","import React, { useEffect, useState } from 'react';\nimport { connect } from 'react-redux';\n\nimport { FaEdit } from 'react-icons/fa';\nimport { MdDelete } from 'react-icons/md';\n\nimport ClassForm from '../../components/ClassForm/ClassForm';\nimport Card from '../../share/Card/Card';\nimport ConfirmDialog from '../../share/modals/dialog';\nimport { cardType } from '../../constants/cardType';\n\nimport {\n    getClassScheduleListService,\n    addClassScheduleOneService,\n    getClassScheduleOneService,\n    deleteClassScheduleOneService,\n    clearClassScheduleOneService\n} from '../../services/classService';\nimport { useTranslation } from 'react-i18next';\n\nimport { handleSnackbarOpenService } from '../../services/snackbarService';\nimport { snackbarTypes } from '../../constants/snackbarTypes';\nimport NavigationPage from '../../components/Navigation/NavigationPage';\nimport { navigation, navigationNames } from '../../constants/navigation';\n\nconst ClassSchedule =(props) => {\n    const { t } = useTranslation('formElements');\n    const [open, setOpen] = useState(false);\n    const [classId, setClassId] = React.useState(-1);\n    useEffect(() => getClassScheduleListService(), []);\n\n    const submit = values => {\n        if (!values.id && props.classScheduler.length >= 7)\n            return handleSnackbarOpenService(\n                true,\n                snackbarTypes.ERROR,\n                t('max_count_classes_reached')\n            );\n        addClassScheduleOneService(values);\n    };\n\n    const handleEdit = classId => {\n        getClassScheduleOneService(classId);\n    };\n\n    const handleFormReset = () => {\n        clearClassScheduleOneService();\n    };\n\n    const handleClickOpen = classId => {\n        setClassId(classId);\n        setOpen(true);\n    };\n\n    const handleClose = classId => {\n        setOpen(false);\n        if (!classId) {\n            return;\n        }\n        deleteClassScheduleOneService(classId);\n    };\n\n    return (\n        <>\n            <NavigationPage name={navigationNames.CLASS_SCHEDULE_TITLE} val={navigation.PERIOD}/>\n        <div className=\"cards-container\">\n            <ConfirmDialog\n                selectedValue={''}\n                cardId={classId}\n                whatDelete={cardType.CLASS.toLowerCase()}\n                open={open}\n                onClose={handleClose}\n            />\n            <ClassForm onSubmit={submit} onReset={handleFormReset} />\n            <section className=\"container-flex-wrap\">\n                {props.classScheduler.map(schedule => (\n                    <Card class=\"class-card-width\" key={schedule.id}>\n                        <div className=\"cards-btns\">\n                            <FaEdit\n                                className=\"svg-btn\"\n                                title={t('common:edit_hover_title')}\n                                onClick={() => handleEdit(schedule.id)}\n                            />\n                            <MdDelete\n                                className=\"svg-btn\"\n                                title={t('common:delete_hover_title')}\n                                onClick={() => handleClickOpen(schedule.id)}\n                            />\n                        </div>\n                        <p>\n                            {t('class_label')}: {schedule.class_name}\n                        </p>\n                        <p>\n                            {t('class_from_label')} - {t('class_to_label')}\n                        </p>\n                        <p>\n                            {schedule.startTime} - {schedule.endTime}\n                        </p>\n                    </Card>\n                ))}\n            </section>\n        </div>\n        </>\n    );\n};\n\nconst mapStateToProps = state => ({\n    classScheduler: state.classActions.classScheduler,\n    ClassScheduleOne: state.classActions.classScheduleOne\n});\n\nexport default connect(mapStateToProps, {})(ClassSchedule);\n","import { connect } from 'react-redux'\nimport React, { useEffect } from 'react'\nimport { Field, reduxForm } from 'redux-form'\nimport Button from '@material-ui/core/Button'\nimport { useTranslation}  from 'react-i18next'\n\n\nimport Card from '../../share/Card/Card'\nimport { DEPARTMENT_FORM} from '../../constants/reduxForms';\nimport renderTextField from '../../share/renderedFields/input'\nimport { required, uniqueSubject, maxLengthValue, uniqueDepartment } from '../../validation/validateFields';\nimport { getClearOrCancelTitle, setDisableButton } from '../../helper/disableComponent';\n\nconst AddDepartment = props => {\n    const { t } = useTranslation('formElements');\n    const {handleSubmit,clear,department,pristine,submitting,editDepartment}=props;\n    useEffect(() => {\n        if (department&&editDepartment) {\n            if (department.id) {\n                props.initialize({\n                    name: department.name,\n                    id: department.id\n                });\n            } else {\n                props.initialize();\n            }\n        }\n    }, [department]);\n\n    return (\n        <Card class='form-card subject-form'>\n            <h2 style={{ textAlign: 'center' }}>\n                {department.id ? t('edit_title') : t('create_title')}\n                {t('department_y_label')}\n            </h2>\n            <form onSubmit={handleSubmit}>\n                <Field\n                    className='form-field'\n                    name='name'\n                    component={renderTextField}\n                    label={t('name')+':'}\n                    validate={[required, uniqueDepartment, maxLengthValue]}\n                />\n                <div className='form-buttons-container subject-btns'>\n                    <Button\n                        variant='contained'\n                        color='primary'\n                        className='buttons-style '\n                        disabled={pristine || submitting}\n                        type='submit'>\n                        {t('save_button_label')}\n                    </Button>\n                    <Button\n                        type='button'\n                        variant='contained'\n                        className='buttons-style'\n                        disabled={setDisableButton(pristine,submitting,department.id)}\n                        onClick={clear}\n                        >\n                        {getClearOrCancelTitle(department.id,t)}\n                    </Button>\n                </div>\n            </form>\n        </Card>\n    )\n}\n\nconst mapStateToProps = state => ({\n    department:state.departments.department\n})\n\nexport default connect(mapStateToProps)(\n    reduxForm({\n        form: DEPARTMENT_FORM\n    })(AddDepartment)\n)\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { makeStyles, useTheme } from '@material-ui/core/styles';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableFooter from '@material-ui/core/TableFooter';\nimport TablePagination from '@material-ui/core/TablePagination';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\nimport IconButton from '@material-ui/core/IconButton';\nimport FirstPageIcon from '@material-ui/icons/FirstPage';\nimport KeyboardArrowLeft from '@material-ui/icons/KeyboardArrowLeft';\nimport KeyboardArrowRight from '@material-ui/icons/KeyboardArrowRight';\nimport LastPageIcon from '@material-ui/icons/LastPage';\nimport { getTeacherFullName } from './renderTeacher';\nimport { useTranslation } from 'react-i18next';\nimport { FaEnvelope } from 'react-icons/fa';\nimport TableHead from '@material-ui/core/TableHead';\nimport { withStyles } from '@material-ui/core';\nconst useStyles1 = makeStyles((theme) => ({\n    root: {\n        flexShrink: 0,\n        marginLeft: theme.spacing(2.5),\n    },\n}));\n\nfunction RenderTeacherTableActions(props) {\n    const classes = useStyles1();\n    const theme = useTheme();\n    const { count, page, rowsPerPage, onPageChange } = props;\n\n    const handleFirstPageButtonClick = (event) => {\n        onPageChange(event, 0);\n    };\n\n    const handleBackButtonClick = (event) => {\n        onPageChange(event, page - 1);\n    };\n\n    const handleNextButtonClick = (event) => {\n        onPageChange(event, page + 1);\n    };\n\n    const handleLastPageButtonClick = (event) => {\n        onPageChange(event, Math.max(0, Math.ceil(count / rowsPerPage) - 1));\n    };\n\n    return (\n        <div className={classes.root}>\n            <IconButton\n                onClick={handleFirstPageButtonClick}\n                disabled={page === 0}\n                aria-label=\"first page\"\n            >\n                {theme.direction === 'rtl' ? <LastPageIcon /> : <FirstPageIcon />}\n            </IconButton>\n            <IconButton onClick={handleBackButtonClick} disabled={page === 0} aria-label=\"previous page\">\n                {theme.direction === 'rtl' ? <KeyboardArrowRight /> : <KeyboardArrowLeft />}\n            </IconButton>\n            <IconButton\n                onClick={handleNextButtonClick}\n                disabled={page >= Math.ceil(count / rowsPerPage) - 1}\n                aria-label=\"next page\"\n            >\n                {theme.direction === 'rtl' ? <KeyboardArrowLeft /> : <KeyboardArrowRight />}\n            </IconButton>\n            <IconButton\n                onClick={handleLastPageButtonClick}\n                disabled={page >= Math.ceil(count / rowsPerPage) - 1}\n                aria-label=\"last page\"\n            >\n                {theme.direction === 'rtl' ? <FirstPageIcon /> : <LastPageIcon />}\n            </IconButton>\n        </div>\n    );\n}\n\nRenderTeacherTableActions.propTypes = {\n    count: PropTypes.number.isRequired,\n    onPageChange: PropTypes.func.isRequired,\n    page: PropTypes.number.isRequired,\n    rowsPerPage: PropTypes.number.isRequired,\n};\n\n\nconst useStyles2 = makeStyles({\n    table: {\n        minWidth: 500,\n    },\n});\nconst StyledTableCell = withStyles((theme) => ({\n    head: {\n        backgroundColor: theme.palette.common.white,\n        color: theme.palette.common.black,\n    },\n    body: {\n        fontSize: 14,\n    },\n}))(TableCell);\n\n\nconst StyledTableRow = withStyles((theme) => ({\n    root: {\n        '&:nth-of-type(odd)': {\n            backgroundColor: theme.palette.action.hover,\n        },\n    },\n}))(TableRow);\n\nexport default function RenderTeacherTable(props) {\n    const classes = useStyles2();\n    const [page, setPage] = React.useState(0);\n    const [rowsPerPage, setRowsPerPage] = React.useState(5);\n    const {teachers}=props;\n    const { t } = useTranslation('formElements');\n\n    const emptyRows = rowsPerPage - Math.min(rowsPerPage, teachers.length - page * rowsPerPage);\n\n    const handleChangePage = (event, newPage) => {\n        setPage(newPage);\n    };\n\n    const handleChangeRowsPerPage = (event) => {\n        setRowsPerPage(parseInt(event.target.value, 10));\n        setPage(0);\n    };\n    const sendMail = (email) => {\n        const mailto =\n            // \"mailto:mail@gmail.com?subject=Test subject&body=Body content\";\n            `mailto:${email}`;\n        window.location.href = mailto;\n    }\n\n    return (\n        <TableContainer component={Paper}>\n            <Table className={classes.table} aria-label=\"custom pagination table\">\n\n                <TableHead>\n                    <TableRow>\n                        <StyledTableCell>{t('teacher_label')}</StyledTableCell>\n                        <StyledTableCell>{t('teacher_position')}</StyledTableCell>\n                        <StyledTableCell>{t('send_letter_title')}</StyledTableCell>\n                    </TableRow>\n                </TableHead>\n\n                <TableBody>\n                    {(rowsPerPage > 0\n                            ? teachers.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\n                            : teachers\n                    ).map((teacher) => (\n                        <StyledTableRow key={teacher.position}>\n                            <StyledTableCell align=\"center\" style={{ width: 160 }}>\n                                {getTeacherFullName(teacher)}\n                            </StyledTableCell>\n                            <StyledTableCell component=\"th\" scope=\"row\" align=\"center\">\n                                {teacher.position}\n                            </StyledTableCell>\n                            <StyledTableCell style={{ width: 160 }} align=\"center\">\n                                <span>\n                                    <p>{teacher.email}</p>\n                                    <FaEnvelope\n                                        className=\"svg-btn send-message\"\n                                        title={`${t('send_letter_title')} ${teacher.email}`}\n                                        onClick={()=>sendMail(teacher.email)}\n                                    />\n                                </span>\n\n                            </StyledTableCell>\n                        </StyledTableRow>\n                    ))}\n\n                    {emptyRows > 0 && (\n                        <StyledTableRow style={{ height: 53 * emptyRows }}>\n                            <TableCell colSpan={6} />\n                        </StyledTableRow>\n                    )}\n                </TableBody>\n                <TableFooter>\n                    <StyledTableRow>\n                        <TablePagination\n                            labelRowsPerPage={`${t('rows_per_page')}`}\n                            rowsPerPageOptions={[5, 10, 25, { label: `${t('all_page')}`, value: -1 }]}\n                            colSpan={3}\n                            count={teachers.length}\n                            rowsPerPage={rowsPerPage}\n                            page={page}\n                            SelectProps={{\n                                inputProps: { 'aria-label': 'rows per page' },\n                                native: true,\n                            }}\n                            onPageChange={handleChangePage}\n                            onRowsPerPageChange={handleChangeRowsPerPage}\n                            ActionsComponent={RenderTeacherTableActions}\n                        />\n                    </StyledTableRow>\n                </TableFooter>\n            </Table>\n        </TableContainer>\n    );\n}\n","import React from 'react';\n\nimport PropTypes from 'prop-types';\n\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport Dialog from '@material-ui/core/Dialog';\nimport Button from '@material-ui/core/Button';\n\nimport '../dialog.scss';\nimport './showDataDialog.scss'\n\nimport i18n from '../../../helper/i18n';\nimport { connect } from 'react-redux';\nimport { useTranslation } from 'react-i18next';\nimport RenderTeacherTable from '../../../helper/renderTeacherTable';\n\nexport const ShowDataDialog = props => {\n    const { onClose,  cardId, open,teachers,department } = props;\n    const { t } = useTranslation('formElements');\n    const handleClose = () => {\n        onClose(cardId);\n    };\n    return (\n        <Dialog\n            disableBackdropClick={true}\n            onClose={handleClose}\n            aria-labelledby=\"confirm-dialog-title\"\n            open={open}\n        >\n            <DialogTitle id=\"confirm-dialog-title\">\n                <>\n\n                    <>\n                        {teachers.length===0?\n                            <>\n                                <h2 className=\"title-align\">{`${t('department_teachers_label')} - `}<span>{`${department.name}`}</span></h2>\n                                {t('no_exist_teachers_at_department')}\n                            </>\n\n                            :\n                            <>\n                                <h3 className=\"title-align\"><span>{teachers.length!==1?`${t('teachers_label')} `:`${t('teacher_label')} `}</span>{`${t('department_teachers')} `}<span>{`${department.name}`}</span></h3>\n                                <RenderTeacherTable teachers={teachers}/>\n                            </>\n                        }\n                    </>\n                </>\n            </DialogTitle>\n            <div className=\"buttons-container\">\n                <Button\n                    className=\"dialog-button\"\n                    variant=\"contained\"\n                    onClick={() => onClose('')}\n                    color=\"primary\"\n                >\n                    {i18n.t('common:close_title')}\n                </Button>\n            </div>\n        </Dialog>\n    );\n};\n\nShowDataDialog.propTypes = {\n    onClose: PropTypes.func.isRequired,\n    open: PropTypes.bool.isRequired\n};\nconst mapStateToProps = state => ({\n    department: state.departments.department\n});\n\nexport default connect(mapStateToProps, {})(ShowDataDialog);","import React, { useEffect, useState } from 'react';\nimport AddDepartment from '../../components/AddDepartmentForm/AddDepartmentForm';\nimport {\n    clearDepartment,\n    createDepartmentService,\n    deleteDepartmentsService,\n    getAllDepartmentsService,\n    getDepartmentByIdService,\n    getDisabledDepartmentsService,\n    setDisabledDepartmentService, setEnabledDepartmentService,\n    updateDepartmentService\n} from '../../services/departmentService';\nimport { connect } from 'react-redux';\nimport Card from '../../share/Card/Card';\nimport { GiSightDisabled, IoMdEye, MdFace } from 'react-icons/all';\nimport { FaChalkboardTeacher, FaEdit } from 'react-icons/fa';\nimport { MdDelete } from 'react-icons/md';\nimport { useTranslation } from 'react-i18next';\nimport { setDisabledDepartment, setEnabledDepartment } from '../../redux/actions/departments';\nimport SearchPanel from '../../share/SearchPanel/SearchPanel';\nimport Button from '@material-ui/core/Button';\nimport { search } from '../../helper/search';\nimport NotFound from '../../share/NotFound/NotFound';\nimport ConfirmDialog from '../../share/modals/dialog';\nimport { disabledCard } from '../../constants/disabledCard';\nimport { navigation, navigationNames } from '../../constants/navigation';\nimport NavigationPage from '../../components/Navigation/NavigationPage';\nimport SnackbarComponent from '../../share/Snackbar/SnackbarComponent';\nimport { handleSnackbarCloseService } from '../../services/snackbarService';\nimport { getAllTeachersByDepartmentId } from '../../redux/actions/teachers';\nimport { showAllPublicTeachersByDepartmentService } from '../../services/scheduleService';\nimport ShowDataDialog from '../../share/modals/modal/showDataDialog';\n\nfunction DepartmentPage(props) {\n    const { t } = useTranslation('formElements');\n    const { departments, disabledDepartments } = props;\n    const [isDisabled, setIsDisabled] = useState(false);\n    const [term, setTerm] = useState('');\n    const [deleteDialog, setDeleteDialog] = useState(false);\n    const [departmentId, setDepartmentId] = useState('');\n    const [hideDialog, setHideDialog] = useState(null);\n    const [department, setDepartment] = useState({});\n    const [teacherDialog, setTeacherDialog] = useState(false);\n    const [editDepartment, setEditDepartment] = useState(false);\n    const { isSnackbarOpen, snackbarType, snackbarMessage, teachers } = props;\n    useEffect(() => clearDepartmentForm(), []);\n    const visibleDepartments = isDisabled\n        ? search(disabledDepartments, term, ['name'])\n        : search(departments, term, ['name']);\n    const SearchChange = setTerm;\n    const changeDisable = () => {\n        setIsDisabled(prev => !prev);\n    };\n    const submit = (data) => {\n        data.id === undefined ?\n            createDepartmentService(data) :\n            updateDepartmentService(data);\n    };\n    const clearDepartmentForm = () => {\n        clearDepartment();\n    };\n    const deleteDepartment = (id) => {\n        setDepartmentId(id);\n        setDeleteDialog(true);\n    };\n    const setDisabled = (department) => {\n\n        const disabledDepartment = { ...department, disabled: true };\n        setDisabledDepartmentService(disabledDepartment);\n    };\n    const setEnabled = (department) => {\n        setDepartmentId(department.id);\n        setDeleteDialog(true);\n        const enabledDepartment = { ...department, disabled: false };\n        setEnabledDepartment(enabledDepartment);\n    };\n    const setDepartmentIntoForm = (id) => {\n        getDepartmentByIdService(id);\n    };\n    const closeTeacherDialog = () => {\n        setTeacherDialog(false);\n    };\n    const handleClose = (id) => {\n        if (id !== '') {\n            if (department.id !== undefined) {\n                if (hideDialog === disabledCard.SHOW) {\n                    const { id, name } = department;\n                    const enabledDepartment = { id, name, disable: false };\n                    setEnabledDepartmentService(enabledDepartment);\n                } else if (hideDialog === disabledCard.HIDE) {\n\n                    const { id, name } = department;\n                    const enabledDepartment = { id, name, disable: true };\n                    setDisabledDepartmentService(enabledDepartment);\n                }\n\n            } else {\n                deleteDepartmentsService(departmentId);\n            }\n        }\n        setDeleteDialog(false);\n    };\n    useEffect(() => getAllDepartmentsService(), [isDisabled]);\n    useEffect(() => {\n        if (isDisabled)\n            getDisabledDepartmentsService();\n    }, []);\n    const handleSnackbarClose = (event, reason) => {\n        if (reason === 'clickaway') return;\n        handleSnackbarCloseService();\n    };\n    return (\n        <>\n            <NavigationPage name={navigationNames.DEPARTMENTS} val={navigation.DEPARTMENTS} />\n            <ConfirmDialog\n                isHide={hideDialog}\n                cardId={departmentId}\n                whatDelete={'department'}\n                open={deleteDialog}\n                onClose={handleClose}\n            />\n            <ShowDataDialog\n                isHide={hideDialog}\n                cardId={departmentId}\n                open={teacherDialog}\n                onClose={closeTeacherDialog}\n                teachers={teachers}\n            />\n            <div className='cards-container'>\n                <aside className='search-list__panel'>\n                    <SearchPanel\n                        SearchChange={SearchChange}\n                        showDisabled={changeDisable}\n                    />\n                    {\n                        isDisabled ? '' :\n                            <AddDepartment\n                                onSubmit={submit} clear={clearDepartmentForm} editDepartment={editDepartment}\n                            />\n                    }\n                </aside>\n                <section className='container-flex-wrap wrapper'>\n                    {visibleDepartments.length === 0 && (\n                        <NotFound name={t('department_y_label')} />\n                    )}\n                    {visibleDepartments.map(department => (\n                        <Card key={department.id} class='subject-card department-card'>\n                            <h2 className='subject-card__name'>\n                                {department.name}\n                            </h2>\n                            <div className='cards-btns'>\n                                {isDisabled ?\n                                    <IoMdEye\n                                        className='svg-btn copy-btn'\n                                        title={t('common:set_enabled')}\n                                        onClick={() => {\n                                            setHideDialog(disabledCard.SHOW);\n                                            deleteDepartment(department.id);\n                                            setDepartment(department);\n                                        }}\n                                    /> :\n\n                                    (\n                                        <>\n                                            <GiSightDisabled\n                                                className='svg-btn copy-btn'\n                                                title={t('common:set_disabled')}\n                                                onClick={() => {\n                                                    //setDisabled(department)\n                                                    setHideDialog(\n                                                        disabledCard.HIDE\n                                                    );\n                                                    deleteDepartment(department.id);\n                                                    setDepartment(department);\n                                                }}\n                                            />\n\n                                            <FaEdit\n                                                className='svg-btn edit-btn'\n                                                title={t('edit_title')}\n                                                onClick={() => {\n                                                    setEditDepartment(true);\n                                                    setDepartmentIntoForm(department.id);\n                                                }\n                                                }\n                                            />\n                                        </>\n\n                                    )\n                                }\n\n\n                                <MdDelete\n                                    className='svg-btn delete-btn'\n                                    title={t('delete_title')}\n                                    onClick={() => {\n                                        setDepartment({});\n                                        deleteDepartment(department.id);\n                                    }}\n                                />\n                                <FaChalkboardTeacher\n                                    className='svg-btn delete-btn'\n                                    title={t('show_teacher_title')}\n                                    onClick={() => {\n                                        showAllPublicTeachersByDepartmentService(department.id);\n                                        getDepartmentByIdService(department.id);\n                                        setDepartmentIntoForm(department.id);\n                                        setTeacherDialog(true);\n                                    }}\n                                />\n\n                            </div>\n                        </Card>\n                    ))}\n\n\n                </section>\n            </div>\n            <SnackbarComponent\n                message={snackbarMessage}\n                type={snackbarType}\n                isOpen={isSnackbarOpen}\n                handleSnackbarClose={handleSnackbarClose}\n            />\n        </>\n    );\n}\n\nconst mapStateToProps = state => ({\n    departments: state.departments.departments,\n    disabledDepartments: state.departments.disabledDepartments,\n    department: state.departments.department,\n    isSnackbarOpen: state.snackbar.isSnackbarOpen,\n    snackbarType: state.snackbar.snackbarType,\n    snackbarMessage: state.snackbar.message,\n    teachers: state.teachers.teachers\n\n});\n\nexport default connect(mapStateToProps, {})(DepartmentPage);","// import AdminPage from '../containers/AdminPage/AdminPage';\n// import TeacherList from '../containers/TeachersList/TeachersList';\n// import GroupList from '../containers/GroupList/GroupList';\n// import ClassSchedule from '../containers/ClassSchedule/ClassSchedule';\n// import RoomList from '../containers/RoomList/RoomList';\n// import SubjectPage from '../containers/SubjectPage/SubjectPage';\n// import BusyRooms from '../containers/BusyRooms/BusyRooms';\n// import React from 'react';\n// import SemesterPage from '../containers/SemesterPage/SemesterPage';\n// import MergeRolePage from '../containers/MergeRolePage/MergeRolePage';\n// import Changes from '../components/ChangePasswordForm/ChangePasswordForm';\n// import DepartmentPage from '../containers/DepartmentPage/DepartmentPage';\n// export const general=[\n//     { name: 'SemesterPage', component: <SemesterPage /> },\n//     { name: 'MergeRolePage', component: <MergeRolePage /> },\n//     { name: 'Changes', component: <Changes /> },\n//     { name: 'Departments', component: <DepartmentPage /> }];\n// export const tabs_components = [\n//     { name: 'LessonPage', component: <AdminPage /> },\n//     { name: 'TeacherList', component: <TeacherList /> },\n//     { name: 'GroupList', component: <GroupList /> },\n//     { name: 'ClassScheduleTitle', component: <ClassSchedule /> },\n//     { name: 'RoomList', component: <RoomList /> },\n//     { name: 'SubjectPage', component: <SubjectPage /> },\n//     { name: 'BusyRooms', component: <BusyRooms /> },\n//     // { name: 'SemesterPage', component: <SemesterPage /> },\n//     // { name: 'MergeRolePage', component: <MergeRolePage /> },\n//     // { name: 'Changes', component: <Changes /> },\n//     // { name: 'Departments', component: <DepartmentPage /> },\n//     general,\n// ];\nimport AdminPage from '../containers/AdminPage/AdminPage';\nimport TeacherList from '../containers/TeachersList/TeachersList';\nimport GroupList from '../containers/GroupList/GroupList';\nimport ClassSchedule from '../containers/ClassSchedule/ClassSchedule';\nimport RoomList from '../containers/RoomList/RoomList';\nimport SubjectPage from '../containers/SubjectPage/SubjectPage';\nimport BusyRooms from '../containers/BusyRooms/BusyRooms';\nimport React from 'react';\nimport SemesterPage from '../containers/SemesterPage/SemesterPage';\nimport MergeRolePage from '../containers/MergeRolePage/MergeRolePage';\nimport Changes from '../components/ChangePasswordForm/ChangePasswordForm';\nimport DepartmentPage from '../containers/DepartmentPage/DepartmentPage';\nimport { navigationNames } from './navigation';\nexport const general=[\n     {name: navigationNames.GENERAL},\n    { name: navigationNames.CLASS_SCHEDULE_TITLE, component: <ClassSchedule /> },\n    { name: navigationNames.DEPARTMENTS, component: <DepartmentPage /> },\n    { name: navigationNames.GROUP_LIST, component: <GroupList /> },\n    { name: navigationNames.ROOM_LIST, component: <RoomList /> },\n    { name: navigationNames.SUBJECT_PAGE, component: <SubjectPage /> },\n    { name: navigationNames.SEMESTER_PAGE, component: <SemesterPage /> },\n    { name: navigationNames.TEACHER_LIST, component: <TeacherList /> },\n\n];\nexport const tabs_components = [\n    { name: navigationNames.LESSON_PAGE, component: <AdminPage /> },\n    { name: navigationNames.MERGE_ROLE_PAGE, component: <MergeRolePage /> },\n    { name: navigationNames.CHANGES, component: <Changes /> },\n    { name: navigationNames.BUSY_ROOMS, component: <BusyRooms /> },\n    general,\n];\n\n","import React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { makeStyles } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Tabs from '@material-ui/core/Tabs';\nimport Tab from '@material-ui/core/Tab';\nimport Typography from '@material-ui/core/Typography';\nimport Box from '@material-ui/core/Box';\nimport { connect } from 'react-redux';\nimport { useTranslation } from 'react-i18next';\nimport { setCurrentSemester } from '../../redux/actions';\nimport { Link } from 'react-router-dom';\nimport { links } from '../../constants/links';\nimport './NavigationPage.scss';\nimport { MenuItem, Select } from '@material-ui/core';\nimport { general, tabs_components } from '../../constants/navigationComponents';\n\nfunction TabPanel(props) {\n    const { children, value, index, ...other } = props;\n\n\n    return (\n        <Typography\n            component='div'\n            role='tabpanel'\n            hidden={value !== index}\n            id={`simple-tabpanel-${index}`}\n            aria-labelledby={`simple-tab-${index}`}\n            {...other}\n        >\n            {value === index && <Box p={3}>{children}</Box>}\n        </Typography>\n    );\n}\n\nTabPanel.propTypes = {\n    children: PropTypes.node,\n    index: PropTypes.any.isRequired,\n    value: PropTypes.any.isRequired\n};\n\nfunction a11yProps(index) {\n    return {\n        id: `simple-tab-${index}`,\n        'aria-controls': `simple-tabpanel-${index}`\n    };\n}\n\nconst useStyles = makeStyles(theme => ({\n    root: {\n        flexGrow: 1,\n        backgroundColor: theme.palette.background.paper\n    },\n    header: {\n        backgroundColor: theme.palette.info.dark\n    },\n    nav: {\n        textDecoration: 'none',\n        color: '#fff',\n        ':hover': {\n            color: 'purple'\n        }\n    },\n    select: {\n        backgroundColor: 'primary'\n    },\n\n    btn: {\n        margin: 0,\n        width: '10px'\n    }\n}));\n\nconst NavigationPage = (props) => {\n    const { val } = props;\n    const { t } = useTranslation('common');\n    const classes = useStyles();\n    const [value, setValue] = useState(val ? val : 0);\n    const [gen, setGen] = useState(props.name || general[0].name);\n    useEffect(() => {\n        setCurrentSemester();\n    }, []);\n\n    const handleChange = (event, newValue) => {\n        setValue(newValue);\n    };\n\n    let document_title = title => {\n        document.title = t(`${title}_management_title`);\n    };\n    return (\n        <div className={classes.root}>\n            <AppBar position='static'>\n                <Tabs\n                    value={value}\n                    onChange={handleChange}\n                    aria-label='simple tabs example'\n                    indicatorColor='primary'\n                    variant='scrollable'\n                    scrollButtons='on'\n                    className={classes.header}\n                >\n                    {tabs_components.map((tab_one, index) => (\n\n                        <>\n                            {tab_one.length === undefined ?\n                                <Link className={classes.nav}\n\n                                      to={links[tab_one.name]}>\n                                    <Tab className={classes.btn}\n                                         key={index + tab_one}\n                                         onClick={() => document_title(tab_one.name)}\n                                         label={t(`${tab_one.name}_management_title`)}\n                                         {...a11yProps(index)}\n                                    />\n                                </Link> :\n                                <Select className='general MuiTab-root'\n                                        labelId='demo-controlled-open-select-label'\n                                        id='demo-controlled-open-select'\n                                        value={gen}\n                                        onChange={event => {\n                                            const val = event.target.value;\n                                            setGen(val);\n                                            document_title(val);\n                                        }}\n                                >\n\n                                    {\n                                        Object.entries(tab_one).map(function(data, index) {\n                                            return (\n                                                <MenuItem className={'menu-dictionary MuiTab-root'} value={data[1].name}\n                                                          key={data[0]} {...a11yProps(index)}>\n                                                    <Link className={classes.nav}\n\n                                                          to={links[data[1].name]}>\n                                                        {t(`${data[1].name}_management_title`)}\n                                                    </Link>\n                                                </MenuItem>);\n                                        }, this)\n                                    }\n\n                                </Select>\n\n                            }\n                        </>\n                    ))}\n                </Tabs>\n\n            </AppBar>\n\n        </div>\n    );\n};\n\nconst mapStateToProps = state => ({\n    classScheduler: state.classActions.classScheduler,\n    ClassScheduleOne: state.classActions.classScheduleOne\n});\n\nexport default connect(mapStateToProps, {})(NavigationPage);\n","import React, { useState } from 'react';\n\nimport PropTypes from 'prop-types';\n\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport Dialog from '@material-ui/core/Dialog';\nimport Button from '@material-ui/core/Button';\n\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport TextField from '@material-ui/core/TextField';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles(() => ({\n    groupField: {\n        '&': {\n            margin: '0 auto',\n            width: '90%'\n        }\n    }\n}));\n\nexport const CopyLessonDialog = props => {\n    const { onClose, lesson, translation, groups, groupId, open } = props;\n    const [group, setGroup] = useState('');\n    const [error, setError] = useState('');\n\n    const classes = useStyles();\n\n    const handleClose = () => {\n        onClose();\n    };\n\n    const chooseClickHandle = () => {\n        if (!group) {\n            return;\n        }\n        if (group.id === groupId) {\n            setError(translation('copy_to_same_group_error'));\n            return;\n        }\n        onClose({ lesson, group });\n    };\n\n    const defaultProps = {\n        options: groups,\n        getOptionLabel: option => (option ? option.title : '')\n    };\n\n    return (\n        <Dialog\n            disableBackdropClick={true}\n            onClose={handleClose}\n            aria-labelledby=\"confirm-dialog-title\"\n            open={open}\n        >\n            <DialogTitle id=\"simple-dialog-title\">\n                {translation('choose_group')}\n            </DialogTitle>\n            <Autocomplete\n                {...defaultProps}\n                id=\"group\"\n                multiple\n                clearOnEscape\n                openOnFocus\n                className={classes.groupField}\n                onChange={(event, newValue) => {\n                    setGroup(newValue);\n                    setError(null);\n                }}\n                renderInput={params => (\n                    <TextField\n                        {...params}\n                        label={translation('common:choose_group')}\n                        error={!!error}\n                        helperText={error ? error : null}\n                        margin=\"normal\"\n                    />\n                )}\n            />\n            <div className=\"buttons-container\">\n                <Button\n                    className=\"dialog-button\"\n                    variant=\"contained\"\n                    color=\"primary\"\n                    onClick={() => chooseClickHandle()}\n                >\n                    {translation('formElements:choose_button_title')}\n                </Button>\n                <Button\n                    className=\"dialog-button\"\n                    variant=\"contained\"\n                    onClick={() => onClose()}\n                >\n                    {translation('formElements:cancel_button_title')}\n                </Button>\n            </div>\n        </Dialog>\n    );\n};\n\nCopyLessonDialog.propTypes = {\n    onClose: PropTypes.func.isRequired,\n    open: PropTypes.bool.isRequired\n};\n\nexport default CopyLessonDialog;\n","import React from 'react';\n\nimport Card from '../../share/Card/Card';\n\nimport { FaEdit, FaUserPlus } from 'react-icons/fa';\nimport { MdDelete } from 'react-icons/md';\nimport { MdContentCopy } from 'react-icons/all';\nimport { getTeacherName } from '../../helper/renderTeacher';\nimport i18n from 'i18next';\nimport './LessonList.scss';\n\nconst LessonsList = props => {\n    const lessons = props.lessons;\n\n    const t = props.translation;\n\n    const firstStringLetterCapitalHandle = str => {\n        return str.replace(/^\\w/, c => c.toUpperCase());\n    };\n\n    const isGrouped = grouped =>\n        grouped ? (\n            <FaUserPlus\n                title={t('formElements:grouped_label')}\n                className='svg-btn copy-btn align-left info-btn'\n            />\n        ) : (\n            ''\n        );\n    const getUkWordHours = (number) => {\n        if (number === 1) {\n            return 'година';\n        }\n        if (number >= 2 && number <= 4) {\n            return 'години';\n        }\n        if ((number >= 5 && number <= 20) || number === 0) {\n            return 'годин';\n        }\n        return;\n    };\n    const getUkHour = (number) => {\n        if (number >= 20 && number <= 100) {\n            let toText = number.toString(); //convert to string\n            let lastChar = toText.slice(-1); //gets last character\n            let lastDigit = +(lastChar); //convert last character to number\n            return getUkWordHours(lastDigit);\n        } else if (number > 100) {\n            let toText = number.toString(); //convert to string\n            let lastChar = toText.slice(-2); //gets last character\n            let lastDigit = +(lastChar); //convert last character to number\n            return getUkWordHours(lastDigit);\n        } else {\n            return getUkWordHours(number);\n        }\n    };\n    const getEnHour = (number) => {\n        if (number === 1) {\n            return 'hour';\n        }\n        return 'hours';\n    };\n    const getHour = (number) => {\n        const language = (i18n.language).toUpperCase();\n        const en = 'EN';\n        const uk = 'UK';\n        if (language === en) {\n            return getEnHour(number);\n        } else if (language === uk) {\n            return getUkHour(number);\n        }\n        return;\n    };\n    const getLessonShortTitle = (title) => {\n        const MAX_LENGTH = 50;\n        return title.length > MAX_LENGTH ? `${title.slice(0, MAX_LENGTH)}...` : title;\n    };\n    const getTitle = (lesson) => {\n        return firstStringLetterCapitalHandle(\n                lesson.subjectForSite) +\n            ' ' +\n            t(`formElements:lesson_type_${lesson.lessonType.toLowerCase()}_label`);\n    };\n    return (\n        <div>\n            <section className='container-flex-wrap'>\n                {lessons.map(lesson => (\n                    <Card class='done-card' key={lesson.id}>\n\n                        <div className='cards-btns'>\n                            {isGrouped(lesson.grouped)}\n                            <MdContentCopy\n                                title={t('copy_lesson')}\n                                className='svg-btn copy-btn'\n                                onClick={() => props.onCopyLesson(lesson)}\n                            />\n                            <FaEdit\n                                title={t('edit_lesson')}\n                                className='svg-btn edit-btn'\n                                onClick={() => props.onSelectLesson(lesson.id)}\n                            />\n                            <MdDelete\n                                title={t('delete_lesson')}\n                                className='svg-btn delete-btn'\n                                onClick={() => props.onClickOpen(lesson.id)}\n                            />\n                        </div>\n                        <p style={{ height: '3em' }}>\n                            {getLessonShortTitle(getTitle(lesson))}\n\n                        </p>\n                        <p>{getTeacherName(lesson.teacher)}</p>\n                        <p>\n                            {' '}\n                            <b>{lesson.hours}</b>{' '}\n                            {getHour(lesson.hours)}\n                        </p>\n                        <p>\n                            <input value={lesson.linkToMeeting} disabled='disabled' />\n                        </p>\n                    </Card>\n                ))}\n            </section>\n        </div>\n    );\n};\n\nexport default LessonsList;\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { Field, reduxForm } from 'redux-form';\n\nimport { useTranslation } from 'react-i18next';\n\nimport Button from '@material-ui/core/Button';\nimport renderSelectField from '../../share/renderedFields/select';\n\nimport './CopyLessonsFromSemesterForm.scss';\nimport Card from '../../share/Card/Card';\n\nimport { COPY_LESSONS_FROM_SEMESTER_FORM } from '../../constants/reduxForms';\nimport { required } from '../../validation/validateFields';\nconst shortid = require('shortid');\n\nconst CopyLessonsFromSemesterForm = props => {\n    const { t } = useTranslation('common');\n    const { semesters, handleSubmit, pristine, submitting } = props;\n    const renderSemesterList = () => {\n        if (semesters) {\n            if (semesters.length > 1) {\n                return (\n                    <Field\n                        id=\"fromSemesterId\"\n                        name=\"fromSemesterId\"\n                        component={renderSelectField}\n                        label={t('formElements:semester_label')}\n                        type=\"text\"\n                        validate={[required]}\n                    >\n                        <option />\n                        {semesters.map((semester, index) => (\n                            <option\n                                key={shortid.generate()}\n                                value={semester.id}\n                            >\n                                {semester.description}\n                            </option>\n                        ))}\n                    </Field>\n                );\n            } else if (semesters.length === 1) {\n                handleSubmit({ fromSemesterId: semesters[0].id });\n                return <p>{semesters[0].description}</p>;\n            }\n        }\n    };\n\n    return (\n        <Card class=\"form-card\">\n            <form onSubmit={handleSubmit}>\n                <h2 className=\"lesson-page-h\">{t('copy_lesson')}</h2>\n                <p>{t('copy_lessons_from_semester_to_current')}</p>\n                {renderSemesterList()}\n                <div className=\"form-buttons-container\">\n                    <Button\n                        className='semester-copy-btn'\n                        variant=\"contained\"\n                        color=\"primary\"\n                        type=\"submit\"\n                        disabled={pristine || submitting}\n                    >\n                        {t('formElements:copy_label')}\n                    </Button>\n                </div>\n            </form>\n        </Card>\n    );\n};\n\nconst mapStateToProps = state => ({\n    semesters: state.semesters.semesters,\n    currentSemester: state.schedule.currentSemester\n});\nexport default connect(mapStateToProps)(\n    reduxForm({\n        form: COPY_LESSONS_FROM_SEMESTER_FORM\n    })(CopyLessonsFromSemesterForm)\n);\n","import React, { useEffect, useState } from 'react';\nimport { connect } from 'react-redux';\nimport { useTranslation } from 'react-i18next';\n\nimport Card from '../../share/Card/Card';\nimport ConfirmDialog from '../../share/modals/dialog';\nimport CopyLessonDialog from '../../share/modals/chooseGroupDialog/CopyLessonDialog';\n\nimport LessonForm from '../../components/LessonForm/LessonForm';\nimport LessonsList from '../../components/LessonsList/LessonsList';\nimport CopyLessonsFromSemesterForm from '../../components/CopyLessonsFromSemesterForm/CopyLessonsFromSemesterForm';\n\nimport {\n    copyLessonCardService,\n    getLessonsByGroupService,\n    getLessonTypesService,\n    handleLessonCardService,\n    removeLessonCardService,\n    selectGroupIdService,\n    selectLessonCardService\n} from '../../services/lessonService';\nimport { showAllTeachersService } from '../../services/teacherService';\nimport { selectGroupService, showAllGroupsService } from '../../services/groupService';\nimport { setLoadingService } from '../../services/loadingService';\nimport { showAllSubjectsService } from '../../services/subjectService';\nimport {\n    showAllSemestersService,\n    CopyLessonsFromSemesterService\n} from '../../services/semesterService';\n\nimport TextField from '@material-ui/core/TextField';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport { styled } from '@material-ui/core/styles';\n\nimport { cardType } from '../../constants/cardType';\n\nimport './LessonPage.scss';\nimport SearchPanel from '../../share/SearchPanel/SearchPanel';\nimport AddSubject from '../../components/AddSubjectForm/AddSubjectForm';\nimport { search } from '../../helper/search';\n\nconst GroupField = styled(TextField)({\n    display: 'inline-block',\n    width: '150px'\n});\n\nconst LessonPage = props => {\n    const { t } = useTranslation('common');\n\n    const [open, setOpen] = useState(false);\n    const [openCopyLessonDialog, setOpenCopyLessonDialog] = useState(false);\n    const [lessonId, setLessonId] = React.useState(-1);\n    const [copiedLesson, setCopiedLesson] = React.useState(-1);\n    const [term, setTerm] = useState('');\n    const SearchChange = setTerm;\n    let visibleItems = [];\n    const isIncludeValue = (item, value) => {\n        return item.toLowerCase().includes(value.toLowerCase());\n    };\n    const getSearchTeachers = (lessons, term) => {\n        const termTmp = term.trim();\n        if (termTmp.length === 0) return lessons;\n        return lessons.filter(lesson => {\n            let { teacher, subjectForSite, lessonType, grouped } = lesson;\n            return isIncludeValue(teacher.surname, termTmp) ||\n                isIncludeValue(subjectForSite, termTmp) ||\n                isIncludeValue(lessonType, termTmp) ||\n                isIncludeValue('Grouped', term) && grouped;\n        });\n    };\n    visibleItems = getSearchTeachers(props.lessons, term);\n\n\n    const teachers = props.teachers;\n\n    const isUniqueError = props.isUniqueError;\n\n    const lessons = props.lessons;\n    const lessonLength = lessons.length;\n\n    const isLoading = props.loading;\n\n    const { groups, groupId, currentSemester } = props;\n\n    const subjects = props.subjects;\n\n\n    useEffect(() => {\n        if (groupId) {\n            setLoadingService(true);\n            getLessonsByGroupService(groupId);\n        }\n    }, [groupId]);\n    useEffect(() => showAllTeachersService(), []);\n    useEffect(() => showAllSemestersService(), []);\n    useEffect(() => getLessonTypesService(), []);\n    useEffect(() => showAllGroupsService(), []);\n    useEffect(() => {\n        showAllSubjectsService();\n    }, []);\n\n    const createLessonCardHandler = card => {\n        if (Object.keys(card).length === 0 && card.constructor === Object)\n            return;\n        if (card.groups === undefined) {\n            card.groups = [{ id: groupId }];\n        }\n        handleLessonCardService(card, groupId, currentSemester);\n\n    };\n    useEffect(() => {\n        setLoadingService(true);\n        getLessonsByGroupService(groupId);\n    }, [lessons.length]);\n\n\n    const selectLessonCardHandler = lessonCardId => {\n        selectLessonCardService(lessonCardId);\n    };\n\n    const groupTitleHandle = (groups, groupId) => {\n        return groups.find(group => group.id === +groupId).title;\n    };\n\n    const groupHandle = (groups, groupId) => {\n        return groups.find(group => group.id === +groupId);\n    };\n\n    const handleClickOpen = lessonId => {\n        setLessonId(lessonId);\n        setOpen(true);\n    };\n\n    const handleClose = lessonId => {\n        setOpen(false);\n        if (!lessonId) return;\n\n        removeLessonCardService(lessonId);\n    };\n\n    const openCopyLessonDialogHandle = lesson => {\n        setCopiedLesson(lesson);\n        setOpenCopyLessonDialog(true);\n    };\n\n    const closeCopyLessonDialogHandle = lessonGroupObj => {\n        setOpenCopyLessonDialog(false);\n        if (!lessonGroupObj) return;\n        copyLessonCardService(lessonGroupObj);\n    };\n\n    const defaultProps = {\n        options: groups,\n        getOptionLabel: option => (option ? option.title : '')\n    };\n\n    const handleGroupSelect = group => {\n        if (group) {\n            selectGroupIdService(group.id);\n            selectGroupService(group.id);\n        }\n        ;\n    };\n\n    const groupFinderHandle = groupId => {\n        if (groupId) return groups.find(group => group.id === groupId);\n        else return '';\n    };\n\n    const submitCopy = values => {\n        values.toSemesterId = props.currentSemester.id;\n        values.fromSemesterId = +values.fromSemesterId;\n        CopyLessonsFromSemesterService(values);\n    };\n\n    const renderCopyLessonsForm = () => {\n        if (!groupId) {\n            return <CopyLessonsFromSemesterForm onSubmit={submitCopy} />;\n        }\n    };\n\n    let cardsContainer = (\n        <>\n            {visibleItems.length > 0 ? (\n                <LessonsList\n                    lessons={visibleItems}\n                    onClickOpen={handleClickOpen}\n                    onSelectLesson={selectLessonCardHandler}\n                    onCopyLesson={openCopyLessonDialogHandle}\n                    translation={t}\n                />\n            ) : (\n                <section className='centered-container'>\n                    <h2>\n                        {groupHandle(groups, groupId)\n                            ? t('lesson_no_lesson_for_group_label') +\n                            groupTitleHandle(groups, groupId)\n                            : ''}\n                    </h2>\n                </section>\n            )}\n        </>\n    );\n\n    if (isLoading) {\n        cardsContainer = (\n            <section className='centered-container'>\n                <CircularProgress />\n            </section>\n        );\n    }\n\n    return (\n        <>\n            <Card class='card-title lesson-card'>\n                <CopyLessonDialog\n                    open={openCopyLessonDialog}\n                    onClose={closeCopyLessonDialogHandle}\n                    groupId={groupId}\n                    lesson={copiedLesson}\n                    groups={groups}\n                    translation={t}\n                />\n                <ConfirmDialog\n                    cardId={lessonId}\n                    whatDelete={cardType.LESSON.toLowerCase()}\n                    open={open}\n                    onClose={handleClose}\n                />\n                <div className='lesson-page-title'>\n                    <aside className='search-lesson-group'>\n                        {groupId &&\n                        <span className='search-lesson'>\n                                <SearchPanel\n                                    forLessons={true}\n                                    SearchChange={SearchChange}\n                                />\n                            </span>\n                        }\n                        <span className='group-lesson'>\n                            <h1 className='lesson-page-h'>\n                                {t('lesson_for_group_title')}\n                            </h1>\n                            <Autocomplete\n                                {...defaultProps}\n                                id='group'\n                                clearOnEscape\n                                openOnFocus\n                                value={groupFinderHandle(groupId)}\n                                onChange={(event, newValue) => {\n                                    handleGroupSelect(newValue);\n                                }}\n                                renderInput={params => (\n                                    <GroupField\n                                        {...params}\n                                        label={t('formElements:group_label')}\n                                        margin='normal'\n                                    />\n                                )}\n                            />\n                        </span>\n                    </aside>\n\n                </div>\n            </Card>\n            <div className='cards-container'>\n                <section>\n                    <LessonForm\n                        lessonTypes={props.lessonTypes}\n                        isUniqueError={isUniqueError}\n                        subjects={subjects}\n                        teachers={teachers}\n                        onSubmit={createLessonCardHandler}\n                        onSetSelectedCard={selectLessonCardHandler}\n                    />\n                    {renderCopyLessonsForm()}\n                </section>\n                {cardsContainer}\n            </div>\n        </>\n    );\n};\nconst mapStateToProps = state => ({\n    lessons: state.lesson.lessons,\n    lessonTypes: state.lesson.lessonTypes,\n    groupId: state.lesson.groupId,\n    isUniqueError: state.lesson.uniqueError,\n    teachers: state.teachers.teachers,\n    groups: state.groups.groups,\n    subjects: state.subjects.subjects,\n    loading: state.loadingIndicator.loading,\n    semesters: state.semesters.semesters,\n    currentSemester: state.schedule.currentSemester\n});\n\nexport default connect(mapStateToProps)(LessonPage);\n","import React from 'react';\nimport NavigationPage from '../../components/Navigation/NavigationPage';\nimport LessonPage from '../LessonPage/LessonPage';\nimport { navigation, navigationNames } from '../../constants/navigation';\nimport { connect } from 'react-redux';\n\n\n\nfunction AdminPage(props){\n    return(\n\n        <>\n            <NavigationPage val={navigation.LESSONS} />\n            <LessonPage/>\n        </>\n    )\n}\nconst mapStateToProps = state => ({\n    classScheduler: state.classActions.classScheduler,\n    ClassScheduleOne: state.classActions.classScheduleOne\n});\n\nexport default connect(mapStateToProps, {})(AdminPage);","import React, { useEffect } from 'react';\nimport { Redirect } from 'react-router-dom';\nimport { connect } from 'react-redux';\n\nimport { logout } from '../../../redux/actions/index';\nimport { setScheduleSemesterIdService } from '../../../services/scheduleService';\nimport { useHistory } from 'react-router-dom';\nconst Logout = props => {\n    useEffect(() => {\n        props.onLogout();\n    }, []);\n    // useEffect(()=>setScheduleSemesterIdService(0))\n    // const history=useHistory();\n    // useEffect(()=>history.push(\"/\"));\n    return <Redirect to=\"/\" />;\n};\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        onLogout: () => dispatch(logout())\n    };\n};\n\nexport default connect(null, mapDispatchToProps)(Logout);\n","import * as actionTypes from './actionsType';\nimport { TOKEN_BEGIN } from '../../constants/tokenBegin';\n\nexport const authUser = res => {\n    return {\n        type: actionTypes.AUTH_USER,\n        result: res\n    };\n};\n\nexport const registerUser = res => {\n    return {\n        type: actionTypes.REGISTER_USER,\n        result: res\n    };\n};\n\nexport const resetUserPassword = res => {\n    return {\n        type: actionTypes.RESET_USER_PASSWORD,\n        result: res\n    };\n};\n\nexport const activateUser = res => {\n    return {\n        type: actionTypes.ACTIVATE_USER,\n        result: res\n    };\n};\n\nexport const logout = () => {\n    return {\n        type: actionTypes.AUTH_USER_INITIATE_LOGOUT\n    };\n};\n\nexport const authCheckState = () => {\n    const token = localStorage.getItem('token');\n    if (token && !token.includes(TOKEN_BEGIN)) {\n        return {\n            type: actionTypes.AUTH_USER_LOGOUT\n        };\n    }\n    const role = localStorage.getItem('userRole');\n    return {\n        type: actionTypes.AUTH_USER_CHECK_STATE,\n        token,\n        role\n    };\n};\n\nexport const setAuthError = res => {\n    return {\n        type: actionTypes.SET_AUTH_ERROR,\n        result: res\n    };\n};\n","import React, { useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport { Redirect } from 'react-router-dom';\nimport { useTranslation } from 'react-i18next';\n\nimport { activateUser } from '../../redux/actions';\n\nimport { links } from '../../constants/links';\nimport { snackbarTypes } from '../../constants/snackbarTypes';\n\nimport { CircularProgress } from '@material-ui/core';\n\nimport { handleSnackbarOpenService } from '../../services/snackbarService';\n\nimport './ActivationPage.scss';\n\nconst ActivationPage = props => {\n    const { t } = useTranslation('common');\n\n    const params = new URLSearchParams(props.location.search);\n    const token = params.get('token');\n\n    const error = props.error;\n\n    const response = props.response;\n    let redirect = null;\n\n    if (response && response.data.hasOwnProperty('message')) {\n        redirect = <Redirect to={links.AUTH} />;\n        handleSnackbarOpenService(\n            true,\n            snackbarTypes.SUCCESS,\n            response.data.message\n        );\n    }\n\n    let main = (\n        <>\n            <h2>{t('verifying_token')}</h2>\n            <CircularProgress />\n        </>\n    );\n\n    if (error) {\n        main = (\n            <>\n                <h2>{t('token_error')}</h2>\n                <p>{error}</p>\n            </>\n        );\n    }\n\n    useEffect(() => {\n        if (token) {\n            props.onActivate(token);\n        }\n    }, [token]);\n\n    return (\n        <>\n            <section className=\"activation-page-container\">\n                {redirect}\n                <section className=\"card activation-section\">{main}</section>\n            </section>\n        </>\n    );\n};\n\nconst mapStateToProps = state => ({\n    response: state.auth.response,\n    error: state.auth.activationError\n});\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        onActivate: data => dispatch(activateUser(data))\n    };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ActivationPage);\n","import React, { useEffect } from 'react';\n\nimport Card from '../../share/Card/Card';\nimport { connect } from 'react-redux';\n\nimport './ProfilePage.scss';\n\nimport ChangePasswordForm from '../../components/ChangePasswordForm/ChangePasswordForm';\n\nimport { makeStyles } from '@material-ui/core/styles';\n\nimport { resetFormHandler } from '../../helper/formHelper';\nimport { useTranslation } from 'react-i18next';\nimport { PROFILE_FORM, TEACHER_FORM } from '../../constants/reduxForms';\n\nimport {\n    getUserProfile,\n    updateUserPassword,\n    updateUserTeacher\n} from '../../services/userService';\nimport AddTeacherForm from '../../components/AddTeacherForm/AddTeacherForm';\nimport { navigation, navigationNames } from '../../constants/navigation';\nimport NavigationPage from '../../components/Navigation/NavigationPage';\n\nconst useStyles = makeStyles(theme => ({\n    rootInput: {\n        width: '20em'\n    }\n}));\n\nlet ProfilePage = props => {\n    const { t } = useTranslation('formElements');\n    const classes = useStyles();\n\n    const submitPasswordChange = values => {\n        console.log('values', values);\n        if (values.new_password !== values.confirm_password) {\n            props.setError({\n                registration: { passwords: t('different_passwords') }\n            });\n            return;\n        }\n        updateUserPassword(values);\n        handlePasswordFormReset();\n    };\n\n    const submitTeacherChange = values => {\n        updateUserTeacher(values);\n    };\n    const handlePasswordFormReset = () => resetFormHandler(PROFILE_FORM);\n    const handleTeacherFormReset = () => resetFormHandler(TEACHER_FORM);\n    useEffect(() => {\n        getUserProfile();\n    }, [localStorage.getItem('userRole')]);\n\n    const renderTeacherdataForm = () => {\n        if (localStorage.getItem('userRole') === 'ROLE_TEACHER') {\n            return (\n                <AddTeacherForm\n                    onSubmit={submitTeacherChange}\n                    onReset={handleTeacherFormReset}\n                />\n            );\n        }\n    };\n\n    return (\n        <>\n            <NavigationPage />\n            <Card class='form-card'>\n                <h2 className='form-title'>{t('common:my_profile')}</h2>\n                <section>\n                    <span>{t('email_label') + ': '}</span>\n                    <span>{localStorage.getItem('email')}</span>\n                </section>\n                <ChangePasswordForm\n                    onSubmit={submitPasswordChange}\n                    onReset={handlePasswordFormReset}\n                />\n            </Card>\n            {renderTeacherdataForm()}\n        </>\n    );\n};\n\nconst mapStateToProps = state => ({\n    user: state.users.user\n});\n\nexport default connect(mapStateToProps)(ProfilePage);\n","export const authTypes = {\n    LOGIN: 'LOGIN',\n    GOOGLE: 'GOOGLE',\n    REGISTRATION: 'REGISTRATION',\n    RESET_PASSWORD: 'RESET_PASSWORD'\n};\n","import React, { useEffect } from 'react';\nimport { useTranslation } from 'react-i18next';\n\nimport { Field, reduxForm } from 'redux-form';\n\nimport Button from '@material-ui/core/Button';\nimport CircularProgress from '@material-ui/core/CircularProgress';\n\nimport Card from '../../share/Card/Card';\nimport renderTextField from '../../share/renderedFields/input';\n\nimport { LOGIN_FORM } from '../../constants/reduxForms';\nimport { authTypes } from '../../constants/auth';\nimport { GOOGLE_LOGIN_URL } from '../../constants/axios';\n\nimport { required } from '../../validation/validateFields';\nimport { FaGoogle } from 'react-icons/fa';\nimport { links } from '../../constants/links';\nimport { Link } from 'react-router-dom';\nimport {\n    setScheduleGroupIdService,\n    setScheduleSemesterIdService,\n    setScheduleTeacherIdService, setScheduleTypeService\n} from '../../services/scheduleService';\nlet LoginForm = props => {\n\n    useEffect(()=>setScheduleSemesterIdService(0))\n    useEffect(()=>setScheduleTeacherIdService(0))\n    useEffect(()=>setScheduleGroupIdService(0))\n    useEffect(()=>setScheduleTypeService(\"\"))\n    const { t } = useTranslation('formElements');\n    const { handleSubmit } = props;\n\n    const error = props.loginError;\n\n    const translation = props.translation;\n\n    const errorHandling = value => {\n        if (required(value)) props.setError(required(value));\n        else props.setError(null);\n    };\n\n    let form = (\n        <form onSubmit={handleSubmit}>\n            <Field\n                name=\"email\"\n                className=\"form-field\"\n                component={renderTextField}\n                label={t('email_label')}\n                error={!!error}\n                helperText={error ? error.login : null}\n                onChange={e => errorHandling(e.target.value)}\n            />\n            <Field\n                name=\"password\"\n                className=\"form-field\"\n                type=\"password\"\n                component={renderTextField}\n                label={t('password_label')}\n                error={!!error}\n                onChange={() => props.setError(null)}\n            />\n            <Button\n                className=\"buttons-style under-line\"\n                type=\"submit\"\n                variant=\"contained\"\n                color=\"primary\"\n            >\n                {translation('login_title')}\n            </Button>\n            {/*<div className=\"group-btns\">*/}\n            {/*    <button*/}\n            {/*        type=\"button\"*/}\n            {/*        className=\"auth-link\"*/}\n            {/*        onClick={() => {*/}\n            {/*            props.switchAuthMode(authTypes.REGISTRATION);*/}\n            {/*            props.setError(null);*/}\n            {/*        }}*/}\n            {/*    >*/}\n            {/*       <Link  className=\"navLinks\" to={links.Registration}>{translation('no_account')}</Link>*/}\n            {/*    </button>*/}\n            {/*    <button*/}\n            {/*        type=\"button\"*/}\n            {/*        className=\"auth-link\"*/}\n            {/*        onClick={() => {*/}\n            {/*            props.switchAuthMode(authTypes.RESET_PASSWORD);*/}\n            {/*            props.setError(null);*/}\n            {/*        }}*/}\n            {/*    >*/}\n            {/*       <Link  className=\"navLinks\" to={links.RESET_PASSWORD}>{translation('forgot_password')}</Link>*/}\n            {/*    </button>*/}\n            {/*</div>*/}\n\n            {/*<Button*/}\n            {/*    variant=\"contained\"*/}\n            {/*    color=\"secondary\"*/}\n            {/*    onClick={() =>*/}\n            {/*        (window.document.location.href =*/}\n            {/*            process.env.REACT_APP_API_BASE_URL.trim() +*/}\n            {/*            GOOGLE_LOGIN_URL)*/}\n            {/*    }*/}\n            {/*>*/}\n            {/*    <FaGoogle />*/}\n            {/*    {t('login_via_google')}*/}\n            {/*</Button>*/}\n        </form>\n    );\n\n    if (props.isLoading) {\n        form = <CircularProgress />;\n    }\n\n    return (\n        <Card class=\"auth-card\">\n            <h2 className=\"under-line\">{translation('login_page_title')}</h2>\n            {form}\n        </Card>\n    );\n};\n\nLoginForm = reduxForm({\n    form: LOGIN_FORM\n})(LoginForm);\n\nexport default LoginForm;\n","import React from 'react';\nimport { useTranslation } from 'react-i18next';\n\nimport { Field, reduxForm } from 'redux-form';\n\nimport renderTextField from '../../share/renderedFields/input';\nimport Card from '../../share/Card/Card';\n\nimport Button from '@material-ui/core/Button';\nimport CircularProgress from '@material-ui/core/CircularProgress';\n\nimport { REGISTRATION_FORM } from '../../constants/reduxForms';\nimport { authTypes } from '../../constants/auth';\n\nimport { email, password, required } from '../../validation/validateFields';\nimport { links } from '../../constants/links';\nimport {Link} from 'react-router-dom';\nlet RegistrationForm = props => {\n    const { t } = useTranslation('formElements');\n    const { handleSubmit } = props;\n\n    const translation = props.translation;\n\n    const error = props.registrationError;\n\n    const emailValidate = { validate: [required, email] };\n    const emailErrorCondition = error && error.registration.reg;\n    const emailAdvancedValidate = {\n        error: !!emailErrorCondition,\n        helperText: emailErrorCondition ? error.registration.reg : ''\n    };\n\n    const passwordValidate = { validate: [required, password] };\n    const passwordsCondition = error && error.registration.passwords;\n    const passwordValidateAdvanced = {\n        error: !!passwordsCondition,\n        helperText: passwordsCondition ? error.registration.passwords : ''\n    };\n\n    const retypePasswordValidate = { validate: [required, password] };\n    const retypePasswordValidateAdvanced = {\n        error: !!passwordsCondition\n    };\n\n    let form = (\n        <form onSubmit={handleSubmit}>\n            <Field\n                name=\"email\"\n                className=\"form-field\"\n                type=\"email\"\n                component={renderTextField}\n                label={t('email_label')}\n                {...(!error ? emailValidate : emailAdvancedValidate)}\n                onChange={e => props.setError(null)}\n            />\n            <Field\n                name=\"password\"\n                className=\"form-field\"\n                type=\"password\"\n                component={renderTextField}\n                label={t('password_label')}\n                {...(!error ? passwordValidate : passwordValidateAdvanced)}\n                onChange={e => props.setError(null)}\n            />\n            <Field\n                name=\"retypePassword\"\n                className=\"form-field\"\n                type=\"password\"\n                component={renderTextField}\n                label={t('retype_password_label')}\n                {...(!error\n                    ? retypePasswordValidate\n                    : retypePasswordValidateAdvanced)}\n            />\n            <Button\n                className=\"buttons-style\"\n                type=\"submit\"\n                variant=\"contained\"\n                color=\"primary\"\n            >\n                {translation('create_account')}\n            </Button>\n            <div className=\"group-btns\">\n                <button\n                    type=\"button\"\n                    className=\"auth-link\"\n                    onClick={() => {\n                        props.switchAuthMode(authTypes.LOGIN);\n                        props.setError(null);\n                    }}\n                >\n                   <Link  className=\"navLinks\" to={links.LOGIN}>{translation('account_exist')}</Link>\n                </button>\n            </div>\n        </form>\n    );\n\n    if (props.isLoading) {\n        form = <CircularProgress />;\n    }\n    return (\n        <Card class=\"auth-card\">\n            <h2 className=\"under-line\">\n                {props.translation('registration_page_title')}\n            </h2>\n            {form}\n        </Card>\n    );\n};\n\nRegistrationForm = reduxForm({\n    form: REGISTRATION_FORM\n})(RegistrationForm);\n\nexport default RegistrationForm;\n","import React from 'react';\nimport { useTranslation } from 'react-i18next';\n\nimport { Field, reduxForm } from 'redux-form';\n\nimport Button from '@material-ui/core/Button';\nimport CircularProgress from '@material-ui/core/CircularProgress';\n\nimport Card from '../../share/Card/Card';\nimport renderTextField from '../../share/renderedFields/input';\n\nimport { RESET_PASSWORD_FORM } from '../../constants/reduxForms';\nimport { authTypes } from '../../constants/auth';\n\nimport { email, required } from '../../validation/validateFields';\nimport { links } from '../../constants/links';\nimport {Link} from 'react-router-dom';\n\nlet ResetPasswordForm = props => {\n    const { t } = useTranslation('formElements');\n    const { handleSubmit } = props;\n\n    const error = props.resetPasswordError;\n\n    const translation = props.translation;\n\n    const emailValidate = { validate: [required, email] };\n\n    const errorHandling = value => {\n        if (required(value)) {\n            props.setError(required(value));\n        } else {\n            props.setError(null);\n        }\n    };\n\n    let form = (\n        <form onSubmit={handleSubmit}>\n            <Field\n                name=\"email\"\n                className=\"form-field\"\n                component={renderTextField}\n                label={t('email_label')}\n                {...(!error ? emailValidate : error)}\n                onChange={e => {\n                    errorHandling(e.target.value);\n                }}\n            />\n            <Button\n                className=\"buttons-style under-line\"\n                type=\"submit\"\n                variant=\"contained\"\n                color=\"primary\"\n            >\n                {translation('reset_password_button')}\n            </Button>\n            <div className=\"group-btns\">\n                <button\n                    type=\"button\"\n                    className=\"auth-link\"\n                    onClick={() => {\n                        props.switchAuthMode(authTypes.LOGIN);\n                        props.setError(null);\n                    }}\n                >\n                  <Link  className=\"navLinks\" to={links.LOGIN} >{translation('login_page_title')}</Link>\n                </button>\n            </div>\n        </form>\n    );\n\n    if (props.isLoading) {\n        form = <CircularProgress />;\n    }\n\n    return (\n        <Card class=\"auth-card\">\n            <h2 className=\"under-line\">\n                {translation('reset_password_page_title')}\n            </h2>\n            {form}\n        </Card>\n    );\n};\n\nResetPasswordForm = reduxForm({\n    form: RESET_PASSWORD_FORM\n})(ResetPasswordForm);\n\nexport default ResetPasswordForm;\n","import React, { useEffect, useState } from 'react';\nimport { connect } from 'react-redux';\nimport { Redirect } from 'react-router-dom';\nimport { useTranslation } from 'react-i18next';\n\nimport { resetFormHandler } from '../../helper/formHelper';\nimport { handleSnackbarOpenService } from '../../services/snackbarService';\n\nimport {\n    LOGIN_FORM,\n    REGISTRATION_FORM,\n    RESET_PASSWORD_FORM\n} from '../../constants/reduxForms';\nimport { snackbarTypes } from '../../constants/snackbarTypes';\nimport { links } from '../../constants/links';\nimport { authTypes } from '../../constants/auth';\nimport { userRoles } from '../../constants/userRoles';\nimport { validation } from '../../constants/validation';\n\nimport LoginForm from '../../components/LoginForm/LoginForm';\nimport RegistrationForm from '../../components/RegistrationForm/RegistrationForm';\nimport ResetPasswordForm from '../../components/ResetPasswordForm/ResetPasswordForm';\n\nimport {\n    authUser,\n    registerUser,\n    resetUserPassword,\n    setAuthError,\n    setLoading\n} from '../../redux/actions/index';\n\nimport './Auth.scss';\n\nconst Auth = props => {\n    const { t } = useTranslation('common');\n    const [authType, setAuthType] = useState(authTypes.LOGIN);\n\n    const error = props.error;\n    var url = window.document.location;\n    var parser = new URL(url);\n\n    const socialLoginHandler = data => {\n        props.setLoading(true);\n        if (!data.token || data.token.length < 20) {\n            props.setError({ login: t('broken_token') });\n            return;\n        }\n        setAuthType(authTypes.GOOGLE);\n        props.onAuth(data);\n        resetFormHandler(LOGIN_FORM);\n        window.history.replaceState({}, document.title, '/');\n        props.setLoading(false);\n    };\n\n    let social = false;\n    let isToken = false;\n    let token = '';\n\n    if (parser.search.length > 0) {\n        const params = parser.search.split('&');\n        if (params) {\n            params.map(param => {\n                const splitedParam = param.split('=');\n                if (splitedParam) {\n                    if (\n                        splitedParam[0] === '?social' &&\n                        splitedParam[1] === 'true'\n                    ) {\n                        social = true;\n                    }\n                    if (\n                        splitedParam[0] === 'token' &&\n                        splitedParam[1].length > 0\n                    ) {\n                        isToken = true;\n                        token = splitedParam[1];\n                    }\n                }\n            });\n        }\n        if (social && isToken)\n            socialLoginHandler({ authType: 'google', token });\n    }\n\n    useEffect(() => {\n        if (\n            authType === authTypes.REGISTRATION &&\n            props.response &&\n            props.response.data.hasOwnProperty('message')\n        ) {\n            setAuthType(authTypes.LOGIN);\n            message = t('successful_registered_message');\n            handleSnackbarOpenService(true, snackbarTypes.SUCCESS, message);\n        }\n    }, [props.response]);\n\n    useEffect(() => {\n        if (\n            props.resetPasswordResponse &&\n            props.resetPasswordResponse.data.hasOwnProperty('message')\n        ) {\n            setAuthType(authTypes.LOGIN);\n            message = t('successful_reset_password_message');\n            handleSnackbarOpenService(true, snackbarTypes.SUCCESS, message);\n        }\n    }, [props.resetPasswordResponse]);\n\n    const loginHandler = loginData => {\n        if (!loginData.email || !loginData.password) {\n            props.setError({ login: t('empty_fields') });\n            return;\n        }\n        if (!validation.EMAIL.test(loginData.email)) {\n            props.setError({ login: t('validationMessages:email') });\n            return;\n        }\n        props.onAuth(loginData);\n        props.setLoading(true);\n        resetFormHandler(LOGIN_FORM);\n    };\n\n    const registrationHandler = registrationData => {\n        if (registrationData.password !== registrationData.retypePassword) {\n            props.setError({\n                registration: { passwords: t('different_passwords') }\n            });\n            return;\n        }\n        props.onRegister({\n            email: registrationData.email,\n            password: registrationData.password\n        });\n        props.setLoading(true);\n        resetFormHandler(REGISTRATION_FORM);\n    };\n\n    const resetPasswordHandler = resetPasswordData => {\n        props.onResetPassword({\n            email: resetPasswordData.email\n        });\n        props.setLoading(true);\n        resetFormHandler(RESET_PASSWORD_FORM);\n    };\n\n    let isSuccess, message;\n    const isLoading = props.loading;\n\n    if (!error && props.userRole) {\n        const token = props.token;\n        isSuccess = !!token;\n        message = t('successful_login_message');\n        handleSnackbarOpenService(true, snackbarTypes.SUCCESS, message);\n    }\n\n    const commonCondition = !error && isSuccess && !isLoading;\n\n    let authRedirect = null;\n    if (commonCondition && props.userRole === userRoles.MANAGER) {\n        authRedirect = <Redirect to={links.ADMIN_PAGE} />;\n    } else if (commonCondition && props.userRole) {\n        authRedirect = <Redirect to={links.HOME_PAGE} />;\n    } else if (commonCondition && props.userRole === userRoles.TEACHER) {\n        authRedirect = <Redirect to={links.HOME_PAGE} />;\n    }\n\n    const switchAuthModeHandler = authType => {\n        setAuthType(authType);\n    };\n\n    let authPage;\n\n    switch (authType) {\n        case authTypes.LOGIN:\n            document.title = t('login_page_title');\n            authPage = (\n                <LoginForm\n                    isLoading={isLoading}\n                    loginError={error}\n                    onSubmit={loginHandler}\n                    switchAuthMode={switchAuthModeHandler}\n                    translation={t}\n                    setError={props.setError}\n                />\n            );\n            break;\n        case authTypes.REGISTRATION:\n            document.title = t('registration_page_title');\n            authPage = (\n                <RegistrationForm\n                    isLoading={isLoading}\n                    registrationError={error}\n                    onSubmit={registrationHandler}\n                    switchAuthMode={switchAuthModeHandler}\n                    translation={t}\n                    setError={props.setError}\n                />\n            );\n            break;\n        case authTypes.RESET_PASSWORD:\n            document.title = t('reset_password_page_title');\n            authPage = (\n                <ResetPasswordForm\n                    isLoading={isLoading}\n                    resetPasswordError={error}\n                    onSubmit={resetPasswordHandler}\n                    switchAuthMode={switchAuthModeHandler}\n                    translation={t}\n                    setError={props.setError}\n                />\n            );\n            break;\n        default:\n            document.title = t('login_page_title');\n            authPage = (\n                <LoginForm\n                    isLoading={isLoading}\n                    loginError={error}\n                    onSubmit={loginHandler}\n                    switchAuthMode={switchAuthModeHandler}\n                    translation={t}\n                    setError={props.setError}\n                />\n            );\n    }\n\n    return (\n        <div className=\"auth-form\">\n            {authRedirect}\n            {authPage}\n        </div>\n    );\n};\n\nconst mapStateToProps = state => ({\n    response: state.auth.response,\n    resetPasswordResponse: state.auth.resetPasswordResponse,\n    error: state.auth.error,\n    token: state.auth.token,\n    userRole: state.auth.role,\n    loading: state.loadingIndicator.loading\n});\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        onAuth: data => dispatch(authUser(data)),\n        onRegister: data => dispatch(registerUser(data)),\n        onResetPassword: data => dispatch(resetUserPassword(data)),\n        setLoading: isLoading => dispatch(setLoading(isLoading)),\n        setError: error => dispatch(setAuthError(error))\n    };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Auth);\n","import React, { useEffect, useState } from 'react';\nimport { authTypes } from '../../constants/auth';\nimport '../../containers/Auth/Auth.scss';\nimport Auth from '../../containers/Auth/Auth';\n\nconst Register = () => {\n    return <Auth authType={authTypes.REGISTRATION}/>\n};\nexport {Register}\n","import React, { useEffect, useState } from 'react';\nimport { authTypes } from '../../constants/auth';\nimport '../../containers/Auth/Auth.scss';\nimport Auth from '../../containers/Auth/Auth';\n\nconst ResetPassword = () => {\n    return <Auth authType={authTypes.RESET_PASSWORD}/>\n};\nexport {ResetPassword}","import React, { useEffect, useState } from 'react';\nimport { authTypes } from '../../constants/auth';\nimport '../../containers/Auth/Auth.scss';\nimport Auth from '../../containers/Auth/Auth';\n\nconst Login = () => {\n    return <Auth authType={authTypes.LOGIN}/>\n};\nexport {Login}","import axios from '../helper/axios';\nimport { errorHandler, successHandler } from '../helper/handlerAxios';\nimport i18n from '../helper/i18n';\n\nimport { store } from '../index';\n\nimport {\n    TEACHER_TEMPORARY_SCHEDULE,\n    TEMPORARY_SCHEDULE_RANGE_URL,\n    TEMPORARY_SCHEDULE_URL\n} from '../constants/axios';\nimport { actionType } from '../constants/actionTypes';\n\nimport { setLoadingService } from './loadingService';\n\nimport {\n    logout,\n    selectChangedScheduleId,\n    selectTeacherId,\n    selectTemporarySchedule,\n    selectVacation,\n    setSchedulesAndTemporarySchedules,\n    setTemporarySchedules\n} from '../redux/actions/index';\nimport { resetFormHandler } from '../helper/formHelper';\nimport {\n    TEMPORARY_SCHEDULE_FORM,\n    TEMPORARY_SCHEDULE_VACATION_FORM\n} from '../constants/reduxForms';\n\nexport const getTemporarySchedulesService = (from, to) => {\n    axios\n        .get(TEMPORARY_SCHEDULE_URL, { params: { from, to } })\n        .then(response => {\n            store.dispatch(setSchedulesAndTemporarySchedules([]));\n            store.dispatch(setTemporarySchedules(response.data));\n            setLoadingService(false);\n        })\n        .catch(err => {\n            errorHandler(err);\n            setLoadingService(false);\n        });\n};\n\nexport const getTeacherTemporarySchedulesService = (teacherId, from, to) => {\n    axios\n        .get(TEACHER_TEMPORARY_SCHEDULE, { params: { teacherId, from, to } })\n        .then(response => {\n            store.dispatch(setTemporarySchedules([]));\n            store.dispatch(setSchedulesAndTemporarySchedules(response.data));\n            setLoadingService(false);\n        })\n        .catch(err => {\n            errorHandler(err);\n            setLoadingService(false);\n        });\n};\n\nexport const deleteTemporaryScheduleService = (\n    temporaryScheduleId,\n    date,\n    teacherId\n) => {\n    axios\n        .delete(TEMPORARY_SCHEDULE_URL + `/${temporaryScheduleId}`)\n        .then(() => {\n            if (teacherId)\n                getTeacherTemporarySchedulesService(teacherId, date, date);\n            else getTemporarySchedulesService(null, null);\n            successHandler(handleSuccessMessage(actionType.DELETED));\n        })\n        .catch(err => {\n            errorHandler(err);\n        });\n};\n\nconst formatObj = (formValues, teacherId) => {\n    let obj = {};\n    if (teacherId) obj = { teacher: { id: teacherId } };\n    else if (formValues.teacher) obj = { teacher: { id: formValues.teacher } };\n    if (!formValues.vacation || (formValues.vacation && formValues.scheduleId))\n        obj = {\n            ...obj,\n            id: formValues.id ? formValues.id : null,\n            class: { id: formValues.period },\n            date: formValues.date,\n            group: { id: formValues.group },\n            lessonType: formValues.lessonType,\n            room: { id: formValues.room },\n            schedule: { id: formValues.scheduleId },\n            semester: { id: formValues.semester },\n            subject: { id: formValues.subject },\n            subjectForSite: formValues.subjectForSite,\n            // teacherForSite: formValues.teacherForSite\n            linkToMeeting:formValues.linkToMeeting\n        };\n    return obj;\n};\n\nconst handleSuccess = (isVacation, teacherId, formValues) => {\n    store.dispatch(selectTemporarySchedule({}));\n    store.dispatch(selectVacation({}));\n    if (!isVacation || (isVacation && formValues.scheduleId)) {\n        resetFormHandler(TEMPORARY_SCHEDULE_FORM);\n        getTeacherTemporarySchedulesService(\n            teacherId,\n            formValues.date,\n            formValues.date\n        );\n    } else {\n        resetFormHandler(TEMPORARY_SCHEDULE_VACATION_FORM);\n        store.dispatch(selectTeacherId(null));\n        getTemporarySchedulesService(null, null);\n    }\n};\n\nexport const addTemporaryScheduleService = (\n    teacherId,\n    formValues,\n    isVacation\n) => {\n    formValues.date = formValues.date.replace(/\\//g, '-');\n    const obj = formatObj(formValues, teacherId);\n    axios\n        .post(TEMPORARY_SCHEDULE_URL, {\n            ...formValues,\n            ...obj\n        })\n        .then(() => {\n            handleSuccess(isVacation, teacherId, formValues);\n            successHandler(handleSuccessMessage(actionType.CREATED));\n        })\n        .catch(err => {\n            errorHandler(err);\n        });\n};\n\nexport const addTemporaryScheduleForRangeService = (\n    teacherId,\n    formValues,\n    isVacation\n) => {\n    formValues.from = formValues.from.replace(/\\//g, '-');\n    formValues.to = formValues.to.replace(/\\//g, '-');\n    const obj = formatObj(formValues, teacherId);\n    axios\n        .post(TEMPORARY_SCHEDULE_RANGE_URL, {\n            from: formValues.from,\n            to: formValues.to,\n            temporary_schedule: {\n                ...formValues,\n                ...obj\n            }\n        })\n        .then(() => {\n            handleSuccess(isVacation, teacherId, formValues);\n            successHandler(handleSuccessMessage(actionType.CREATED));\n        })\n        .catch(err => {\n            errorHandler(err);\n        });\n};\n\nexport const editTemporaryScheduleService = (\n    teacherId,\n    formValues,\n    isVacation\n) => {\n    formValues.date = formValues.date.replace(/\\//g, '-');\n    const obj = formatObj(formValues, teacherId);\n    axios\n        .put(TEMPORARY_SCHEDULE_URL, {\n            ...formValues,\n            ...obj\n        })\n        .then(() => {\n            const tId = teacherId || formValues.teacher;\n            handleSuccess(isVacation, tId, formValues);\n            successHandler(handleSuccessMessage(actionType.UPDATED));\n        })\n        .catch(err => {\n            errorHandler(err);\n        });\n};\n\nexport const selectTemporaryScheduleService = temporarySchedule => {\n    store.dispatch(selectVacation({}));\n    store.dispatch(selectTemporarySchedule(temporarySchedule));\n};\n\nexport const selectVacationService = vacation => {\n    store.dispatch(selectTemporarySchedule({}));\n    store.dispatch(selectVacation(vacation));\n};\n\nexport const selectTeacherIdService = teacherId => {\n    store.dispatch(selectTeacherId(teacherId));\n};\n\nconst handleSuccessMessage = action => {\n    return i18n.t('serviceMessages:back_end_success_operation', {\n        cardType: i18n.t('formElements:temporary_schedule_label'),\n        actionType: i18n.t(`serviceMessages:${action}_label`)\n    });\n};\n","import React, { useEffect, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { Field, reduxForm } from 'redux-form';\n\nimport { TEMPORARY_SCHEDULE_FORM } from '../../../constants/reduxForms';\n\nimport Button from '@material-ui/core/Button';\nimport Hidden from '@material-ui/core/Hidden';\n\nimport Card from '../../../share/Card/Card';\nimport renderCheckboxField from '../../../share/renderedFields/checkbox';\nimport renderSelectField from '../../../share/renderedFields/select';\nimport renderTextField from '../../../share/renderedFields/input';\n\nimport { handleTeacherInfo } from '../../../helper/renderTeacher';\nimport {\n    setValueToSubjectForSiteHandler,\n    setValueToTeacherForSiteHandler\n} from '../../../helper/reduxFormHelper';\n\nimport { maxLengthValue, required } from '../../../validation/validateFields';\n\nimport { selectTemporaryScheduleService } from '../../../services/temporaryScheduleService';\n\nlet TemporaryScheduleForm = props => {\n    const { t } = useTranslation('formElements');\n    const { handleSubmit, invalid, reset, submitting } = props;\n    const [isVacation, setIsVacation] = useState(false);\n    const [notify, setNotify] = useState(false);\n\n    const temporarySchedule = props.temporarySchedule;\n    const scheduleId = temporarySchedule?.scheduleId;\n    const temporaryScheduleId = temporarySchedule?.id;\n\n    const { teachers, periods, rooms, subjects, lessonTypes, groups } = props;\n\n    useEffect(() => {\n        if (temporaryScheduleId || scheduleId) {\n            initializeFormHandler(temporarySchedule);\n        } else {\n            props.initialize({ vacation: isVacation });\n        }\n    }, [temporaryScheduleId]);\n\n    const initializeFormHandler = temporarySchedule => {\n        setIsVacation(temporarySchedule.vacation);\n        props.initialize({\n            vacation: isVacation,\n            teacher: temporarySchedule.teacher.id,\n            semester: temporarySchedule.semester.id,\n            subject: temporarySchedule.subject.id,\n            group: temporarySchedule.group.id,\n            room: temporarySchedule.room.id,\n            period: temporarySchedule.class.id,\n            lessonType: temporarySchedule.lessonType,\n            teacherForSite: temporarySchedule.teacherForSite,\n            subjectForSite: temporarySchedule.subjectForSite,\n            date: temporarySchedule.date,\n            id: temporarySchedule.id,\n            scheduleId: temporarySchedule.scheduleId\n        });\n    };\n\n    const handleVacationChange = event => setIsVacation(event.target.checked);\n    const handleNotifyChange = event => setNotify(event.target.checked);\n\n    return (\n        <Card class=\"form-card\">\n            <>\n                <h2 className=\"form-title under-line\">\n                    {!temporarySchedule.scheduleId\n                        ? t('edit_temporary_schedule_form')\n                        : t('create_temporary_schedule_form')}\n                </h2>\n                <form onSubmit={handleSubmit}>\n                    <Field\n                        name=\"vacation\"\n                        label={t('common:holiday_label')}\n                        component={renderCheckboxField}\n                        checked={isVacation}\n                        onChange={handleVacationChange}\n                        color=\"primary\"\n                    />\n                    <Field\n                        name=\"teacher\"\n                        className=\"form-field\"\n                        component={renderSelectField}\n                        label={t('teacher_label')}\n                        validate={[required]}\n                        disabled={isVacation}\n                        onChange={event => {\n                            if (event.target.value)\n                                setValueToTeacherForSiteHandler(\n                                    teachers,\n                                    event.target.value,\n                                    props.change\n                                );\n                            else props.change('teacherForSite', '');\n                        }}\n                    >\n                        <option value={''} />\n                        {teachers.map(teacher => (\n                            <option value={teacher.id} key={teacher.id}>\n                                {handleTeacherInfo(teacher)}\n                            </option>\n                        ))}\n                    </Field>\n                    <Field\n                        name=\"subject\"\n                        className=\"form-field\"\n                        component={renderSelectField}\n                        label={t('subject_label')}\n                        validate={[required]}\n                        disabled={isVacation}\n                        onChange={event => {\n                            setValueToSubjectForSiteHandler(\n                                subjects,\n                                event.target.value,\n                                props.change\n                            );\n                        }}\n                    >\n                        <option value={''} />\n                        {subjects.map(subject => (\n                            <option key={subject.id} value={subject.id}>\n                                {subject.name}\n                            </option>\n                        ))}\n                    </Field>\n                    <Field\n                        name=\"group\"\n                        className=\"form-field\"\n                        component={renderSelectField}\n                        label={t('group_label')}\n                        validate={[required]}\n                        disabled={isVacation}\n                    >\n                        <option value={''} />\n                        {groups.map(group => (\n                            <option key={group.id} value={group.id}>\n                                {group.title}\n                            </option>\n                        ))}\n                    </Field>\n                    <Field\n                        name=\"lessonType\"\n                        className=\"form-field\"\n                        component={renderSelectField}\n                        label={t('type_label')}\n                        validate={[required]}\n                        disabled={isVacation}\n                    >\n                        <option value={''} />\n                        {lessonTypes.map((lessonType, index) => (\n                            <option value={lessonType} key={index}>\n                                {t(\n                                    `formElements:lesson_type_${lessonType.toLowerCase()}_label`\n                                )}\n                            </option>\n                        ))}\n                    </Field>\n                    <Field\n                        name=\"room\"\n                        className=\"form-field\"\n                        component={renderSelectField}\n                        label={t('room_label')}\n                        validate={[required]}\n                        disabled={isVacation}\n                    >\n                        <option value={''} />\n                        {rooms.map(room => (\n                            <option value={room.id} key={room.id}>\n                                {room.name}\n                            </option>\n                        ))}\n                    </Field>\n                    <Field\n                        name=\"period\"\n                        className=\"form-field\"\n                        component={renderSelectField}\n                        label={t('class_label')}\n                        validate={[required]}\n                        disabled={isVacation}\n                    >\n                        <option value={''} />\n                        {periods.map(period => (\n                            <option value={period.id} key={period.id}>\n                                {period.startTime} - {period.endTime}\n                            </option>\n                        ))}\n                    </Field>\n                    <Field\n                        name=\"teacherForSite\"\n                        className=\"form-field\"\n                        multiline\n                        rowsMax=\"1\"\n                        margin=\"normal\"\n                        component={renderTextField}\n                        label={t('teacher_label') + t('for_site_label')}\n                        validate={[required, maxLengthValue]}\n                        disabled={isVacation}\n                    />\n                    <Field\n                        name=\"subjectForSite\"\n                        className=\"form-field\"\n                        multiline\n                        rowsMax=\"1\"\n                        margin=\"normal\"\n                        component={renderTextField}\n                        label={t('subject_label') + t('for_site_label')}\n                        validate={[required, maxLengthValue]}\n                        disabled={isVacation}\n                    />\n                    <Field\n                        name=\"notify\"\n                        label={t('common:notify_label')}\n                        component={renderCheckboxField}\n                        checked={notify}\n                        onChange={handleNotifyChange}\n                        color=\"primary\"\n                    />\n                    <Hidden smUp smDown xsDown xsUp>\n                        <Field name=\"date\" component={renderTextField} />\n                        <Field name=\"id\" component={renderTextField} />\n                        <Field name=\"scheduleId\" component={renderTextField} />\n                        <Field name=\"semester\" component={renderTextField} />\n                    </Hidden>\n                    <div className=\"form-buttons-container\">\n                        <Button\n                            className=\"buttons-style\"\n                            type=\"submit\"\n                            variant=\"contained\"\n                            color=\"primary\"\n                            disabled={invalid || submitting}\n                        >\n                            {t('save_button_label')}\n                        </Button>\n                        <Button\n                            className=\"buttons-style\"\n                            type=\"button\"\n                            variant=\"contained\"\n                            disabled={invalid || submitting}\n                            onClick={() => {\n                                reset();\n                                selectTemporaryScheduleService({});\n                            }}\n                        >\n                            {t('clear_button_label')}\n                        </Button>\n                    </div>\n                </form>\n            </>\n        </Card>\n    );\n};\n\nTemporaryScheduleForm = reduxForm({\n    form: TEMPORARY_SCHEDULE_FORM\n})(TemporaryScheduleForm);\n\nexport default TemporaryScheduleForm;\n","import React from 'react';\nimport { useTranslation } from 'react-i18next';\n\nconst TemporaryScheduleCard = props => {\n    const { t } = useTranslation('formElements');\n    const { schedule } = props;\n\n    return (\n        <>\n            <p>\n                {t('subject_label')}:{' '}\n                <b>\n                    {schedule.lesson\n                        ? schedule.lesson.subjectForSite\n                        : schedule.subjectForSite}\n                    (\n                    {schedule.lesson\n                        ? schedule.lesson.lessonType\n                        : schedule.lessonType}\n                    )\n                </b>\n            </p>\n            <p>\n                {t('room_label')}: <b>{schedule.room.name}</b>\n            </p>\n            <p>\n                {t('teacher_label')}:{' '}\n                <b>\n                    {schedule.lesson\n                        ? schedule.lesson.teacherForSite\n                        : schedule.teacherForSite}\n                </b>\n            </p>\n            <p>\n                {t('common:class_schedule')}:{' '}\n                <b>\n                    {schedule.class.startTime} - {schedule.class.endTime}\n                </b>\n            </p>\n            <p>\n                {t('group_label')}:{' '}\n                <b>\n                    {schedule.lesson\n                        ? schedule.lesson.group.title\n                        : schedule.group.title}\n                </b>\n            </p>\n            <p>\n                {t('semester_label')}:{' '}\n                <b>\n                    {schedule.lesson\n                        ? schedule.lesson.semester.description\n                        : schedule.semester.description}\n                </b>\n            </p>\n        </>\n    );\n};\n\nexport default TemporaryScheduleCard;\n","import React from 'react';\nimport { FaEdit, MdDelete } from 'react-icons/all';\nimport { useTranslation } from 'react-i18next';\nimport { selectTemporaryScheduleService } from '../../../services/temporaryScheduleService';\n\nconst TemporaryScheduleCardButtons = props => {\n    const { t } = useTranslation('common');\n\n    const { schedule, date, isTemporary, scheduleId } = props;\n    const { onOpenDialog, setDate, setTeacherId } = props;\n\n    const selectTemporarySchedule = schedule => {\n        selectTemporaryScheduleService({\n            ...schedule.lesson,\n            room: schedule.room,\n            class: schedule.class,\n            id: schedule.id,\n            vacation: schedule.vacation,\n            scheduleId: schedule.scheduleId ? schedule.scheduleId : scheduleId,\n            date: schedule.date\n        });\n    };\n\n    const handleScheduleSelect = schedule => {\n        schedule.scheduleId = schedule.id;\n        schedule.id = null;\n        schedule.lesson.id = null;\n        selectTemporarySchedule(schedule);\n    };\n\n    return (\n        <div className=\"cards-btns\">\n            <FaEdit\n                title={t('common:edit_hover_title')}\n                className=\"svg-btn edit-btn\"\n                onClick={() => {\n                    isTemporary\n                        ? selectTemporarySchedule({ ...schedule, date: date })\n                        : handleScheduleSelect({\n                              ...schedule,\n                              date: date\n                          });\n                }}\n            />\n            {isTemporary && (\n                <MdDelete\n                    title={t('common:delete_hover_title')}\n                    className=\"svg-btn delete-btn\"\n                    onClick={() => {\n                        onOpenDialog(schedule.id);\n                        setDate(date);\n                        setTeacherId(schedule.lesson.teacher.id);\n                    }}\n                />\n            )}\n        </div>\n    );\n};\n\nexport default TemporaryScheduleCardButtons;\n","import React, { useState } from 'react';\nimport { MdExpandMore } from 'react-icons/all';\n\nimport Card from '../../../share/Card/Card';\nimport ConfirmDialog from '../../../share/modals/dialog';\n\nimport TemporaryScheduleCard from '../TemporaryScheduleCard/TemporaryScheduleCard';\nimport TemporaryScheduleCardButtons from '../TemporaryScheduleCardButtons/TemporaryScheduleCardButtons';\n\nimport Divider from '@material-ui/core/Divider';\nimport ExpansionPanel from '@material-ui/core/ExpansionPanel';\nimport ExpansionPanelSummary from '@material-ui/core/ExpansionPanelSummary';\nimport ExpansionPanelDetails from '@material-ui/core/ExpansionPanelDetails';\n\nimport { cardType } from '../../../constants/cardType';\n\nimport { deleteTemporaryScheduleService } from '../../../services/temporaryScheduleService';\n\nconst ScheduleAndTemporaryScheduleList = props => {\n    const shortId = require('shortid');\n\n    const schedulesAndTemporarySchedules =\n        props.schedulesAndTemporarySchedules || [];\n\n    const [open, setOpen] = useState(false);\n    const [temporaryScheduleId, setTemporaryScheduleId] = useState(-1);\n    const [date, setDate] = useState(null);\n    const [teacherId, setTeacherId] = useState(null);\n\n    let expandedProp;\n\n    if (schedulesAndTemporarySchedules.length === 1) {\n        expandedProp = {\n            expanded: true\n        };\n    }\n\n    const handleClickOpen = temporaryScheduleId => {\n        setTemporaryScheduleId(temporaryScheduleId);\n        setOpen(true);\n    };\n\n    const handleClose = temporaryScheduleId => {\n        setOpen(false);\n        if (!temporaryScheduleId) {\n            return;\n        }\n        deleteTemporaryScheduleService(temporaryScheduleId, date, teacherId);\n    };\n\n    return (\n        <main className=\"temporary-schedule-section\">\n            <ConfirmDialog\n                cardId={temporaryScheduleId}\n                whatDelete={cardType.TEMPORARY_SCHEDULE.toLowerCase()}\n                open={open}\n                onClose={handleClose}\n            />\n            {schedulesAndTemporarySchedules.map(\n                scheduleAndTemporarySchedule => (\n                    <ExpansionPanel key={shortId.generate()} {...expandedProp}>\n                        <ExpansionPanelSummary\n                            expandIcon={<MdExpandMore />}\n                            id={'panel1a-header' + shortId.generate()}\n                        >\n                            <h2>{scheduleAndTemporarySchedule.date}</h2>\n                        </ExpansionPanelSummary>\n                        <ExpansionPanelDetails>\n                            <Divider />\n                            <section className=\"temporary-schedule-list\">\n                                {scheduleAndTemporarySchedule.schedules.map(\n                                    schedule => (\n                                        <section\n                                            className=\"temporary-schedule-row\"\n                                            key={shortId.generate()}\n                                        >\n                                            <Card\n                                                class={\n                                                    'done-card text-center ' +\n                                                    (schedule.schedule\n                                                        .vacation &&\n                                                        'vacation-card ')\n                                                }\n                                            >\n                                                {!schedule.temporary_schedule && (\n                                                    <TemporaryScheduleCardButtons\n                                                        schedule={\n                                                            schedule.schedule\n                                                        }\n                                                        date={\n                                                            scheduleAndTemporarySchedule.date\n                                                        }\n                                                        isTemporary={false}\n                                                        scheduleId={\n                                                            schedule.schedule.id\n                                                        }\n                                                    />\n                                                )}\n                                                <TemporaryScheduleCard\n                                                    schedule={schedule.schedule}\n                                                />\n                                            </Card>\n                                            <Divider\n                                                orientation=\"vertical\"\n                                                flexItem\n                                                className=\"divider\"\n                                            />\n                                            {schedule.temporary_schedule ? (\n                                                <Card\n                                                    class={\n                                                        'done-card text-center ' +\n                                                        (schedule.temporary_schedule_vacation &&\n                                                            'vacation-card ')\n                                                    }\n                                                >\n                                                    <TemporaryScheduleCardButtons\n                                                        schedule={\n                                                            schedule.temporary_schedule\n                                                        }\n                                                        date={\n                                                            scheduleAndTemporarySchedule.date\n                                                        }\n                                                        scheduleId={\n                                                            schedule.schedule.id\n                                                        }\n                                                        isTemporary={true}\n                                                        onOpenDialog={\n                                                            handleClickOpen\n                                                        }\n                                                        setDate={setDate}\n                                                        setTeacherId={\n                                                            setTeacherId\n                                                        }\n                                                    />\n                                                    <TemporaryScheduleCard\n                                                        schedule={\n                                                            schedule.temporary_schedule\n                                                        }\n                                                    />\n                                                </Card>\n                                            ) : (\n                                                <Card class=\"done-card hidden-card\">\n                                                    Hidden\n                                                </Card>\n                                            )}\n                                        </section>\n                                    )\n                                )}\n                            </section>\n                        </ExpansionPanelDetails>\n                    </ExpansionPanel>\n                )\n            )}\n        </main>\n    );\n};\n\nexport default ScheduleAndTemporaryScheduleList;\n","export const temporaryScheduleRadioTypes = {\n    SEMESTER: 'semester',\n    FEW_DAYS: 'days',\n    ONE_DAY: 'day'\n};\n","import React, { useEffect, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\n\nimport ExpansionPanel from '@material-ui/core/ExpansionPanel';\nimport ExpansionPanelSummary from '@material-ui/core/ExpansionPanelSummary';\nimport Typography from '@material-ui/core/Typography';\nimport ExpansionPanelDetails from '@material-ui/core/ExpansionPanelDetails';\nimport RadioGroup from '@material-ui/core/RadioGroup';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Radio from '@material-ui/core/Radio';\nimport { DatePicker, MuiPickersUtilsProvider } from '@material-ui/pickers';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\nimport { makeStyles } from '@material-ui/core/styles';\n\nimport MomentUtils from '@date-io/moment';\nimport * as moment from 'moment';\n\nimport { temporaryScheduleRadioTypes } from '../../../constants/temporaryScheduleRadioTypes';\n\nimport {\n    getTeacherTemporarySchedulesService,\n    getTemporarySchedulesService,\n    selectTeacherIdService\n} from '../../../services/temporaryScheduleService';\nimport { handleTeacherInfo } from '../../../helper/renderTeacher';\nimport Divider from '@material-ui/core/Divider';\n\nconst useStyles = makeStyles({\n    teacherField: {\n        width: '250px'\n    },\n    dateGroup: {\n        display: 'flex',\n        margin: '0 auto',\n        width: '250px',\n        justifyContent: 'space-between'\n    },\n    dateField: {\n        width: '120px',\n        margin: '0'\n    },\n    day: {\n        width: '250px',\n        margin: '0'\n    },\n    button: {\n        width: '250px',\n        margin: '0 auto'\n    },\n    panel: {\n        width: '300px',\n        margin: '0 auto'\n    },\n    block: {\n        display: 'block'\n    },\n    legendBlock: {\n        textAlign: 'left',\n        margin: '10px 0'\n    },\n    legend: {\n        display: 'inline-block',\n        width: '10px',\n        height: '10px',\n        backgroundColor: '#F5DEB3'\n    }\n});\n\nconst TemporaryScheduleTitle = props => {\n    const { t } = useTranslation('common');\n    const classes = useStyles();\n    const [day, setDay] = useState(null);\n\n    const [radio, setRadio] = useState(temporaryScheduleRadioTypes.SEMESTER);\n\n    const { teachers, teacherId } = props;\n    const { toDate, setToDate } = props;\n    const { fromDate, setFromDate } = props;\n\n    useEffect(() => {\n        if (radio === temporaryScheduleRadioTypes.SEMESTER)\n            getTemporarySchedulesService(null, null);\n    }, []);\n\n    const handleChange = event => {\n        if (event.target.value === temporaryScheduleRadioTypes.SEMESTER)\n            selectTeacherIdService(null);\n        setToDate(false);\n        setFromDate(false);\n        setDay(false);\n        setRadio(event.target.value);\n    };\n\n    const handleDayChange = date => {\n        setFromDate(null);\n        setToDate(null);\n        setDay(moment(date, 'DD-MM-YYYY').format('DD-MM-YYYY'));\n    };\n\n    const handleFromDateChange = date => {\n        setDay(null);\n        setFromDate(moment(date, 'DD-MM-YYYY').format('DD-MM-YYYY'));\n    };\n\n    const handleToDateChange = date => {\n        setDay(null);\n        setToDate(moment(date, 'DD-MM-YYYY').format('DD-MM-YYYY'));\n    };\n\n    const handleClick = () => {\n        let fDate;\n        let tDate;\n        switch (radio) {\n            case temporaryScheduleRadioTypes.SEMESTER:\n                fDate = null;\n                tDate = null;\n                break;\n            case temporaryScheduleRadioTypes.FEW_DAYS:\n                fDate = fromDate;\n                tDate = toDate;\n                break;\n            case temporaryScheduleRadioTypes.ONE_DAY:\n                fDate = day;\n                tDate = day;\n                break;\n            default:\n                tDate = null;\n                fDate = null;\n        }\n        if (teacherId) {\n            getTeacherTemporarySchedulesService(teacherId, fDate, tDate);\n        } else {\n            getTemporarySchedulesService(fDate, tDate);\n        }\n    };\n\n    const defaultProps = {\n        options: teachers,\n        getOptionLabel: option => (option ? handleTeacherInfo(option) : '')\n    };\n\n    const handleFindTeacher = teacherId => {\n        if (teacherId)\n            return teachers.find(teacher => teacher.id === teacherId);\n        else return '';\n    };\n\n    const handleTeacherSelect = teacher => {\n        if (teacher) selectTeacherIdService(teacher.id);\n    };\n\n    return (\n        <section className={classes.panel}>\n            <ExpansionPanel>\n                <ExpansionPanelSummary aria-controls=\"panel1a-content\">\n                    <Typography className={classes.heading}>\n                        {t('temporary_schedule_for_teacher_title')}\n                    </Typography>\n                </ExpansionPanelSummary>\n                <ExpansionPanelDetails className={classes.block}>\n                    <Divider />\n                    <div className={classes.legendBlock}>\n                        <div className={classes.legend} /> -{' '}\n                        {t('holiday_label')}\n                    </div>\n                    <Divider />\n                    <RadioGroup\n                        className={classes.dateGroup}\n                        value={radio}\n                        onChange={handleChange}\n                    >\n                        <FormControlLabel\n                            value={temporaryScheduleRadioTypes.SEMESTER}\n                            control={<Radio color=\"primary\" />}\n                            label={t('formElements:semester_label')}\n                        />\n                        <FormControlLabel\n                            value={temporaryScheduleRadioTypes.FEW_DAYS}\n                            control={<Radio color=\"primary\" />}\n                            label={t('few_days_label')}\n                        />\n                        <FormControlLabel\n                            value={temporaryScheduleRadioTypes.ONE_DAY}\n                            control={<Radio color=\"primary\" />}\n                            label={t('one_day')}\n                        />\n                    </RadioGroup>\n                    {radio !== temporaryScheduleRadioTypes.SEMESTER && (\n                        <MuiPickersUtilsProvider utils={MomentUtils}>\n                            {radio === temporaryScheduleRadioTypes.FEW_DAYS ? (\n                                <div className={classes.dateGroup}>\n                                    <DatePicker\n                                        margin=\"normal\"\n                                        label={t(\n                                            'formElements:class_from_label'\n                                        )}\n                                        format=\"DD/MM/YYYY\"\n                                        className={classes.dateField}\n                                        value={\n                                            fromDate\n                                                ? moment(\n                                                      fromDate,\n                                                      'DD/MM/YYYY'\n                                                  ).toDate()\n                                                : null\n                                        }\n                                        onChange={handleFromDateChange}\n                                    />\n                                    <DatePicker\n                                        margin=\"normal\"\n                                        className={classes.dateField}\n                                        label={t('formElements:class_to_label')}\n                                        format=\"DD/MM/YYYY\"\n                                        value={\n                                            toDate\n                                                ? moment(\n                                                      toDate,\n                                                      'DD/MM/YYYY'\n                                                  ).toDate()\n                                                : null\n                                        }\n                                        onChange={handleToDateChange}\n                                    />\n                                </div>\n                            ) : (\n                                <DatePicker\n                                    margin=\"normal\"\n                                    className={classes.day}\n                                    label={t('date')}\n                                    format=\"DD/MM/YYYY\"\n                                    value={\n                                        day\n                                            ? moment(day, 'DD/MM/YYYY').toDate()\n                                            : null\n                                    }\n                                    onChange={handleDayChange}\n                                />\n                            )}\n                        </MuiPickersUtilsProvider>\n                    )}\n                    {radio !== temporaryScheduleRadioTypes.SEMESTER && (\n                        <Autocomplete\n                            {...defaultProps}\n                            clearOnEscape\n                            openOnFocus\n                            value={handleFindTeacher(teacherId)}\n                            onChange={(event, newValue) => {\n                                if (!newValue) handleTeacherSelect({});\n                                else handleTeacherSelect(newValue);\n                            }}\n                            renderInput={params => (\n                                <TextField\n                                    {...params}\n                                    className={classes.teacherField}\n                                    label={t('formElements:teacher_label')}\n                                    margin=\"normal\"\n                                />\n                            )}\n                        />\n                    )}\n\n                    <Button\n                        variant=\"contained\"\n                        className={classes.button}\n                        color=\"primary\"\n                        onClick={handleClick}\n                        disabled={\n                            (((!toDate || !fromDate) && !day) || !teacherId) &&\n                            !temporaryScheduleRadioTypes.SEMESTER\n                        }\n                    >\n                        Search\n                    </Button>\n                </ExpansionPanelDetails>\n            </ExpansionPanel>\n        </section>\n    );\n};\n\nexport default TemporaryScheduleTitle;\n","import React, { useState } from 'react';\nimport { FaEdit, MdDelete } from 'react-icons/all';\nimport { useTranslation } from 'react-i18next';\n\nimport Card from '../../../share/Card/Card';\nimport ConfirmDialog from '../../../share/modals/dialog';\n\nimport {\n    deleteTemporaryScheduleService,\n    selectTemporaryScheduleService,\n    selectVacationService\n} from '../../../services/temporaryScheduleService';\n\nimport Divider from '@material-ui/core/Divider';\n\nimport { cardType } from '../../../constants/cardType';\nimport TemporaryScheduleCard from '../TemporaryScheduleCard/TemporaryScheduleCard';\nimport { getTeacherForSite } from '../../../helper/renderTeacher';\n\nconst TemporaryScheduleList = props => {\n    const { t } = useTranslation('common');\n\n    const shortId = require('shortid');\n\n    const temporarySchedules = props.temporarySchedules || [];\n\n    const [open, setOpen] = useState(false);\n    const [temporaryScheduleId, setTemporaryScheduleId] = useState(-1);\n\n    const handleClickOpen = temporaryScheduleId => {\n        setTemporaryScheduleId(temporaryScheduleId);\n        setOpen(true);\n    };\n\n    const handleClose = temporaryScheduleId => {\n        setOpen(false);\n        if (!temporaryScheduleId) {\n            return;\n        }\n        deleteTemporaryScheduleService(temporaryScheduleId, null, null);\n    };\n\n    return (\n        <main className=\"container-flex-wrap\">\n            <ConfirmDialog\n                cardId={temporaryScheduleId}\n                whatDelete={cardType.TEMPORARY_SCHEDULE}\n                open={open}\n                onClose={handleClose}\n            />\n            {temporarySchedules.map(temporarySchedule => (\n                <Card\n                    class={\n                        'done-card' +\n                        (temporarySchedule.vacation ? ' vacation-card' : '')\n                    }\n                    key={shortId.generate()}\n                >\n                    <div className=\"cards-btns\">\n                        <FaEdit\n                            title={t('edit_hover_title')}\n                            className=\"svg-btn edit-btn\"\n                            onClick={() =>\n                                temporarySchedule.vacation\n                                    ? selectVacationService(temporarySchedule)\n                                    : selectTemporaryScheduleService(\n                                          temporarySchedule\n                                      )\n                            }\n                        />\n                        <MdDelete\n                            title={t('delete_hover_title')}\n                            className=\"svg-btn delete-btn\"\n                            onClick={() => {\n                                handleClickOpen(temporarySchedule.id);\n                            }}\n                        />\n                    </div>\n                    {!temporarySchedule.vacation ? (\n                        <>\n                            <TemporaryScheduleCard\n                                schedule={temporarySchedule}\n                            />\n                        </>\n                    ) : (\n                        <>\n                            <h2>{t('holiday_label')}</h2>\n                            <p>\n                                (\n                                {temporarySchedule.teacher?.name\n                                    ? getTeacherForSite(\n                                          temporarySchedule.teacher\n                                      )\n                                    : t('for_all')}\n                                )\n                            </p>\n                            <Divider />\n                        </>\n                    )}\n                    <p>\n                        {!temporarySchedule.vacation && <>{t('date')}{' '}:</>}\n                        <b>{temporarySchedule.date}</b>\n                    </p>\n                </Card>\n            ))}\n        </main>\n    );\n};\n\nexport default TemporaryScheduleList;\n","import React, { useEffect, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\n\nimport Card from '../../../share/Card/Card';\nimport renderMonthPicker from '../../../share/renderedFields/timeSemester';\n\nimport { Field, reduxForm } from 'redux-form';\n\nimport { TEMPORARY_SCHEDULE_VACATION_FORM } from '../../../constants/reduxForms';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Button from '@material-ui/core/Button';\nimport Switch from '@material-ui/core/Switch';\nimport TextField from '@material-ui/core/TextField';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\n\nimport {\n    greaterThanDate,\n    lessThanDate,\n    required\n} from '../../../validation/validateFields';\n\nimport { handleTeacherInfo } from '../../../helper/renderTeacher';\n\nimport {\n    selectTeacherIdService,\n    selectVacationService\n} from '../../../services/temporaryScheduleService';\nimport renderCheckboxField from '../../../share/renderedFields/checkbox';\n\nlet TemporaryScheduleVacationForm = props => {\n    const { t } = useTranslation('formElements');\n    const { handleSubmit, invalid, reset, submitting } = props;\n\n    const [isFewDays, setIsFewDays] = useState(false);\n    const [forAll, setForAll] = useState(true);\n    const [notify, setNotify] = useState(false);\n\n    const { teachers, teacherId } = props;\n\n    const { vacation } = props;\n    const vacationId = vacation.id;\n\n    useEffect(() => {\n        if (vacationId) {\n            initializeFormHandler(vacation);\n        } else {\n            props.initialize();\n        }\n    }, [vacationId]);\n\n    const initializeFormHandler = vacation => {\n        if (vacation.teacher?.id) {\n            selectTeacherIdService(vacation.teacher.id);\n            setForAll(false);\n        } else {\n            setForAll(true);\n        }\n        props.initialize({\n            id: vacation.id,\n            date: vacation.date\n        });\n    };\n\n    const handleForAllChange = event => {\n        setForAll(event.target.checked);\n    };\n\n    const handleChange = event => {\n        setIsFewDays(event.target.checked);\n    };\n\n    const handleNotifyChange = event => setNotify(event.target.checked);\n\n    const defaultProps = {\n        options: teachers,\n        getOptionLabel: option => (option ? handleTeacherInfo(option) : '')\n    };\n\n    const handleFindTeacher = teacherId => {\n        if (teacherId)\n            return teachers.find(teacher => teacher.id === teacherId);\n        else return '';\n    };\n\n    const handleTeacherSelect = teacher => {\n        if (teacher) selectTeacherIdService(teacher.id);\n    };\n\n    useEffect(() => {\n        if (teacherId) setForAll(false);\n    }, [teacherId]);\n\n    useEffect(() => {\n        if (forAll) selectTeacherIdService(null);\n    }, [forAll]);\n\n    return (\n        <Card class=\"form-card\">\n            <h2 className=\"form-title under-line\">\n                {vacationId ? t('edit_vacation_form') : t('create_vacation_form')}\n            </h2>\n            <form onSubmit={handleSubmit}>\n                <FormControlLabel\n                    control={\n                        <Checkbox\n                            checked={isFewDays}\n                            onChange={handleChange}\n                            color=\"primary\"\n                        />\n                    }\n                    label={t('common:few_days_label')}\n                />\n                {isFewDays ? (\n                    <>\n                        <Field\n                            className=\"time-input\"\n                            name=\"from\"\n                            component={renderMonthPicker}\n                            label={t('class_from_label') + ':'}\n                            validate={[required, lessThanDate]}\n                        />\n                        <Field\n                            className=\"time-input\"\n                            name=\"to\"\n                            component={renderMonthPicker}\n                            label={t('class_to_label') + ':'}\n                            validate={[required, greaterThanDate]}\n                        />\n                    </>\n                ) : (\n                    <Field\n                        className=\"time-input\"\n                        name=\"date\"\n                        component={renderMonthPicker}\n                        label={t('common:date') + ':'}\n                        validate={[required]}\n                    />\n                )}\n                <div>\n                    <FormControlLabel\n                        control={\n                            <Switch\n                                color=\"primary\"\n                                checked={forAll}\n                                onChange={handleForAllChange}\n                            />\n                        }\n                        label={forAll ? t('for_all') : t('for_teacher')}\n                    />\n                </div>\n                {!forAll && (\n                    <Autocomplete\n                        {...defaultProps}\n                        clearOnEscape\n                        openOnFocus\n                        value={handleFindTeacher(teacherId)}\n                        onChange={(event, newValue) => {\n                            if (!newValue) handleTeacherSelect({});\n                            else handleTeacherSelect(newValue);\n                        }}\n                        renderInput={params => (\n                            <TextField\n                                {...params}\n                                label={t('formElements:teacher_label')}\n                                margin=\"normal\"\n                            />\n                        )}\n                    />\n                )}\n                <Field\n                    name=\"notify\"\n                    label={t('common:notify_label')}\n                    component={renderCheckboxField}\n                    checked={notify}\n                    onChange={handleNotifyChange}\n                    color=\"primary\"\n                />\n\n                <div className=\"form-buttons-container\">\n                    <Button\n                        className=\"buttons-style\"\n                        type=\"submit\"\n                        variant=\"contained\"\n                        color=\"primary\"\n                        disabled={submitting || invalid}\n                    >\n                        {t('save_button_label')}\n                    </Button>\n                    <Button\n                        className=\"buttons-style\"\n                        type=\"button\"\n                        variant=\"contained\"\n                        disabled={submitting || invalid}\n                        onClick={() => {\n                            reset();\n                            selectVacationService({});\n                        }}\n                    >\n                        {t('clear_button_label')}\n                    </Button>\n                </div>\n            </form>\n        </Card>\n    );\n};\n\nTemporaryScheduleVacationForm = reduxForm({\n    form: TEMPORARY_SCHEDULE_VACATION_FORM\n})(TemporaryScheduleVacationForm);\n\nexport default TemporaryScheduleVacationForm;\n","import React, { useEffect, useState } from 'react';\nimport { connect } from 'react-redux';\nimport { useTranslation } from 'react-i18next';\n\nimport TemporaryScheduleForm from '../../components/TemporarySchedule/TemporaryScheduleForm/TemporaryScheduleForm';\nimport ScheduleAndTemporaryScheduleList\n    from '../../components/TemporarySchedule/ScheduleAndTemporaryScheduleList/ScheduleAndTemporaryScheduleList';\nimport TemporaryScheduleTitle from '../../components/TemporarySchedule/TemporaryScheduleTitle/TemporaryScheduleTitle';\nimport TemporaryScheduleList from '../../components/TemporarySchedule/TemporaryScheduleList/TemporaryScheduleList';\nimport TemporaryScheduleVacationForm\n    from '../../components/TemporarySchedule/TemporaryScheduleVacationForm/TemporaryScheduleVacationForm';\n\nimport CircularProgress from '@material-ui/core/CircularProgress';\n\nimport Card from '../../share/Card/Card';\n\nimport { setLoadingService } from '../../services/loadingService';\nimport { showAllTeachersService } from '../../services/teacherService';\nimport {\n    addTemporaryScheduleForRangeService,\n    addTemporaryScheduleService,\n    editTemporaryScheduleService\n} from '../../services/temporaryScheduleService';\nimport { getClassScheduleListService } from '../../services/classService';\nimport { showListOfRoomsService } from '../../services/roomService';\nimport { showAllSubjectsService } from '../../services/subjectService';\nimport { getLessonTypesService } from '../../services/lessonService';\nimport { showAllGroupsService } from '../../services/groupService';\n\nimport './TemporarySchedule.scss';\nimport { navigation } from '../../constants/navigation';\nimport NavigationPage from '../../components/Navigation/NavigationPage';\n\nconst TemporarySchedule = props => {\n    const { t } = useTranslation('common');\n\n    const [fromDate, setFromDate] = useState(null);\n    const [toDate, setToDate] = useState(null);\n\n    const isLoading = props.loading;\n\n    const { teachers, teacherId } = props;\n    useEffect(() => {\n        setLoadingService(true);\n        showAllTeachersService();\n        showListOfRoomsService();\n        showAllSubjectsService();\n        getClassScheduleListService(null);\n        getLessonTypesService();\n        showAllGroupsService();\n    }, []);\n\n    const handleTemporaryScheduleSubmit = values => {\n        if (values.id) editTemporaryScheduleService(teacherId, values);\n        else addTemporaryScheduleService(teacherId, values, false);\n    };\n\n    const handleTemporaryScheduleVacationSubmit = values => {\n        if (!values.from && !values.to) {\n            if (values.id)\n                editTemporaryScheduleService(\n                    teacherId,\n                    {\n                        ...values,\n                        vacation: true\n                    },\n                    true\n                );\n            else\n                addTemporaryScheduleService(\n                    teacherId,\n                    {\n                        ...values,\n                        vacation: true\n                    },\n                    true\n                );\n        } else {\n            addTemporaryScheduleForRangeService(\n                teacherId,\n                {\n                    ...values,\n                    vacation: true\n                },\n                true\n            );\n        }\n    };\n\n    return (\n        <>\n            <NavigationPage val={navigation.CHANGES} />'\n            <Card class='card-title lesson-card'>\n                <TemporaryScheduleTitle\n                    teacherId={teacherId}\n                    teachers={teachers}\n                    fromDate={fromDate}\n                    setFromDate={setFromDate}\n                    toDate={toDate}\n                    setToDate={setToDate}\n                />\n            </Card>\n            <div className='cards-container'>\n                <aside>\n                    {props.temporarySchedule.id ||\n                    props.temporarySchedule.scheduleId ? (\n                        <TemporaryScheduleForm\n                            temporarySchedule={props.temporarySchedule}\n                            teacherRangeSchedule={props.teacherRangeSchedule}\n                            teacherId={teacherId}\n                            onSubmit={handleTemporaryScheduleSubmit}\n                            lessonTypes={props.lessonTypes}\n                            teachers={teachers}\n                            rooms={props.rooms}\n                            periods={props.periods}\n                            subjects={props.subjects}\n                            groups={props.groups}\n                        />\n                    ) : (\n                        <TemporaryScheduleVacationForm\n                            teachers={teachers}\n                            vacation={props.vacation}\n                            onSubmit={handleTemporaryScheduleVacationSubmit}\n                            teacherId={teacherId}\n                        />\n                    )}\n                </aside>\n                {isLoading ? (\n                    <section className='centered-container'>\n                        <CircularProgress />\n                    </section>\n                ) : (\n                    <>\n                        {props.schedulesAndTemporarySchedules.length > 0 && (\n                            <ScheduleAndTemporaryScheduleList\n                                schedulesAndTemporarySchedules={\n                                    props.schedulesAndTemporarySchedules\n                                }\n                            />\n                        )}\n                        {props.temporarySchedules.length > 0 && (\n                            <TemporaryScheduleList\n                                temporarySchedules={props.temporarySchedules}\n                            />\n                        )}\n                        {props.schedulesAndTemporarySchedules.length === 0 &&\n                        props.temporarySchedules.length === 0 && (\n                            <section className='centered-container'>\n                                <h2>{t('empty')}</h2>\n                            </section>\n                        )}\n                    </>\n                )}\n            </div>\n        </>\n    );\n};\n\nconst mapStateToProps = state => ({\n    schedulesAndTemporarySchedules:\n    state.temporarySchedule.schedulesAndTemporarySchedules,\n    temporarySchedules: state.temporarySchedule.temporarySchedules,\n    temporarySchedule: state.temporarySchedule.temporarySchedule,\n    vacation: state.temporarySchedule.vacation,\n    lessonTypes: state.lesson.lessonTypes,\n    subjects: state.subjects.subjects,\n    rooms: state.rooms.rooms,\n    periods: state.classActions.classScheduler,\n    groups: state.groups.groups,\n    loading: state.loadingIndicator.loading,\n    teachers: state.teachers.teachers,\n    teacherId: state.temporarySchedule.teacherId\n});\n\nexport default connect(mapStateToProps)(TemporarySchedule);\n","import React from 'react';\nimport {\n    BrowserRouter as Router,\n    Redirect,\n    Route,\n    Switch\n} from 'react-router-dom';\nimport { connect } from 'react-redux';\n\nimport Header from '../components/Header/Header';\n\nimport HomePage from '../containers/Home/Home';\nimport TeacherSchedule from '../components/TeacherSchedule/TeacherSchedule';\nimport SchedulePage from '../containers/SchedulePage/SchedulePage';\nimport AdminPage from '../containers/AdminPage/AdminPage';\nimport Logout from '../containers/Auth/Logout/Logout';\nimport ActivationPage from '../containers/ActivationPage/ActivationPage';\nimport ProfilePage from '../containers/ProfilePage/ProfilePage';\nimport { links } from '../constants/links';\nimport { userRoles } from '../constants/userRoles';\nimport TeacherList from '../containers/TeachersList/TeachersList';\nimport BusyRooms from '../containers/BusyRooms/BusyRooms';\nimport GroupList from '../containers/GroupList/GroupList';\nimport ClassSchedule  from '../containers/ClassSchedule/ClassSchedule';\nimport RoomList from '../containers/RoomList/RoomList';\nimport SubjectPage from '../containers/SubjectPage/SubjectPage';\nimport SemesterPage from '../containers/SemesterPage/SemesterPage';\nimport MergeRolePage from '../containers/MergeRolePage/MergeRolePage';\nimport ChangePasswordForm from '../components/ChangePasswordForm/ChangePasswordForm';\nimport GroupSchedulePage from '../components/GroupSchedulePage/GroupSchedulePage';\nimport { Register } from '../components/Register/Register';\nimport { ResetPassword } from '../components/ResetPassword/ResetPassword';\nimport { Login } from '../components/Login/Login';\nimport DepartmentPage from '../containers/DepartmentPage/DepartmentPage';\nimport TemporarySchedule from '../containers/TemporarySchedule/TemporarySchedule';\nconst Routers = props => {\n    const userRole = props.userRole;\n\n    let routes = (\n        <Switch>\n            <Route path={links.Registration} component={Register}/>\n            <Route path={links.HOME_PAGE} exact component={HomePage} />\n            <Route path={links.ScheduleFor} component={GroupSchedulePage}/>\n            <Route path={links.ADMIN_PAGE}>\n                <Redirect to={links.LOGIN} />\n            </Route>\n            <Route path={links.LOGIN} component={Login} />\n            <Route path={links.ACTIVATION_PAGE} component={ActivationPage} />\n            <Route path={links.MY_PROFILE} component={ProfilePage} />\n\n        </Switch>\n    );\n\n    if (userRole === userRoles.MANAGER) {\n        routes = (\n            <Switch>\n                <Route path={links.SCHEDULE_PAGE} component={SchedulePage} />\n                <Route path={links.Departments} component={DepartmentPage}/>\n                <Route path={links.Registration} component={Register}/>\n                <Route path={links.RESET_PASSWORD} component={ResetPassword}/>\n                <Route path={links.HOME_PAGE} exact component={HomePage} />\n\n                <Route path={links.LessonPage}  component={AdminPage} />\n                <Route path={links.TeacherList}  component={TeacherList} />\n                <Route exact path={links.GroupList} component={GroupList} />\n\n                <Route path={`${links.GroupList}${links.Group}${links.Edit}${links.IdParam}`}  component={GroupList} />\n                <Route path={`${links.GroupList}${links.Group}${links.Delete}${links.IdParam}`}  component={GroupList} />\n                <Route path={`${links.GroupList}${links.Group}${links.IdParam}${links.AddStudent}`}  component={GroupList} />\n                <Route path={`${links.GroupList}${links.Group}${links.IdParam}${links.SetDisable}`}  component={GroupList} />\n                <Route path={`${links.GroupList}${links.Group}${links.IdParam}${links.ShowStudents}`}  component={GroupList} />\n                <Route path={`${links.GroupList}${links.Group}${links.IdParam}${links.Student}${links.IdStudentParam}${links.Edit}`}  component={GroupList} />\n                <Route path={`${links.GroupList}${links.Group}${links.IdParam}${links.Student}${links.IdStudentParam}${links.Delete}`}  component={GroupList} />\n\n                <Route path={links.ClassScheduleTitle}  component={ClassSchedule} />\n                <Route path={links.RoomList}  component={RoomList} />\n                <Route path={links.SubjectPage}  component={SubjectPage} />\n                <Route path={links.BusyRooms}  component={BusyRooms} />\n                <Route path={links.SemesterPage}  component={SemesterPage} />\n                <Route path={links.MergeRolePage}  component={MergeRolePage} />\n                <Route path={links.Changes}  component={TemporarySchedule} />\n\n\n                <Route path={links.ACTIVATION_PAGE}>\n                    <Redirect to={links.ADMIN_PAGE} />\n                </Route>\n                <Route path={links.LOGIN} component={Login} />\n\n                <Route path={links.ADMIN_PAGE} component={AdminPage} />\n                <Route path={links.LOGOUT} component={Logout} />\n                <Route path={links.MY_PROFILE} component={ProfilePage} />\n                <Route path={links.ScheduleFor} component={GroupSchedulePage}/>\n\n\n            </Switch>\n        );\n    } else if (userRole) {\n        routes = (\n            <Switch>\n                <Route path={links.Registration} component={Register}/>\n                <Route path={links.RESET_PASSWORD} component={ResetPassword}/>\n                <Route path={links.HOME_PAGE} exact component={HomePage} />\n\n\n                <Route\n                    path={links.TEACHER_SCHEDULE}\n                    component={TeacherSchedule}\n                />\n                <Route path={links.SCHEDULE_PAGE}>\n                    <Redirect to={links.LOGIN} />\n                </Route>\n                <Route path={links.ADMIN_PAGE}>\n                    <Redirect to={links.LOGIN} />\n                </Route>\n                <Route path={links.LOGIN} component={Login} />\n                <Route path={links.ACTIVATION_PAGE}>\n                    <Redirect to={links.HOME_PAGE} />\n                </Route>\n                <Route path={links.MY_PROFILE} component={ProfilePage} />\n                <Route path={links.LOGOUT} component={Logout} />\n                <Route path={links.ScheduleFor} component={GroupSchedulePage}/>\n            </Switch>\n        );\n    }\n    return (\n        <Router>\n            <Header userRole={userRole} roles={userRoles} />\n            {routes}\n        </Router>\n    );\n};\n\nconst mapStateToProps = state => ({ userRole: state.auth.role });\n\nexport default connect(mapStateToProps)(Routers);\n","import { useDispatch, useSelector } from \"react-redux\";\nimport Snackbar from \"@material-ui/core/Snackbar\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport { Icon } from \"@material-ui/core\";\nimport React from 'react'\nimport { clearSnackbar } from '../../redux/actions/snackBarReducer';\n\nexport default function SuccessSnackbar() {\n    const dispatch = useDispatch();\n\n    const { successSnackbarMessage, successSnackbarOpen } = useSelector(\n        state => state\n    );\n\n    function handleClose() {\n        dispatch(clearSnackbar());\n    }\n\n    return (\n        <Snackbar\n            anchorOrigin={{\n                vertical: \"bottom\",\n                horizontal: \"left\"\n            }}\n            open={successSnackbarOpen}\n            autoHideDuration={4000}\n            onClose={handleClose}\n            aria-describedby=\"client-snackbar\"\n            message={\n                <span id=\"client-snackbar\">\n          <Icon>check_circle</Icon>\n                    {successSnackbarMessage}\n        </span>\n            }\n            action={[\n                <IconButton\n                    key=\"close\"\n                    aria-label=\"close\"\n                    color=\"inherit\"\n                    onClick={handleClose}\n                >\n                    <Icon>close</Icon>\n                </IconButton>\n            ]}\n        />\n    );\n}","export const showSuccessSnackbar = message => {\n    return dispatch => {\n        dispatch({ type: \"SNACKBAR_SUCCESS\", message });\n    };\n};\n\nexport const clearSnackbar = () => {\n    return dispatch => {\n        dispatch({ type: \"SNACKBAR_CLEAR\" });\n    };\n};","import React, { Suspense, useEffect } from 'react';\nimport './App.scss';\nimport Routers from './router/Routers';\nimport './helper/i18n';\nimport { connect } from 'react-redux';\n\nimport { authCheckState } from './redux/actions/index';\nimport { handleSnackbarCloseService } from './services/snackbarService';\nimport SnackbarComponent from './share/Snackbar/SnackbarComponent';\nimport SuccessSnackbar from './components/SuccessSnackbar/SuccessSnackbar';\n\nconst App = props => {\n    const { isSnackbarOpen, snackbarType, snackbarMessage } = props;\n    const handleSnackbarClose = (event, reason) => {\n        if (!reason === 'clickaway') {\n            return;\n        }\n\n        handleSnackbarCloseService();\n    };\n\n    useEffect(() => {\n        props.onTryAutoLogin();\n    }, []);\n\n    return (\n        <Suspense fallback={null}>\n            <div className=\"container\">\n                <Routers />\n                <SuccessSnackbar />\n                <SnackbarComponent\n                    message={snackbarMessage}\n                    type={snackbarType}\n                    isOpen={isSnackbarOpen}\n                    handleSnackbarClose={handleSnackbarClose}\n                />\n            </div>\n        </Suspense>\n    );\n};\n\nconst mapStateToProps = state => ({\n    isSnackbarOpen: state.snackbar.isSnackbarOpen,\n    snackbarType: state.snackbar.snackbarType,\n    snackbarMessage: state.snackbar.message\n});\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        onTryAutoLogin: () => dispatch(authCheckState())\n    };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    window.location.hostname === '[::1]' ||\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        checkValidServiceWorker(swUrl, config);\n\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              console.log('Content is cached for offline use.');\n\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport { createStore, applyMiddleware, compose } from 'redux';\nimport createSagaMiddleware from 'redux-saga';\n\nimport rootReducer from './redux/reducers/index';\nimport rootSaga from './sagas';\n\nimport { Provider } from 'react-redux';\n\nimport './index.scss';\n\nimport App from './App';\n\nimport * as serviceWorker from './serviceWorker';\n\nconst sagaMiddleware = createSagaMiddleware();\n\nconst composeEnhancers =\n    (process.env.NODE_ENV === 'development'\n        ? window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__\n        : null) || compose;\n\nexport const store = createStore(\n    rootReducer,\n    composeEnhancers(applyMiddleware(sagaMiddleware))\n);\n\nsagaMiddleware.run(rootSaga);\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>,\n    document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}